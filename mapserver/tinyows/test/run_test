#!/bin/sh


#
# DO NOT call this file directly, use make check or make valgrind instead.
#

valgrind=$1
unit_id=$2
option=$3
file_out=$2"_out"
file_tmp=._tmp

valgrind_opt="--leak-check=yes --run-libc-freeres=no --show-reachable=yes"

if [ -f $file_in ]; then
  if [ $valgrind -eq 1 ]; then
    export QUERY_STRING="$option"
    valgrind $valgrind_opt ./tinyows 2> $file_tmp 1> /dev/null
    valgrind_error=`grep ERROR $file_tmp | sed -e 's/^==[0-9]\+== ERROR SUMMARY: //g' -e 's/from.\+$//' -e 's/ errors //'`
    valgrind_leak=`grep LEAK $file_tmp | wc -l`
			
    echo -n "$unit_id			-> $valgrind_error errors "

    if [ $valgrind_leak -eq 0 ] ; then
      echo " |  No leak detected"
    else
      echo " |  Memory leak detected"
    fi
    
    if [ $valgrind_leak -ne 0 -o "$valgrind_error" != 0 ] ; then
      echo "export QUERY_STRING='$option' && valgrind -v --show-reachable=yes $valgrind_opt ./tinyows" >> ERROR 
    fi

    else
      export QUERY_STRING=$option
      ./tinyows $option > $file_tmp 2>&1
      error=`diff $file_out $file_tmp | wc -l`

    if [ $error -eq 0 ] ; then
      echo "$unit_id 		-> OK"
    else
      echo "$unit_id 		-> Error"
    fi
  fi

  rm -f $file_tmp
else
  echo "Humpf 'run_test' call with wrong file !"
fi
