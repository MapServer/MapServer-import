..  $Id$
    
    This is the new unified mapscript documentation prepared using
    ReStructured Text.

    ***************************************************************
    RULE #1: No tabs in this document!
    RULE #2: Indent is 4 characters.
    RULE #3: There is no rule 3.

    Thank you.
    ***************************************************************
    
    ReStructured Text is part of the Python docutils module
    
        http://docutils.sourceforge.net/
    
    Documentation on ReStructured Text is found at

        http://docutils.sourceforge.net/rst.html

    First RST note is about comments: a double period begins a comment
    block (like a /* in C) and a double period on a line all by itself
    closes the comment block.
..

..  Below is our main heading (becomes H1).  Note that we require empty
    lines between every different RST element such as the empty line
    between the end of this comment and the begining of the heading.
..

=============================================================================
 Grand Unified Mapscript Documentation :)
=============================================================================
:Author: Sean Gillies
:Contact: sgillies@frii.com
:Revision: $Revision$
:Date: $Date$

..  The next heading encountered becomes our H2
..

-----------------------------------------------------------------------------
 Introduction
-----------------------------------------------------------------------------

This is language agnostic documentation for the mapscript interface to 
MapServer generated by SWIG.  This document is intended for developers
and to serve as a reference for writers of more extensive, language
specific documentation in DocBook format for the MDP.

To make the document as agnostic as possible, we refer to the following
types: int, float, and string.  There are yet no mapscript methods that
return arrays or sequences or accept array or sequence arguments.

We use the SWIG terms *mutable* and *immutable* instead of read-write
and read-only.

..  Following is an anchor, named 'colorObj'.  We link to this anchor by
    typing 'colorObj_'.  Let us always put such an anchor before all
    class headings.
..

.. _colorObj:

..  Subheading for colorObj
..

-----------------------------------------------------------------------------
 class colorObj
-----------------------------------------------------------------------------

Since the 4.0 release, MapServer colors are instances of colorObj.

..  The next heading becomes our H3
..

Attributes
----------

red : int mutable
    Red component of color in range [0-255]

green : int mutable
    Green component of color in range [0-255]

blue : int mutable
    Blue component of color in range [0-255]

Methods
-------

- `new colorObj`_
- setRGB_
- setHex_
- toHex_
   
Attribute Details
-----------------

int **red**, int **green**, int **blue**

Red, green, and blue can be any value between 0 and 255. *Mutable*.

Method Details
--------------

.. _`new colorObj`:

colorObj_ **new** **colorObj** ([int red=0, int green=0, int blue=0])

    Create a new instance.  The color arguments are optional.
    
.. _setRGB:

int **setRGB** (int red, int green, int blue)

    Set all three RGB components.
    
.. _setHex:

int **setHex** (string hexcolor)
    
    Set the color to values specified in case-independent hexadecimal
    notation.  Calling setHex('#ffffff') assigns values of 255 to each
    color component.
    
.. _toHex:

string **toHex** ()

    Compliments setHex, returning a hexadecimal representation of the
    color components.
    
.. _mapObj:

------------
class mapObj
------------

Attributes
----------

x

Methods
-------

x

Attribute Details
-----------------

x

Method Details
--------------

x

.. _layerObj:

--------------
class layerObj
--------------

.. _imageObj:

--------------
class imageObj
--------------

.. _pointObj:

--------------
class pointObj
--------------

Primitive class for points.

Attributes
----------

- x: float, mutable
- y: float, mutable
- m: float, mutable

Methods
-------

- `new pointObj`_
- distanceToPoint_
- distanceToSegment_
- distanceToShape_
- draw [pointObj.draw_]
- project [pointObj.project_]

Attribute Details
-----------------

float **x**, float **y**

Easting and northing values.  *Mutable*.

float **m**

Measure is meaningful only for measured shapefiles.  *Mutable*.

Method Details
--------------

.. _new pointObj:

pointObj_ **new** **pointObj** ([float x, float y])

    Create new instance.  Easting and northing arguments are optional.

.. _pointObj.draw:

int **draw** (mapObj_ map, layerObj_ layer, imageObj_ image, int classindex, string text)

    Draw the point using the styles defined by the *classindex* class of
    *layer* and labeled with string *text*.

.. _distanceToPoint:

float **distanceToPoint** (pointObj_ point)

    Returns the distance to *point*.
   
.. _distanceToSegment:

float **distanceToSegment** (pointObj_ point1, pointObj_ point2)

    Returns the minimum distance to the line segment connecting
    *point1* and *point2*.
   
.. _distanceToShape:

float **distanceToShape** (shapeObj_ shape)

    Returns the minimum distance to *shape*.

.. _pointObj.project:

int **project** (projectionObj_ *proj_in*, projectionObj_ *proj_out*)

    Reproject point from *proj_in* to *proj_out*.  Transformation
    is done in place.

.. _projectionObj:

-------------------
class ProjectionObj
-------------------

.. _shapeObj:

--------------
class shapeObj
--------------

.. _rectObj:

-------------
class rectObj
-------------

Map extents and shape bounds are instances of rectObj_.
   
Attributes
----------

- minx: float, mutable
- miny: float, mutable
- maxx: float, mutable
- maxy: float, mutable

Methods
-------

- `new rectObj`_
- draw [rectObj.draw_]
- project [rectObj.project_]
- toPolygon_
   
Attribute Details
-----------------

float **minx**, float **miny**, float **maxx**, float **maxy**

    Minimum easting, minimum northing, maximum easting, and
    maximum northing of rectangle region.  *Mutable*.

Method Details
--------------

.. _new rectObj:

rectObj_  **new** **rectObj** ([float minx, float miny, float maxx, float maxy])

    Create new instance.  The four easting and northing arguments
    are optional.


.. _rectObj.draw:

int **draw** (mapObj_ map, layerObj_ layer, imageObj_ img, int classindex, string text)

    Draw rectangle into *img* using style defined by the *classindex* class
    of *layer*.  The rectangle is labeled with the string *text*.

.. _rectObj.project:

int **project** (projectionObj_ proj_in, projectionObj_ proj_out)

    Reproject rectangle from *proj_in* to *proj_out*.  Transformation
    is done in place.

.. _toPolygon:

shapeObj_ **toPolygon** ()

    Convert to a polygon of five vertices.
        

