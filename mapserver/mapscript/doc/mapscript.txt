..  $Id$
    
    This is the new unified mapscript documentation prepared using
    ReStructured Text.

    ***************************************************************
    RULE #1: No tabs in this document!
    RULE #2: Indent is 4 characters.
    RULE #3: There is no rule 3.

    Thank you.
    ***************************************************************
    
    ReStructured Text is part of the Python docutils module
    
        http://docutils.sourceforge.net/
    
    Documentation on ReStructured Text is found at

        http://docutils.sourceforge.net/rst.html

    First RST note is about comments: a double period begins a comment
    block (like a /* in C) and a double period on a line all by itself
    closes the comment block.
..

..  Below is our main heading (becomes H1).  Note that we require empty
    lines between every different RST element such as the empty line
    between the end of this comment and the begining of the heading.
..

=============================================================================
 Grand Unified Mapscript Documentation :)
=============================================================================
:Author: Sean Gillies
:Contact: sgillies@frii.com
:Revision: $Revision$
:Date: $Date$

..  The next heading encountered becomes our H2
..

-----------------------------------------------------------------------------
 Introduction
-----------------------------------------------------------------------------

This is language agnostic documentation for the mapscript interface to 
MapServer generated by SWIG.  This document is intended for developers
and to serve as a reference for writers of more extensive, language
specific documentation in DocBook format for the MDP.

Appendices
----------

Language-specific extensions are described in the following appendices

Python Appendix [`Text <python.txt>`__, `HTML <python.html>`__] 

Documentation Elements
----------------------

Classes will be documented in alphabetical order in the manner outlined below.
Class attributes and methods will be described reST definition lists with the
attribute or method as item, the type or return type as classifier, and a
concise description. To make the document as agnostic as possible, we refer to
the following types: int, float, and string.  There are yet no mapscript
methods that return arrays or sequences or accept array or sequence arguments.
We will use the SWIG terms *mutable* and *immutable* instead of read-write and
read-only when noting the degree of access which is allowed to the class
attribute.

class fooObj
,,,,,,,,,,,,

A paragraph or two about class fooObj.

Attributes
,,,,,,,,,,

attribute : type [access]
    Concise description of the attribute.

Methods
,,,,,,,

method : type
    Description of the method including elaboration on the method
    arguments, the method's actions, and returned values.

-----------------------------------------------------------------------------
 classObj
-----------------------------------------------------------------------------

An instance of classObj is a child of a layerObj instance and controls a
particular classification of the layer's data.

Attributes
----------

status : int mutable
    MS_ON or MS_OFF
    
numstyles : int immutable
    Number of styles for class
    
label : labelObj_ mutable
    Definition of class labeling
    
name : string mutable
    Unique within a layer
    
title : string mutable
    Text used for legend labeling

template : string mutable
    Template for queries

type : int mutable
    The layer type of its parent layer

minscale : float mutable
    The minimum scale at which class is drawn
    
maxscale : float mutable
    The maximum scale at which class is drawn
    
layer : layerObj_ immutable
    Reference to the parent layer

debug : int mutable
    MS_TRUE or MS_FALSE
    
keyimage : string
    Path to an image to represent the class in a legend.

Methods
-------

.. _new classObj:

new classObj(layerObj_ layer) : classObj_
    Create a new child classObj instance at the tail (highest index) of 
    the class array of the parent *layer*.

.. _createLegendIcon:
 
createLegendIcon(mapObj_ map, layerObj_ layer, int width, int height) : imageObj_
    Draw and return a new legend icon.

.. _drawLegendIcon:

drawLegendIcon(mapObj_ map, layerObj_ layer, int width, int height, imageObj_ dstImage, int dstX, int dstY) : int
    Draw the legend icon onto *dstImage* object at dstX, dstY.  Returns 
    MS_SUCCESS or MS_FAILURE.

.. _getExpressionString:
  
getExpressionString() : string
    Return a string representation of the expression enclosed in the quote
    characters appropriate to the expression type.

.. _classObj.getMetaData:

getMetaData(string key) : string
    Return the value of the classObj metadata at *key*.

.. _getStyle:

getStyle(int index) : styleObj_
    Return a reference to the styleObj at *index* in the styles array.

.. _insertStyle:

insertStyle(styleObj_ style [, int index=-1]) : int
    Insert a *copy* of *style* into the styles array at index *index*.
    Default is -1, or the end of the array.  Returns the index at which the 
    style was inserted.

.. _moveStyleDown:

moveStyleDown(int index) : int
    Swap the styleObj at *index* with the styleObj *index* + 1.
    
.. _moveStyleUp:

moveStyleUp(int index) : int
    Swap the styleObj at *index* with the styleObj *index* - 1.

.. _removeStyle:

removeStyle(int index) : styleObj_
    Remove the styleObj at *index* from the styles array and return a
    copy.

.. _setExpression:

setExpression(string expression) : int
    Set expression string where *expression* is a MapServer regular, logical
    or string expression.  Returns MS_SUCCESS or MS_FAILUIRE.
  
.. _classObj.setMetaData:

setMetaData(string key, string value) : int
    Insert *value* into the classObj metadata at *key*.  Returns MS_SUCCESS
    or MS_FAILURE.

-----------------------------------------------------------------------------
 colorObj
-----------------------------------------------------------------------------

Since the 4.0 release, MapServer colors are instances of colorObj.

..  The next heading becomes our H3
..

Attributes
----------

red : int mutable
    Red component of color in range [0-255]

green : int mutable
    Green component of color in range [0-255]

blue : int mutable
    Blue component of color in range [0-255]

Methods
-------

.. _`new colorObj`:

new colorObj([int red=0, int green=0, int blue=0]) : colorObj_ 
    Create a new instance.  The color arguments are optional.
    
.. _setRGB:

setRGB(int red, int green, int blue) : int 
    Set all three RGB components.  Returns MS_SUCCESS or MS_FAILURE.
    
.. _setHex:

setHex(string hexcolor) : int 
    Set the color to values specified in case-independent hexadecimal
    notation.  Calling setHex('#ffffff') assigns values of 255 to each
    color component.  Returns MS_SUCCESS or MS_FAILURE.
    
.. _toHex:

toHex() : string 
    Compliments setHex, returning a hexadecimal representation of the
    color components.
    
------------
 mapObj
------------

Attributes
----------

x

Methods
-------

x

-----------------------------------------------------------------------------
 labelObj
-----------------------------------------------------------------------------

x

-----------------------------------------------------------------------------
 layerObj
-----------------------------------------------------------------------------

x

-----------------------------------------------------------------------------
 imageObj
-----------------------------------------------------------------------------

x 

-----------------------------------------------------------------------------
 pointObj
-----------------------------------------------------------------------------

Primitive class for points.

Attributes
----------

x : float mutable
    Easting
    
y : float mutable
    Northing
    
m : float mutable
    Measure.  Meaningful only for measured shapefiles.

Methods
-------

.. _new pointObj:

new pointObj([float x, float y]) : pointObj_
    Create new instance.  Easting and northing arguments are optional.

.. _pointObj.draw:

draw(mapObj_ map, layerObj_ layer, imageObj_ image, int classindex, string text) : int
    Draw the point using the styles defined by the *classindex* class of
    *layer* and labeled with string *text*.  Returns MS_SUCCESS or MS_FAILURE.

.. _distanceToPoint:

distanceToPoint(pointObj_ point) : float
    Returns the distance to *point*.
   
.. _distanceToSegment:

distanceToSegment(pointObj_ point1, pointObj_ point2) : float
    Returns the minimum distance to a hypothetical line segment connecting 
    *point1* and *point2*.
   
.. _distanceToShape:

distanceToShape(shapeObj_ shape) : float
    Returns the minimum distance to *shape*.

.. _pointObj.project:

project(projectionObj_ proj_in, projectionObj_ proj_out) : int
    Reproject point from *proj_in* to *proj_out*.  Transformation
    is done in place.  Returns MS_SUCCESS or MS_FAILURE.

------------------------------------------------------------------------------
 projectionObj
------------------------------------------------------------------------------

x

------------------------------------------------------------------------------
 rectObj
------------------------------------------------------------------------------

Map extents and shape bounds are instances of rectObj_.
   
Attributes
----------

minx : float mutable
    Minimum easting
    
miny : float mutable
    Minimum northing
    
maxx : float mutable
    Maximum easting
    
maxy : float mutable
    Maximum northing

Methods
-------

.. _new rectObj:

new rectObj([float minx, float miny, float maxx, float maxy]) : rectObj_
    Create new instance.  The four easting and northing arguments
    are optional.

.. _rectObj.draw:

draw(mapObj_ map, layerObj_ layer, imageObj_ img, int classindex, string text) : int
    Draw rectangle into *img* using style defined by the *classindex* class
    of *layer*.  The rectangle is labeled with the string *text*.  Returns 
    MS_SUCCESS or MS_FAILURE.

.. _rectObj.project:

project(projectionObj_ proj_in, projectionObj_ proj_out) : int
    Reproject rectangle from *proj_in* to *proj_out*.  Transformation
    is done in place.  Returns MS_SUCCESS or MS_FAILURE.
    
.. _toPolygon:

toPolygon() : shapeObj_
    Convert to a polygon of five vertices.

-----------------------------------------------------------------------------
 shapeObj
-----------------------------------------------------------------------------

x

-----------------------------------------------------------------------------
 styleObj
-----------------------------------------------------------------------------

Support for multiple class styles is a new feature in the current unstable
(4.1) Mapscript and in the next stable (4.2) release.  The initial feature
request and notes are archived at http://mapserver.gis.umn.edu/bugs/show_bug.cgi?id=548.

An instance of styleObj can exist outside of a classObj container and
needs to be explicitly inserted into the classObj for use in mapping.

::

    styleobj = new styleObj()
    classobj.insertStyle(styleobj)
    
It is important to understand that because all MapServer object attributes
are *value* *objects* insertStyle_ inserts a *copy* of the
styleObj instance, not a reference to the instance itself.

Attributes
----------

symbol : int mutable
    The index within the map symbolset of the style's symbol.
    
symbolname : string immutable
    Name of the style's symbol.
    
size : int mutable
    Pixel width of the style's pen or symbol.

minsize : int mutable
    Minimum pen or symbol width for scaling styles.
    
maxsize : int mutable
    Maximum pen or symbol width for scaling.
    
offsetx : int mutable
    Draw with pen or symbol offset from map data.
    
offsety : int mutable
    Draw with pen or symbol offset from map data.
    
color : colorObj_ mutable
    Foreground or fill pen color.
    
backgroundcolor : colorObj_ mutable
    Background pen color.
    
outlinecolor : colorObj_ mutable
    Outline pen color.
    
Methods
-------

.. _new styleObj:

new styleObj() : styleObj_
    Returns new instance.

-----------------------------------------------------------------------------
 symbolSetObj
-----------------------------------------------------------------------------

x

