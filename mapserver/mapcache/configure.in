# Required initializer
AC_INIT(mod_mapcache,0.1,tbonfort@terriscope.fr)

# don't let AC_PROG_CC force "-g -O2"
: ${CFLAGS="-Wall"}

AC_PROG_CC



# macro that is used to parse a --with-xml2-config parameter
AC_DEFUN([XML2_CHECK],[
    AC_SUBST(XML2CONFIG)
    
    AC_ARG_WITH(
        xml2-config,
        [  --with-xml2-config[=/path/to/xml2-config]     xml2-config tool location],
        ,
        [with_xml2_config="yes"]
    )
    
    if test "$with_xml2_config" = "yes"; then
        AC_PATH_PROG(XML2CONFIG, xml2-config)
    elif test "$with_xml2_config" = "no"; then
        AC_MSG_ERROR(xml2-config is required and cannot be disabled)
    else
        AC_MSG_CHECKING(for xml2-config usability in $with_xml2_config)
        if test -x "$with_xml2_config"; then
            XML2CONFIG=$with_xml2_config
            AC_MSG_RESULT(yes)
        else
            AC_MSG_ERROR($with_xml2_config not found or not executable)
        fi
    fi
    if test -z "$XML2CONFIG"; then
        AC_MSG_ERROR(xml2-config utility not found. use --with-xml2-config to specify its location.)
    fi
    AC_SUBST(XML2CONFIG)
    AC_SUBST(XML2_CFLAGS,`$XML2CONFIG --cflags`)
    AC_SUBST(XML2_LIBS,`$XML2CONFIG --libs`)
])

# macro that is used to parse a --with-apxs parameter
AC_DEFUN([APXS_CHECK],[
    AC_SUBST(APXS)
    
    AC_ARG_WITH(
        apxs,
        [  --with-apxs[=/path/to/apxs]     Apache 2 apxs tool location],
        ,
        [with_apxs="yes"]
    )
    
    if test "$with_apxs" = "yes"; then
        AC_PATH_PROG(APXS, apxs2)
        if test -z "$APXS"; then
            AC_PATH_PROG(APXS, apxs)
        fi
    elif test "$with_apxs" = "no"; then
        AC_MSG_ERROR(apxs is required and cannot be disabled)
    else
        AC_MSG_CHECKING(for apxs usability in $with_apxs)
        if test -x "$with_apxs"; then
            APXS=$with_apxs
            AC_MSG_RESULT(yes)
        else
            AC_MSG_ERROR($with_apxs not found or not executable)
        fi
    fi
    if test -z "$APXS"; then
        AC_MSG_ERROR(apxs utility not found. use --with-apxs to specify its location.)
    fi
    AC_SUBST(APXS)
    APACHE_SBINDIR=`$APXS -q SBINDIR`
    AC_SUBST(APACHE_SBINDIR)
    AC_MSG_CHECKING([for apachectl utility])
    APACHECTL=
    if test -x "$APACHE_SBINDIR/apachectl" ; then
      APACHECTL="$APACHE_SBINDIR/apachectl" 
    else
      if test -x "$APACHE_SBINDIR/apache2ctl" ; then
        APACHECTL="$APACHE_SBINDIR/apache2ctl" 
      else
        AC_PATH_PROG(APACHECTL,apachectl)
        if test -z "$APACHECTL"; then
          AC_PATH_PROG(APACHECTL,apache2ctl)
        fi
      fi
    fi
    
    if test -z "$APACHECTL"; then
      AC_MSG_RESULT([Unable to find apachectl utility, you will not be able to restart
                   and install module with the created Makefile])
    else
      AC_MSG_RESULT([$APACHECTL])
    fi
    AC_SUBST(APACHECTL)
    AC_SUBST(APXS_CFLAGS,`$APXS -q CFLAGS`)
    AC_SUBST(APXS_CFLAGS_SHLIB,`$APXS -q CFLAGS_SHLIB`)
    AC_SUBST(APXS_INCLUDEDIR,`$APXS -q INCLUDEDIR`)
    AC_SUBST(APXS_LIBS_SHLIB,`$APXS -q LIBS_SHLIB`)
    
])

AC_DEFUN([CURL_CHECK],[
  AC_SUBST(CURLCONFIG)
  AC_ARG_WITH(curl_config,
    AC_HELP_STRING([--with-curl-config], [path to curl-config program]),
    ,
    [with_curl_config=yes]
  )
    if test "$with_curl_config" = "yes"; then
        AC_PATH_PROG(CURLCONFIG, curl-config)
    elif test "$with_curl_config" = "no"; then
        AC_MSG_ERROR(curl-config is required and cannot be disabled)
    else
        AC_MSG_CHECKING(for curl-config usability in $with_curl_config)
        if test -x "$with_curl_config"; then
            CURLCONFIG=$with_curl_config
            AC_MSG_RESULT(yes)
        else
            AC_MSG_ERROR($with_curl_config not found or not executable)
        fi
    fi
    if test -z "$CURLCONFIG"; then
        AC_MSG_ERROR(curl-config utility not found. use --with-curl-config to specify its location.)
    fi
    AC_SUBST(CURLCONFIG)
    AC_SUBST(CURL_CFLAGS,`$CURLCONFIG --cflags`)
    AC_SUBST(CURL_LIBS,`$CURLCONFIG --libs`)
])

AC_DEFUN([PKGCONFIG_CHECK],[
    AC_SUBST(PKGCONFIG)
    AC_ARG_WITH(pkg-config,
    AC_HELP_STRING([--with-pkg-config[=PATH]],[path to pkg-config)]),
    ,
    [with_pkg_config=yes])
    if test "$with_pkg_config" = "no"; then
        AC_MSG_CHECKING(for pkg-config usability)
        AC_MSG_RESULT(disabled by request)
    else
        if test "$with_pkg_config" = "yes" ; then
            AC_PATH_PROG(PKGCONFIG, pkg-config)
        else
            AC_MSG_CHECKING(for pkg-config usability in $with_pkg_config)
            if test -x "$with_pkg_config"; then
                PKGCONFIG=$with_pkg_config
                AC_MSG_RESULT(yes)
            else
                AC_MSG_ERROR($with_pkg_config not found or not executable)
            fi
        fi
        if test -z "$PKGCONFIG"; then
            AC_MSG_ERROR(pkg-config utility not found. use --with-pkg-config to specify its location.)
        fi
    fi
    AC_SUBST(PKGCONFIG)
])

AC_DEFUN([CAIRO_CHECK],[
    AC_ARG_WITH(cairo,
        AC_HELP_STRING([--with-cairo[[=ARG]]],[Include Cairo Support (ARG=yes/no/path to cairo.pc)]),
        ,
        [with_cairo=yes])
    
    if test "$with_cairo" = "no" -o "$with_cairo" = "" ; then
      AC_MSG_RESULT(no)
      CAIRO_CONFIG="no"
    else
        if test -z "$PKGCONFIG"; then
            AC_MSG_ERROR([cairo support requested, but pkg-config not found/configured])
        fi
        if test "$with_cairo" = "yes" ; then
            AC_MSG_CHECKING(for cairo pkg-config entry)
            `$PKGCONFIG --silence-errors -- cairo cairo-png >> /dev/null`
            if test $? -eq 0 ; then
                AC_MSG_RESULT(found)
                CAIRO_CONFIG="cairo cairo-png"
            else
                AC_MSG_ERROR([cairo support requested, but not found.Try installing the cairo development headers])
            fi
        else
          CAIRO_CONFIG=$with_cairo_config
        fi
    fi
    
    if test "$CAIRO_CONFIG" = "no" ; then
      AC_MSG_WARN([cairo support has been disabled or could not be configured.
      Metatiling and tile merging cannot be enabled on the resulting build])
      CAIRO_ENABLED=
      CAIRO_INC=
      CAIRO_LIB=
    else
      CAIRO_ENABLED="-DUSE_CAIRO"
      CAIRO_LIB=`$PKGCONFIG --libs $CAIRO_CONFIG`
      CAIRO_INC=`$PKGCONFIG --cflags $CAIRO_CONFIG`
    fi
    AC_SUBST(CAIRO_ENABLED,$CAIRO_ENABLED)
    AC_SUBST(CAIRO_INC,$CAIRO_INC)
    AC_SUBST(CAIRO_LIB,$CAIRO_LIB)
])

AC_DEFUN([DEBUG_CHECK],[
    AC_ARG_ENABLE(debug,
        AC_HELP_STRING([--enable-debug],[Enable debug build]),
        ,
        [enable_debug=no]
    )
    if test "$enable_debug" == "yes"; then
        CFLAGS="$CFLAGS -g -O0 -DDEBUG"
    else
        CFLAGS="-O2 -DNDEBUG"
    fi
    AC_SUBST(CFLAGS,$CFLAGS)
])

AC_DEFUN([MERGE_CHECK],[
    AC_SUBST(MERGE_ENABLED)
    if test -n "$CAIRO_ENABLED"; then
        AC_ARG_ENABLE(tile-merging,
            AC_HELP_STRING([--enable-tile-merging],[Enable on-the-fly tile merging - requires cairo]),
            ,
            [enable_tile_merging=yes]
        )
        if test "$enable_tile_merging" == "yes"; then
            AC_SUBST(MERGE_ENABLED,"-DMERGE_ENABLED")
        fi
    fi
])

DEBUG_CHECK

APXS_CHECK

PKGCONFIG_CHECK

CAIRO_CHECK

MERGE_CHECK

XML2_CHECK

CURL_CHECK

# Write config.status and the Makefile
AC_CONFIG_FILES(Makefile Makefile.inc)

AC_OUTPUT

