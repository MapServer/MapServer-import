=====================================================
MS RFC 8: Pluggable External Feature Layer Providers
=====================================================

:Date:  2005/10/26
:Author: Jani Averbach
:Contact: javerbach@extendthereach.com
:Last Edited: $Date$
:Status: draft


Purpose
--------

The purpose of this proposal is provide a way to user actually plug-in
external third party feature layer providers to the mapserver at run
time.


Abstract Solution
-----------------

Provide a way to user to tell via map-file which library to load for
layer, then load this library on demand and cache it for later use and
bind it to the running mapserver by layer's virtual table.


Technical Solution
-------------------

* New MAP-file keyword ``PLUGINLIB`` with string argument.  This
  keywords tells which library dynamically to load for this layer.

* New connection type ``CUSTOM``

* New field ``char* plugin_library`` in layerObj structure, this is
  the name of library to load for this layer.


* Function to get virtual table for requested layer. If the library
  isn't already loaded, it will be loaded  on demand.

  ::

     static const layerVTableObj *
     getCustomLayerVirtualTable(layerObj *layer)

  where ``layerVTableObj`` is the virtual table and layer is a custom
  layer. In case of error, funtion will return ``NULL``.


* Function to get a function pointer from dynamic loaded library. This
  function will also load the library.
  
  ::
  
     msGetDynamicLibrarySymbol(const char *Library, 
                               const char *SymbolName)

  This is implemented by GDAL project, and I have planned to use their
  implementation of this (``CPLGetSymbol``).


* Cache structrure for already loaded libraries. This cache structure
  will consist of a full name/path of the library (provided by user
  via mapfile), and a function pointer to the virtual table
  initialization function. The size of cache will be fixed and will be
  same as the maximum amount of layers (200 at the moment).  This is
  the maximum number of different custom layers for mapserver which
  could be loaded at the same time.  This cache implementation is
  internal, so if it has to be make dynamically allocated, it is
  possible to do later without breaking interface.


* New lock item (``TLOCK_LAYER_VTABLE``) to protect library cache structure.


Files and objects affected
--------------------------

This proposal will affect at least following files and objects:

* ``map.h``

  * ``layerObj`` will contain a new field, ``char *plugin_library``.

* New lock token ``TLOCK_LAYER_VTABLE``

* New files and objects for custom layer handling.


Backwards compatibility issues
------------------------------

This change is binary incompatible, but mapfile backward
compatible.  It will add a new keyword which is unknown for old
mapservers.

Implementation Issues
---------------------


Bug ID
------

Bug 1477_

.. _1477: http://mapserver.gis.umn.edu/bugs/show_bug.cgi?id=1477



Voting history
--------------

None



Open questions
--------------


=============
Working Notes
=============



.. 
   Local Variables: 
   mode: text
   coding: iso-latin-1-unix
   End:

