<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V4.1//EN">

<article>

<articleinfo>
  <title>Mapplet HOWTO</title>

  <author>
     <firstname>Ken</firstname>
     <surname>Boss</surname>
     <affiliation>
        <orgname>Minnesota Department of Natural Resources</orgname>
        <orgdiv>Forestry Resource Assessment</orgdiv>
        <address>
          <email>kenboss@dilbert.dnr.state.mn.us</email>
        </address>
     </affiliation>
  </author>

  <abstract>
    <para>
      This document describes the procedures for obtaining,
      installing, and incorporating the <application>mapplet</application> java applet into
      mapserver web pages.
    </para>
  </abstract>

</articleinfo>

<sect1 id="intro">
  <title>Introduction</title>

  <para>
    The <application>mapplet</application> java applet provides
    interface enhancements to web pages driven by either the mapserver
    CGI program or any of the variants of the mapscript scripting
    language.  This document describes how to add the
    <application>mapplet</application>to existing mapserver pages.
  </para>

  <para>
    This document assumes no previous knowledge or experience with
    java programming or applet installation.  It does, however, assume
    the following:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        You already have the mapserver/mapscript software installed
        and functioning on a web server.
      </para>
    </listitem>
    <listitem>
      <para>
        You are familiar with fundamental aspects of managing the
        mapserver software and the web server.
      </para>
    </listitem>
    <listitem>
      <para>
        You know how to download and unpack (unzip) archive files
        (eg., .tar or .zip files) from the internet.
      </para>
    </listitem>
    <listitem>
      <para>
        The mapserver demo application is running on your server (see
        both the download and documentation sections of the <ulink
        url="http://mapserver.gis.umn.edu">mapserver website</ulink>).
        If you don't have the demo running, but you do have your own
        mapserver application in place, you probably won't have any
        difficulty adapting the instructions given here to your
        application.
      </para>
    </listitem>
    <listitem>
      <para>
        You are basically familiar with the JavaScript browser
        scripting language.  Or, failing that, you are at least
        willing to seek out JavaScript reference materials on the web
        (the <ulink
        url="http://devedge.netscape.com/docs/manuals/index.html?content=javascript.html">Netscape
        JavaScript documentation pages</ulink> are a good place to
        start).
      </para>
    </listitem>
  </itemizedlist>

</sect1>

<sect1 id="features">
  <title><application>Mapplet</application> Features</title>

  <para>
    The <application>mapplet</application> adds the following functionality to
    mapserver/mapscript pages:
  </para>

  <variablelist><title>Features</title>
    <varlistentry><term>Box zooming</term>
      <listitem>
        <para>Users can "drag a box" over a map using their mouse and
        then zoom in to the extent defined by the box.</para>
      </listitem>
    </varlistentry>
    <varlistentry><term>Box querying</term>
      <listitem>
        <para>Users can "drag a box" over a map using their mouse and
        execute attribute queries for all features that intersect the
        box.</para>
      </listitem>
    </varlistentry>
    <varlistentry><term>Map image rollover</term>
      <listitem>
        <para>Requests for new maps can be loaded directly into the
        currently displayed page, without reloading the rest of the
        page.</para>
      </listitem>
    </varlistentry>
    <varlistentry><term>Cursor coordinate display</term>
      <listitem>
        <para>Requests for new maps can be loaded directly into the
        currently displayed page, without reloading the rest of the
        page.</para>
      </listitem>
    </varlistentry>
  </variablelist>

</sect1>

<sect1 id="obtain">
  <title>Obtaining the Software</title>

  <para>
    The <application>mapplet</application> can be obtained by pointing your web browser to the
    user-contributed mapserver utility pages at <ulink
    url="http://mapserver.gis.umn.edu/contributed.html">http://mapserver.gis.umn.edu/contributed.html</ulink>.
    Click on the <application>mapplet</application> link and save the zip file to a local disk.
  </para>
</sect1>

<sect1 id="install">
  <title>Installing the Software</title>

  <sect2 id="unpack">
    <title>Unpacking the Archive</title>

    <para>
      The first step toward installation involves unpacking the
      archive file you just downloaded.  How you go about this will
      depend on your operating system.  If you run into problems
      unpacking the archive, contact your system administrator for
      help.
    </para>
  </sect2>

  <sect2 id="position">
    <title>Positioning the Class File</title>

    <para>
      Once you have successfully unpacked the archive, you will find
      three new files: <filename>mapplet.class</filename>,
      <filename>mapplet.java</filename>, and
      <filename>evalThread.class</filename>.  The two
      <filename>.class</filename> files constitute the java byte code
      that you need in order to incorporate the applet into your
      pages.  The <filename>mapplet.java</filename> file is the java
      source code for the applet.  This file is included for the
      benefit of the curious, or for those who might want to modify
      the applet in some way, but it is not required for our purposes
      here.  Please note that if you do modify the code, you are
      encouraged to submit your modified source file to NEED AN
      ADDRESS OR MECHANISM HERE.
    </para>

    <para>
      To make the applet available to your server, you need simply to
      place the class files somewhere in your web document tree.  For
      example, if your document tree is rooted at:
    </para>

    <para>
      <filename class="directory">/usr/local/htdocs</filename>
    </para>

    <para>
      then you might make add a couple of subdirectories under htdocs
      so that you get a path like:
    </para>

    <para>
      <filename class="directory">/usr/local/htdocs/java/mapplet</filename>
    </para>

    <para>
      and then place the class files in the <application>mapplet</application>subdirectory.
    </para>

    <tip>
      <para>
        Though not required, it is generally good practice to store the
        class files for different applets in separate subdirectories
        within your document tree.  See SOME OTHER PLACE for details.
      </para>
    </tip>

    <para>
      Note that the class files themselves and the directory that you
      place them in all need to be accessible and readable by the user
      that your web server runs as (often user "nobody").  Make sure
      that the file and directory permissions are properly set, and
      that the web server is properly configured for this.
    </para>

  </sect2>

</sect1>

<sect1 id="integrate">
  <title>Integrating the <application>mapplet</application> with an existing mapserver application</title>

  <para>
    Now that the class files are in a web-accessible space, they can
    be integrated into a mapserver application.  At a basic level,
    this is quite simple.  We'll use the mapserver demo as an example.
  </para>

  <para>
    The only changes you need to make will be to the html template
    file that defines how your map pages are displayed.  For the
    mapserver demo, this is the file <filename>demo.html</filename>.
    There are essentially four things that need to be done:
  </para>

  <itemizedlist>
    <listitem>
      <para>Add a name attribute to the form that controls the map interface</para>
    </listitem>
    <listitem>
      <para>Add a couple of hidden variables to the form</para>
    </listitem>
    <listitem>
      <para>Add a couple of small JavaScript functions to the &lt;head&gt section</para>
    </listitem>
    <listitem>
      <para>Replace the output map image definition with the applet definition</para>
    </listitem>
  </itemizedlist>

  <para>
    Each of these steps is addressed separately below.
  </para>
  
  <sect2 id="nameform">
    <title>Name the html form</title>
 
    <para>
      The html form that controls the map interface in
      <filename>demo.html</filename> is defined by this line:
    </para>

    <programlisting>
      &lt;form method=GET action="/cgi-bin/mapserv3.3"&gt;
    </programlisting>

    <para>
      It will make things a bit easier if we add a name attribute to
      this form.  The addition of the name attribute will enable us to
      refer to the form by name in the JavaScript functions that we
      need to implement.  So change the line above to something like
      this:
    </para>

    <programlisting>
      &lt;form name="mapserv" method=GET action="/cgi-bin/mapserv3.3"&gt;
    </programlisting>
  </sect2>

  <sect2 id="addvars">
    <title>Add hidden variables to the form</title>
 
    <para>
      Next, we need to establish a couple of html form variables that
      will be passed back and forth between the applet and the
      JavaScript functions.  You can add the following lines just
      after the form definition that we doctored in the previous step:
    </para>

    <programlisting>
      &lt;input type="hidden" name="imgxy" value="299.5 299.5"&gt;
      &lt;input type="hidden" name="imgbox" value="-1 -1 -1 -1">&gt;
    </programlisting>

    <para>
      Note that the name attributes for these variables must be as
      shown.  The <varname>imgxy</varname> variable is used to
      communicate the position of a user's mouse click.  The
      <varname>imgbox</varname> variable is used to communicate the
      bounds of a box the user drags with their mouse.  The values for
      both variables are given in terms of image pixel coordinates.
    </para>

    <para>
      What we've done here amounts to initializing the two variables
      and assigning default values to them.  The size of our output
      map image is set in <filename>demo.map</filename> to 600x600
      pixels.  Notice that the coordinate pair we've assigned to
      <varname>imgxy</varname> defines the center of the map image,
      less half a pixel in both the x and y directions.
      <remark>WHY?</remark> This seems to be a reasonable default
      mouse click location.  The pixel coordinates used to define the
      default <varname>imgbox</varname> are set to -1 all around, which
      translates essentially to "no box".  Generally speaking, these
      default values will be replaced in accordance with users' mouse
      actions before they are passed to the applet.
    </para>
  </sect2>

  <sect2 id="addjs">
    <title>Add JavaScript functions</title>
 
    <para>
      Now we need to add a couple of JavaScript functions to enable
      communication with the applet.  Put these in the &lt;head&gt;
      section of <filename>demo.html</filename>, which looks like this
      by default:
    </para>

    <programlisting>&lt;head&gt;&lt;title&gt;MapServer Demo Interface&lt;/title&gt;&lt;/head&gt;</programlisting>

    <para>
      Change that to look more like this:
    </para>

    <programlisting>
      &lt;head&gt;&lt;title&gt;MapServer Demo Interface&lt;/title&gt;
      
      &lt;SCRIPT LANGUAGE="JavaScript"&gt;

        function mapplet_apply(name, minx, miny, maxx, maxy, redraw) {
          document.mapserv.imgbox.value = minx + " " + miny + " " + maxx + " " + maxy;
          document.mapserv.imgxy.value = minx + " " + miny;
        }

        function mapplet_error(message) {
          alert(message);
        } 

      &lt;/SCRIPT&gt;

      &lt;/head&gt;
    </programlisting>

    <para>
      One thing worthy of note here is the use of "mapserv" on the
      left side of the assignment statements in the
      <function>mapplet_apply</function> function:
    </para>

    <programlisting>
      document.mapserv.imgbox.value = ...
      document.mapserv.imgxy.value = ...
    </programlisting>

    <para>
      This is the name attribute that we assigned to the form, above.
      If you give your form a different name, you will need to use
      that name here as well.  Nothing else in the functions will
      require alteration.  You don't even really need to understand
      the functions, as you will never call them yourself - that is up
      to the applet.  It's easy enough to see, however, that the
      <function>mapplet_apply</function> function sets the values of
      the hidden variables we established earlier, and that the
      <function>mapplet_error</function> function provides a means for
      the applet to pass error messages out to the user.
    </para>
  </sect2>

  <sect2 id="changedef">
    <title>Change output map image definition</title>
 
      <para>
        Finally, we need to replace the output map image definition
        with the applet definition.  Find the following html snippet
        in <filename>demo.html</filename> (it may be strung out all on
        one line):
      </para>
    
      <programlisting>
        &lt;tr&gt;
          &lt;td colspan="2"&gt;
            &lt;INPUT NAME="img" TYPE="image" SRC="[img]" width=600 height=600 border=0&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
      </programlisting>
    
      <para>
        This is the definition of an html table cell that contains the
        output map image generated by mapserver.  We need to replace
        this with the applet definition.  Change the above block so
        that it reads something like this instead:
      </para>
    
      <programlisting>
        &lt;tr&gt;
          &lt;td colspan="2"&gt;
            &lt;applet codebase="/java/mapplet" code="mapplet.class" width="600" height="600" name="mapplet" MAYSCRIPT&gt;
              &lt;param name="image" value="http://[host][img]"&gt;
            &lt;/applet&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
      </programlisting>
  
      <para>
        Let's pick this applet definition apart for a bit.
      </para>
  
      <sect3>
        <title>A Closer Look</title>

        <variablelist><title>The &lt;applet&gt; tag</title>

          <varlistentry><term>codebase</term>
            <listitem>
              <para>
                Specifies the path, rooted at the root of your html document
                tree, to the directory containing the needed class file(s).  If
                you put your class files in a directory structure other than
                <filename class="directory">/java/mapplet</filename>, you will
                need to change the codebase attribute accordingly.
                  <note><para>
                    you can also use a url for the codebase attribute,
                    so that the class files could actually be located just about
                    anywhere on the internet.
                  </para></note>
              </para>
            </listitem>
          </varlistentry>
          <varlistentry><term>code</term>
            <listitem>
              <para>
                Specifies the name of the class file that is to be executed.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry><term>width</term>
            <listitem>
              <para>
                Defines the width (in pixels) of the space to be allocated to
                the applet on the html page.  This value should be the same as
                the width of your output map image, which is set to 600 in
                <filename>demo.map</filename>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry><term>height</term>
            <listitem>
              <para>
                Defines the height (in pixels) of the space to be allocated to
                the applet on the html page.  This value should be the same as
                the height of your output map image.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry><term>name</term>
            <listitem>
              <para>
                Assigns a name to the applet for use within the html page.  This
                is handy for use in referring to the applet within JavaScript
                code.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry><term>MAYSCRIPT</term>
            <listitem>
              <para>
                Permits the java applet to access JavaScript functions
                (required for the <application>mapplet</application>).  Accessing JavaScript
                when the MAYSCRIPT attribute is not specified results
                in an exception.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>

          <para>
            Parameters to be passed to the applet are specified in
            &lt;param&gt; tags embedded between the opening and
            closing &lt;applet&gt; tags.  Here we have defined only one:
          </para>

        <variablelist><title>Applet parameters</title>
          <varlistentry><term>image</term>
            <listitem>
              <para>
                Specifies the map image to be loaded into the applet.  Must be a
                fully-qualified URL.  The "[host]" and "[img]" specifiers used here are
                standard mapserver template substitutions, and will be swapped
                out for the appropriate values when the mapserver parses
                <filename>demo.html</filename>.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
          
      </sect3>

  </sect2>
</sect1>

<sect1 id="firstrun">
  <title>A First Run</title>

  <para>
    Assuming you have made the changes to
    <filename>demo.html</filename> detailed in the previous section,
    you should now be able to load the modified version into your
    browser.  Go ahead and load the front page and hit the
    <guilabel>Initialize</guilabel> button.  You can now specify
    a zoom extent by dragging a box over the map.  You'll need to have
    the <guilabel>Browse map</guilabel> button on, and hit the
    <guilabel>Refresh/Query</guilabel> button in order to make the box
    zoom take effect.
  </para>
  
  <para>
    What's more, if you turn on the <guilabel>Query multiple
    features</guilabel> button, drag a box, and hit the
    <guilabel>Query/Refresh</guilabel> button, you'll get back results
    for all of the features that intersect the bounds of your box.
  </para>

  <para>
    However, if you turn on the <guilabel>Query feature</guilabel>
    button and try to get information on some feature, you'll probably
    notice a couple of things:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        You don't get "instant results" when you click on a feature in
        the map like you used to.  A small crosshair appears at the
        point of your mouse click, but that's about it.  You have to
        make the effort of going over and clicking on the
        <guilabel>Refresh/Query</guilabel> button before you actually
        get results back.
      </para>
    </listitem>
    <listitem>
      <para>
        If you try dragging a box and then hit the
        <guilabel>Refresh/Query</guilabel> button, you get a different
        error message:

        <errorname>mapserv(): Web application error. Query mode needs a point, imgxy and mapxy are not set.</errorname>
      </para>
    </listitem>
  </itemizedlist>

  <para>
    Is this the experience you want for your users?  Likely not.  The
    next section will explain how to circumvent these problems with a
    bit of JavaScript code.
  </para>

</sect1>

<sect1 id="finetune">
<title>Fine-tuning with JavaScript</title>
  <para>
    Under construction.
  </para>
</sect1>

<sect1 id="parameters">
<title>Optional <application>Mapplet</application> Parameters</title>

  <para>
    So far we have passed one parameter to the
    <application>mapplet</application>, as seen in the following line
    from <filename>demo.html</filename>:
  </para>

  <programlisting>
    &lt;param name="image" value="http://[host][img]"&gt;
  </programlisting>

  <para>
    The "image" parameter must be specified in order for the
    <application>mapplet</application> to function.  There are several
    optional parameters that can be passed as a means of customizing
    your <application>mapplet</application> appearance and
    functionality.  The syntax for specifying these parameters in
    <filename>demo.html</filename> is the same as shown above, that
    is, you need to put something like:
  </para>

  <programlisting>
    &lt;param name="somename" value="somevalue"&gt;
  </programlisting>

  <para>
    between the opening and closing applet tags.  Each of the optional
    parameters, their purpose and valid values are given below.
  </para>

  <variablelist><title>Optional parameters</title>
    <varlistentry><term>jitter</term>
      <listitem>
        <para>
          Specifies how far (in pixels) a user needs to drag their
          mouse before the <application>mapplet</application> will
          believe that they are actually dragging a box.  This
          prevents poorly-executed single-clicks at the mouse from
          being interpreted as dragged boxes.  Values should be
          integers.  Default is five.
       </para>
      </listitem>
    </varlistentry>
    <varlistentry><term>color</term>
      <listitem>
        <para>
          Specifies the color to use when drawing the mouse-dragged
          box or the mouse-clicked crosshair cursor.  Color values may
          be specified using either a comma-delimited RGB triplet (for
          example, value="255,255,255" draws a white box), or the
          english name for one of thirteen pre-defined colors (black,
          blue, cyan, darkGray, gray, green, lightGray, magenta,
          orange, pink, red, white or yellow).  Default is red.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry><term>thickness</term>
      <listitem>
        <para>
          Specifies the thickness (in pixels) of the line to use in
          drawing the box (does not affect the crosshair cursor).
          Values should be integers.  Default is one.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry><term>cursorsize</term>
      <listitem>
        <para>
          Specifies the radius (in pixels) of the crosshair cursor.
          Values should be integers.  Default is four.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry><term>verbose</term>
      <listitem>
        <para>
          Enables/disables browser status-line reporting of
          coordinates for the current location of the mouse cursor.
          Valid values are "on" and "off".  Default is "off".  Note
          that additional JavaScript functions are required in order
          for this to work.  See the section on <ulink
          url="#coords">Displaying Mouse Coordinates in the Status
          Bar</ulink>.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry><term>box</term>
      <listitem>
        <para>
          Enables/disables box drawing.  Valid values are "on" and
          "off".  Default is "on".  If set to "off", any mouse-button
          action inside the <application>mapplet</application>
          interface will always be represented by the crosshair
          cursor.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry><term>busyimage</term>
      <listitem>
        <para>
          Specifies an image to display while the
          <application>mapplet</application> is working.  Value given
          must be a fully-qualified URL.  Generally only useful when
          used with the <ulink url="#swap">swap</ulink> applet method.
        </para>
      </listitem>
    </varlistentry>
  </variablelist>

</sect1>

<sect1 id="methods">
<title>Mapplet Methods</title>
  <para>
    Under construction.
  </para>
</sect1>

<sect1 id="whereto">
<title>Where to from here?</title>
  <para>
    Under construction.
  </para>
</sect1>

</article>














































