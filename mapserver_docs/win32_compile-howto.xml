<?xml version="1.0" standalone="no"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://mapserver.gis.umn.edu/mdp/docbkx412/docbookx.dtd">
<article>
<articleinfo>
  <title>MapServer 4.4 Win32 Compilation and Installation HOWTO</title>
  <author>
     <firstname>Pericles S.</firstname>
     <surname>Nacionales</surname>
     <affiliation>
        <orgname>University of Minnesota</orgname>
        <orgdiv>Conservation Biology Program</orgdiv>
        <address>
            <email>pnaciona@gis.umn.edu</email>
        </address>
     </affiliation>
  </author>
<abstract><para>
This HOWTO provies a simple set of compilation procedures for 
MapServer on Win32 platforms.  This includes Windows 95/98/ME and Windows 
NT/2000/XP.  The objective of this document is to let Windows users/developers
create a customized MapServer CGI program tailored to their needs.  
Microsoft's Visual C++ 6.0 and Visual Studio .NET C++ compilers are the only 
compilers currently documented here.  Support for MapScript is purposefully 
omitted here as it adds complexity to the compilation process.
</para></abstract>

</articleinfo>

<sect1 id='intro'><title>Introduction</title>

<para>
If you've made it this far, chances are you already know about MapServer and 
are at least tempted to try compiling it for yourself. If you've never heard 
of MapServer before or what it does, then may I suggest going to its web site 
at <ulink url="http://mapserver.gis.umn.edu/">
http://mapserver.gis.umn.edu</ulink>.
</para>

<para>
Pre-compiled binaries for MapServer are available from a variety of 
sources.  Refer to <ulink url="http://mapserver.gis.umn.edu/win32binaries.html">http://mapserver.gis.umn.edu/win32binaries.html</ulink>.  Building MapServer
for win32 platforms can be a daunting task, so if existing binaries are
sufficient for your needs, it is strongly advised that they be used in
preference to trying to build everything from source.
</para>

<para>
However, there can be a variety of reasons to want to build MapServer from
source on win32.  Reasons include the need to enable specific options, to
build with alternate versions of support libraries (such as GDAL), the
desire for MapScript support not part of the core builds, the need to debug
and fix bugs or even to implement new features in MapServer.  To make it 
easy for users and developers, I've made a list of steps to compile 
MapServer. Background information is provided in each step, along with 
examples. Each example is a continuation of the previous one and in the end 
will produce the MapServer DLL (libmap.dll), the CGI program (the 
mapserv.exe), and utility programs.
</para>
</sect1>

<sect1 id='compile'><title>Compiling</title>

<para>If you are new to Windows programming, please follow this 
document carefully. The compilation steps are fairly simple but I've added a 
few blurbs in each step to help you understand how MapServer compiles. For 
the more experienced programmers, perhaps reading the README.Win32 
that accompanies the MapServer source code would be more useful.  For those 
who are antsy, compiling MapServer involves download and unpacking the source 
codes, editing the make files, and invoking Microsoft's Visual C++ compiler 
from the command prompt. The resulting mapserv.exe is the CGI program that 
installs in the cgi-bin directory of your web server.</para>

<para>For those who are willing to take the time, the compilation steps follow.</para>

<sect2 id='dir'><title>Set up a Project Directory</title>

<para>Before you start to compile MapServer, I recommend creating a directory 
called "projects" where you can put the source code for MapServer and its 
supporting libraries. Since you will be working with DOS-style commands, 
you might as well get used to the Windows command prompt. For Windows 95/98 
users the command processor would be called command.com. For Windows 
NT/2000/XP, it would be cmd.exe. So fire up the old command prompt and go to 
the drive where you want to create the project directory.</para>

<para>Here is an example of how to create a directory called projects on the C: drive:</para>
<command>C:\Users&gt;mkdir C:\Projects</command>
<para>To go to that directory:
<screen>
C:\Users&gt; cd \Projects
C:\Projects&gt;
</screen>

From the projects directory, you can extract the source codes for MapServer 
and its libraries. Now you're ready to download the source codes.</para>

</sect2>

<sect2 id='download'><title>Download MapServer Source Code and Supporting Libraries</title>

<para>After creating a project directory, download the MapServer source code 
and the codes for the supporting libraries and save the source code packages 
in the newly created "projects" directory. These source codes are usually 
packaged as ZIP, or as UNIX TAR and GZIP files.  You'll need a software that 
can unzip these packages. <ulink url="http://www.winzip.com/">WinZIP</ulink> 
is an example of software that can handle these files. 
Cygwin is a free, open-source software package which is a port of these tools 
on Windows. You can use the gzip and tar utilities from this tool collection.
Cygwin is available from 
<ulink url="http://www.cygwin.com/">http://www.cygwin.com</ulink>.</para>

<para>In order to compile the MapServer CGI program, you must download a few 
required and optional libraries. At its simplest configuration, MapServer 
only requires the GD (to provide the image output) and REGEX (to provide 
regular expression support) libraries. This configuration allows the 
developer/data provider to use shapefiles as input and, depending on the 
version of GD library used, GIF or PNG images as output.  Additional 
libraries are needed for input data in alternative formats. The libraries 
that work with MapServer are listed below.</para>

<sect3 id='source'><title>The MapServer source code</title>

<para>The MapServer source code can be downloaded from <ulink 
url="http://mapserver.gis.umn.edu/dload.html">
http://mapserver.gis.umn.edu/dload.html</ulink>.  
If you'd like to get the current development version of the software,
following the nightly snapshot link under the Interim Builds title. 
The absolute latest copy of the source code can be obtained from 
<ulink url="http://mapserver.gis.umn.edu/cvs.html">CVS</ulink>; however, the 
CVS respository does not contain several important source files (maplexer.c, 
mapparser.c and mapparser.h) normally generated on unix, so if possible, 
using a nightly snaphot is substantially easier than working directly from 
CVS.</para>
</sect3>

<variablelist>
<title>Required Libraries</title>

<varlistentry><term><application><ulink url="http://www.boutell.com/gd/">GD Library</ulink> :</application></term>
<listitem><para>MapServer uses the GD graphics library for rendering map 
images in GIF, PNG and JPEG format. These map images are displayed in web 
browser clients using the MapServer CGI. The current official version of GD 
is 2.0.33.  The distributed makefiles are setup to use the prebuilt GD Win32 DLL binaries which include GD, libjpeg, libpng, libz, libgif and FreeType 2 
all within one DLL.  This package is generally listed as "Windows DLL .zip"
and the latest version is normally available at
<ulink url="http://www.boutell.com/gd/http/gdwin32.zip">
http://www.boutell.com/gd/http/gdwin32.zip</ulink>.
</para>
</listitem></varlistentry>

<varlistentry><term><application>Regex:</application></term>
<listitem><para>Regex is the regular expression library used by MapServer. It can be downloaded at 
<ulink url="ftp://ftp.gnu.org/pub/gnu/regex/regex-0.12.tar.gz">ftp://ftp.gnu.org/pub/gnu/regex/regex-0.12.tar.gz</ulink>.</para>
</listitem>
</varlistentry>
</variablelist>


<variablelist>
<title>Optional Libraries</title>

<varlistentry><term><application><ulink url="http://www.ijg.org/">JPEG library</ulink>:</application></term>
<listitem><para>This library is required by GD to render JPEG images, if 
building GD from source.  You may download this library at 
<ulink url="http://www.ijg.org/files/jpegsrc.v6b.tar.gz">http://www.ijg.org/files/jpegsrc.v6b.tar.gz</ulink>.</para>
</listitem></varlistentry>

<varlistentry><term><application><ulink url="http://www.libpng.org/pub/png/">PNG library</ulink>:</application></term>
<listitem><para>This library is required by GD to render PNG images, if 
building GD from source.  You may download this library at 
<ulink url="http://sourceforge.net/projects/libpng/">http://sourceforge.net/projects/libpng/</ulink>.</para>
</listitem></varlistentry>

<varlistentry><term><application><ulink url="http://www.gzip.org/zlib/">Zlib</ulink>:</application></term>
<listitem><para>This library is required by libpng to provide graphics 
compression support.  It can be downloaded along with the PNG library, or at 
<ulink url="http://www.gzip.org/zlib.zip">http://www.gzip.org/zlib.zip</ulink>.
</para></listitem></varlistentry>

<varlistentry><term><application><ulink url="http://www.freetype.org/">FreeType 2</ulink>: </application></term>
<listitem><para>FreeType provides TrueType support in MapServer via GD.  We 
only need to build FreeType seperately if building GD from source.  It can be 
downloaded at 
<ulink url="ftp://freetype.sourceforge.net/pub/freetype/freetype2/">
ftp://freetype.sourceforge.net/pub/freetype/freetype2/</ulink>.  The most current version is 2.1.9.</para>
</listitem></varlistentry>

<varlistentry><term><application><ulink url="http://www.remotesensing.org/proj/">PROJ.4</ulink>: </application></term>
<listitem><para>Proj.4 provides on-the-fly projection support to MapServer. 
Users whose data are in different projection systems can use this library to 
reproject into a common projection.  It is also required for WMS, WFS or
WCS services.  The current version is 4.4.9 and 
can be downloaded at <ulink url="ftp://ftp.remotesensing.org/pub/proj/proj-4.4.9.zip">ftp://ftp.remotesensing.org/pub/proj/proj-4.4.9.zip</ulink>.</para>
</listitem></varlistentry>

<varlistentry><term><application><ulink url="http://www.gdal.org/gdal/">GDAL/OGR</ulink>: </application></term>
<listitem><para>The GDAL/OGR library allows MapServer to read a variety of 
geospatial raster formast (GDAL) and vector formats (OGR).  It can be 
downloaded at <ulink url="http://www.gdal.org/dl/">
http://www.gdal.org/dl/</ulink>.  The 1.2.5 version is known to work well
with MapServer 4.4.</para>
</listitem></varlistentry>

<varlistentry><term><application><ulink url="http://www.esri.com/software/sde/index.html">ArcSDE</ulink>: </application></term>
<listitem><para>ArcSDE is an ESRI proprietary spatial database engine.  Most
users will not have access to it but if you have ArcSDE license, you can use 
its libraries to give MapServer access to SDE databases.</para>
</listitem></varlistentry>

<varlistentry><term><application><ulink url="http://www.mnplan.state.mn.us/EPPL7/">EPPL7</ulink>:</application></term>
<listitem><para>This library allows MapServer to read EPPL7 datasets, as well as the older Erdas LAN/GIS files. This 
library is set as a default library in MapServer so there's no special source code to download.</para>
</listitem></varlistentry>
</variablelist>

<para>Now that you have reviewed the libraries that provide support to MapServer, it is time to decide which 
ones to compile and use.   We will work with the pre-built GD distributed
on Boutell.com with PNG, GIF, JPEG, and FreeType "built in".   If you want
to provide OGC Web Services (ie. WMS, WFS) or want to perform on the fly
reprojection then the PROJ.4 library will be needed.  If you need additional
raster and vector data sources consider including GDAL/OGR support.  GDAL
is also required for WCS service. </para>

<para>Our example calls for the required libraries and on-the-fly projection 
support so we need to download GD, regex, and Proj.4 libraries.  Go ahead and 
get those libraries.</para>

</sect2>

<sect2 id='options'><title>Set Compilation Options</title>

<para>MapServer, like many of it's support libraries, comes with a Visual C++
makefile called Makefile.vc.  It includes the file nmake.opt which contains
many of the site specific definitions.  We will only need to edit the nmake.opt
file to configure the build for our local site options, and support libraries.
The Makefile.vc, and nmake.opt template file have been provided by 
Assefa Yewondwossen, and the DM Solutions folks. 
</para>

<para>
As of MapServer 4.4, the default MapServer build options only include 
GD, and regex.  MapServer is built using the /MD option (which means 
MSVCRT.DLL should be used), so if any support libraries are being built 
statically (rather than as DLLs) we need to use /MD when building them as 
well.  By default modern PROJ.4 builds use /MD so we should be able to 
use the default PROJ.4 build without tweaking.
</para>

<para>The example will compile with the GDWin32 pre-built DLL as well as 
regex-0.12, and PROJ.4.   The PROJ.4 support will ensure we can enable 
MapServer OGC-WMS compatibility.  Use notepad or another text editor to open 
the nmake.opt file and make the following changes.</para>

<note><title>Comments</title><para> Use the pound sign ( # ) to comment out 
the lines that you want to disable, or remove the pound sign to enable
an option for NMAKE.</para>
</note>

<para>A. Enable PROJ.4 support, and update the path to the PROJ.4
directory.   Uncomment the PROJ= line, and the PROJ_DIR= line as follows,
and update the PROJ_DIR path to point to your PROJ build.
<programlisting>
# Reprojecting.
# If you would like mapserver to be able to reproject data from one
# geographic projection to another, uncomment the following flag
# Proj.4 distribution (cartographic projection routines).  PROJ.4 is
# also required for all OGC services (WMS, WFS, and WCS). 
#
# For PROJ_DIR use full path to Proj.4 distribution
PROJ=-DUSE_PROJ -DUSE_PROJ_API_H
PROJ_DIR=c:\projects\proj-4.4.9
</programlisting>
If you look down later in the file, you can see that once PROJ is enabled,
MapServer will be linked with proj_i.lib, the PROJ.4 stub library, meaning
that MapServer will be using the PROJ.DLL as opposed to statically linking
in PROJ.4. 
</para>

<para>B. Uncomment the WMS option.
<programlisting>
# Use this flag to compile with WMS Server support.
# To find out more about the OpenGIS Web Map Server Specification go to
# http://www.opengis.org/
WMS=-DUSE_WMS_SVR
</programlisting>
</para>

<para>C. Update to use GD.  Here's what it should look like in our example.
<programlisting>
GD_DIR=c:/projects/gdwin32
GD_LIB=$(GD_DIR)/bgd.lib
</programlisting>
</para>
<note><para>As distributed the GDWin32 binary build does not include the
bgd.lib stub library.  It is necessary to run the <command>makemsvcimport.bat
</command>
script in the gdwin32 directory first. 
</para>
</note>

<para>D. Make sure the regex path is set correctly.  In order for the 
"delete" command in the "nmake /f makefile.vc clean" target to work properly
it is necessary to use backslashes in the REGEX_DIR definition.
<programlisting>
# REGEX Libary
# 
# VC++ does not include the REGEX library... so we must provide our one.
# The following definitions will try to build GNU regex-0.12 located in the
# regex-0.12 sub-directory.
# If it was not included in the source distribution, then you can get it from:
#    ftp://ftp.gnu.org/pub/gnu/regex/regex-0.12.tar.gz
# Provide the full path to the REGEX project directory
# You do not need this library if you are compiling for PHP mapscript.
# In that case the PHP regex library will be used instead
!IFNDEF PHP
REGEX_DIR=c:\projects\regex-0.12
!ENDIF
</programlisting>
</para>

<para>Your Makefile is now set.</para>
</sect2>

<sect2 id='complib'><title>Compile the Libraries</title>
<para>Before compiling MapServer, you must first compile its supporting 
libraries.  How this is done varies for each library.  For the PROJ.4 library
a <command>nmake /f makefile.vc</command> command in the proj-4.4.9\src 
directory should be sufficient.  The regex-0.12 code is actually built by 
the MapServer build process, so you don't need to do anything there. </para>
</sect2>

<sect2 id='compmapserv'><title>Compile MapServer</title>
<para>Once you have compiled the supporting libraries successfully, you are 
ready to take the final compilation step.  If you have not already 
done so, open a command prompt and set the VC++ environment variables by 
running the vcvars32.bat usually located in 
<filename>C:\Program Files\Microsoft Visual Studio\VC98\bin\vcvars32.bat</filename>.
<screen>
C:\Users&gt;cd \projects\mapserver
C:\Projects\mapserver&gt;"C:\Program Files\Microsoft Visual Studio\VC98\Bin\vcvars32.bat"
C:\Projects\mapserver&gt;
Setting environment for using Microsoft Visual C++ tool.
C:\Projects\mapserver&gt;</screen>
</para>

<para>Now issue the command: <command>nmake /f Makefile.vc</command> and wait 
for it to finish compiling. If it compiles successfully, you should get 
mapserver.lib, libmap.dll, mapserv.exe, and other .EXE files.  That's it for 
the compilation process. If you run into problems, read section 4 about 
compiling errors. You can also ask for help from the helpful folks in the 
MapServer-dev e-mail list.</para>
</sect2>

<sect2 id='errors'><title>Common Compiling Errors</title>

<para>
Following are a few common errors you may encounter while trying to build
MapServer. 
</para>

<itemizedlist>

<listitem>
<para>
Visual C++ Tools Not Properly Initialized.

<screen>C:\projects\mapserver>nmake -f /makefile.vc
'nmake' is not recognized as an internal or external command,
operable program or batch file.
</screen>

This occurs if you have not properly defined the path and other 
environment variables required to use MS VisualC++ from the command shell.
Invoke the VCVARS32.BAT script, usually with the command
<command>C:\Program Files\Microsoft Visual Studio\VC98\bin\vcvars32.bat</command> or something similar if visual studio was installed in an alternate 
location.  To test if VC++ is available, just type "nmake" or "cl" in the
command shell and ensure it is found.
</para>
</listitem>

<listitem>
<para>
Regex Build Problems.

<screen>regex.obj : error LNK2001: unresolved external symbol _printchar
libmap.dll : fatal error LNK1120: 1 unresolved externals
NMAKE : fatal error U1077: 'link' : return code '0x460'
Stop.
</screen>

This occurs if you use the stock regex-0.12 we referenced.  I work around this
by commenting out the "extern" statement for the printchar() function, and
replacing it with a stub implementation in regex-0.12\regex.c.

<screen>//extern void printchar ();
void printchar( int i ) {}
</screen>
</para>
</listitem>

<listitem><para>
GD Import Library Missing.

<screen>LINK : fatal error LNK1104: cannot open file 'c:/projects/gdwin32/bgd.lib'
NMAKE : fatal error U1077: 'link' : return code '0x450'
Stop.
</screen>
If you are using the pre-built GD binaries, you still need to run the
<command>makemsvcimport.bat</command> script in the gdwin32 directory to
create a VC++ compatible stub library (bgd.lib).
</para>
</listitem>

</itemizedlist>
</sect2>

</sect1>

<sect1 id='install'><title>Installation</title>
<para>The file we are most interested in is mapserv.exe. The other executable files are the MapServer utility programs. 
Visit the MapServer utility page at <ulink url="http://mapserver.gis.umn.edu/utils.html">http://mapserver.gis.umn.edu/utils.html
</ulink> to learn more about these utilities.</para>

<para>To test that the CGI program is working, type mapserv.exe at the 
command prompt. You should see the following message:
<screen>
This script can only be used to decode form results and
should be initiated as a CGI process via a httpd server.</screen></para>

<para>
You may instead get a popup indicating that a DLL (such as bgd.dll) is 
missing.  You will need to copy all the required DLLs (ie. bgd.dll, and 
proj.dll) to the same directory as the mapserv.exe program.  
</para>

<para>Now type mapserv -v at the command prompt to get this message:
<screen>
MapServer version 4.4.0-beta3 OUTPUT=GIF OUTPUT=PNG OUTPUT=JPEG OUTPUT=WBMP 
SUPPORTS=PROJ SUPPORTS=FREETYPE SUPPORTS=WMS_SERVER INPUT=SHAPEFILE 
DEBUG=MSDEBUG
</screen></para>

<para>This tells us what data formats and other options are supported by 
mapserv.exe. Assuming you have your web server set up, copy 
mapserv.exe, libmap.dll, bgd.dll, proj.dll and any other required DLLs to the 
cgi-bin directory.</para>

<para>You are now ready to download the demo application and try out your own 
MapServer CGI program. If you wish, you can also create a directory to store 
the utility programs.  I'd suggest making a subdirectory called "bin" under 
the directory "projects" and copy the executables to that subdirectory. You 
might find these programs useful as you develop MapServer applications.
</para>

</sect1>

<sect1 id='other'><title>Other Helpful Information</title>

<para>The MapServer Unix Compilation and Installation 
HOWTO has good descriptions of some MapServer compilation options and library issues. I will write more about 
those options and issues on the next revision of this HOWTO.</para>

<para>The README documents of each of the supporting libraries provide compilation instructions for Windows.</para>

<para>The MapServer User community has a collective knowledge of the nuances of MapServer compilation. Seek their 
advice wisely.</para>
</sect1>

	<!-- Section1: Document Info -->
	<sect1 id="docinfo">
		<title>About This Document</title>
		<sect2 id="copyright">
			<title>Copyright Information</title>
			<para>
                Copyright (c) 2001, Pericles S. Nacionales, University of
		Minnesota
            </para>
			<para>
                This documentation is covered by the same Open Source license as the
                MapServer software itself.  See MapServer's 
                <ulink url="http://mapserver.gis.umn.edu/license.html">License and 
                Credits</ulink> page for the complete text.
            </para>
		</sect2>
		<sect2 id="disclaimer">
			<title>Disclaimer</title>
			<para>
     				No liability for the contents of this document can be accepted.
    				Use the concepts, examples and other content at your own risk.
    				As this is a new edition of this document, there may be errors
    				and inaccuracies that may be damaging to your system.
    				Although this is highly unlikely, the author(s) do not take any 
    				responsibility for that:  proceed with caution.
                 	</para>
		</sect2>
		<!-- Section2: acknowledgements -->
		<sect2 id="ack">
			<title>Acknowledgements</title>
                  <para>Thanks to Assefa Yewondwossen for providing the Makefile.vc. 
                   I would not have been able to write this HOWTO without that file. 
                  </para>

			<para>
                  Thanks to the Steve Lime for developing MapServer and to the many 
                  developers who contribute time and effort in order to keep the MapServer 
                  project successful.
   			</para>
		</sect2>
		<!-- Section2: feedback -->
		<sect2 id="feedback">
			<title>Feedback</title>
			<para>
    				Send any  comments or suggestions to the author.
   			</para>
		</sect2>

            
	</sect1>
</article>
