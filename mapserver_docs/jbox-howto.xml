<?xml version='1.0'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://mapserver.gis.umn.edu/mdp/docbkx412/docbookx.dtd">



<article>


<articleinfo>
  <title>jBox HOWTO</title>
  
  <author>
     <firstname>Richard</firstname>
     <surname>Greenwood</surname>
     <affiliation>
        <orgname>Greenwood Mapping, Inc.</orgname>
        <address>
          <email>rich@greenwoodmap.com</email>
        </address>
     </affiliation>
  </author>

  <abstract>
    <para>
      This document describes the procedures for obtaining,
      installing, and incorporating the <application>jBox</application> Java applet into
      MapServer web pages. 
    <application>jBox</application> is an updated version of mapplet in which method naming
	 conventions have been modified to cooridnate with corresponding DHTML libraries.
	 <application>jBox</application> also includes some functional enhancements over the older mapplet version.
  </para>

	<para>
		This HOWTO is based on the previous version written by Ken Boss <email>kenboss@dilbert.dnr.state.mn.us</email>
  </para>
  
	<para>Last Updated:  December 20, 2002</para>
  </abstract>


</articleinfo>


<sect1 id="intro">
  <title>Introduction</title>


  <para>
    The <application>jBox</application> Java applet provides
    interface enhancements to web pages driven by either the MapServer
    CGI or MapServer/MapScript. This document describes how to add 
    <application>jBox</application> to existing MapServer CGI pages. Users 
    working with PHP MapScript may find the <application>Rosa</application>
    Java applet more convienient. <ulink url="http://www2.dmsolutions.ca/mapserver/rosa/index.html">
    DM Solutions - Rosa Introduction.</ulink> <application>Rosa</application>
    provides functionality simular to <application>jBox</application> 
    but with an interface oriented more toward PHP scripted pages.
  </para>


  <para>
    This document assumes no previous knowledge or experience with
    Java programming or applet installation.  It does, however, assume
    the following:
  </para>


  <itemizedlist>
    <listitem>
      <para>
        Familiarity with fundamental aspects of managing the
        MapServer software and the web server.
      </para>
    </listitem>
    <listitem>
      <para>
        Basic familiarity with the JavaScript browser scripting language.  
        If this is a limitation, JavaScript reference materials can be found on the web
        (the <ulink url="http://devedge.netscape.com/docs/manuals/index.html?content=javascript.html">
        Netscape JavaScript documentation pages</ulink> are a good place to start).
      </para>
    </listitem>
    <listitem>
      <para>
        The ability to download and unpack (unzip) archive files
        (e.g., .tar or .zip files) from the internet.
      </para>
    </listitem>
    <listitem>
      <para>
        The MapServer software is installed and functioning on a web server.
      </para>
    </listitem>
    <listitem>
      <para>
        The MapServer demo application is running on your server (see
        both the download and documentation sections of the <ulink url="http://MapServer.gis.umn.edu">MapServer web-site</ulink>).
        If you don't have the demo running, but you do have your own
        MapServer application in place, you probably won't have any
        difficulty adapting the instructions given here to your
        application.
      </para>
    </listitem>


  </itemizedlist>


</sect1>


<sect1 id="features">
  <title><application>jBox</application> Features</title>


  <para>
    The <application>jBox</application> applet adds the following functionality to
    MapServer/MapScript pages:
  </para>


  <variablelist><title>Features</title>
    <varlistentry><term>Box zooming</term>
      <listitem>
        <para>Users can "drag a box" over a map using their mouse and
        then zoom in to the extent defined by the box.</para>
      </listitem>
    </varlistentry>
    <varlistentry><term>Box querying</term>
      <listitem>
        <para>Users can "drag a box" over a map using their mouse and
        execute attribute queries for all features that intersect the
        box.</para>
      </listitem>
    </varlistentry>
    <varlistentry><term>Map image swapping</term>
      <listitem>
        <para>Requests for new maps can be loaded directly into the
        currently displayed page, without reloading the rest of the
        page.</para>
      </listitem>
    </varlistentry>
    <varlistentry><term>Distance measuring</term>
      <listitem>
        <para>A series of distances can be measured by drawing a polyline
		  on the map. Individual segment distances and a cumulative total
		  distance are returned.</para>
      </listitem>
    </varlistentry>	 
    <varlistentry><term>Cursor coordinate display</term>
      <listitem>
        <para>The coordinates of the cursor location can be displayed.

              (see <ulink url="http://www.kralidis.ca/gis/mapserv/mapplet/howto.htm">
                   http://www.kralidis.ca/gis/mapserv/mapplet/howto.htm for details</ulink>)

        </para>
      </listitem>
    </varlistentry>
  </variablelist>


</sect1>


<sect1 id="obtain">
  <title>Obtaining the Software</title>


  <para>
     <application>jBox</application> can be obtained at 
    <ulink url="http://MapServer.gis.umn.edu/contributed.html">
    http://MapServer.gis.umn.edu/contributed.html</ulink>.
    Click on the <application>jBox</application> link and save the zip file to a local disk.
  </para>
</sect1>


<sect1 id="install">
  <title>Installing the Software</title>

  <sect2 id="unpack">
    <title>Unpacking the Archive</title>

    <para>
      The first step toward installation involves unpacking the
      archive file you just downloaded.  How you go about this will
      depend on your operating system.  If you run into problems
      unpacking the archive, contact your system administrator for
      help.
    </para>
  </sect2>

  <sect2 id="position">
    <title>Positioning the Class File</title>

    <para>
      Once you have successfully unpacked the archive, you will find
      three new files: <filename>jBox.class</filename>,
      <filename>jBox.java</filename>, and
      <filename>evalThread.class</filename>.  The two
      <filename>.class</filename> files constitute the Java byte code
      that you need in order to incorporate the applet into your
      pages.  The <filename>jBox.java</filename> file is the Java
      source code for the applet.  This file is included for the
      benefit of the curious, or for those who might want to modify
      the applet in some way, but it is not required for our purposes
      here.  Please note that if you do modify the code, you are
      encouraged to submit your modified source file to 
      <email>MapServer-info@lists.gis.umn.edu</email>.
    </para>

    <para>
      To make the applet available to your server, you need simply to
      place the class files somewhere in your web document tree.  For
      example, if your document tree is rooted at
    </para>


    <para>
      <filename class="directory">/usr/local/htdocs</filename>,
    </para>


    <para>
      then you might make add a couple of subdirectories under htdocs
      so that you get a path like
    </para>


    <para>
      <filename class="directory">/usr/local/htdocs/java/jBox.</filename>
    </para>


    <para>
      Then place the class files in the <application>jBox</application> subdirectory.
    </para>


    <tip>
      <para>
        Though not required, it is generally good practice to store the
        class files for different applets in separate subdirectories
        within your document tree.
      </para>
    </tip>


    <para>
      Note that the class files themselves and the directory in which
      you place them all need to be accessible and readable by the user
      that your web server runs as (often user "nobody").  Make sure
      that the file and directory permissions are properly set, and
      that the web server is properly configured for this.
    </para>


  </sect2>


</sect1>


<sect1 id="integrate">
  <title>Integrating the <application>jBox</application> applet with an existing MapServer application</title>


  <para>
    Now that the class files are in a web-accessible space, they can
    easily be integrated into a MapServer application.  We'll use the 
    MapServer 3.5 demo as an example. This example outlines only the minimual 
    steps required to integrate <application>jBox</application> into a 
    MapServer page. More sophisticated applications of <application>jBox</application>
    are discussed later in this document.
  </para>


  <para>
    The only changes will be to the html template
    file that defines how your map pages are displayed.  For the
    MapServer demo, this is the file <filename>demo.html</filename>.
    There are essentially four steps:
  </para>


  <itemizedlist>
    <listitem>
      <para>add a name attribute to the form that controls the map interface,</para>
    </listitem>
    <listitem>
      <para>add a hidden form variable to the form,</para>
    </listitem>
    <listitem>
      <para>add a couple of small JavaScript functions to the &lt;head&gt; section,</para>
    </listitem>
    <listitem>
      <para>replace the output map image definition with the applet definition.</para>
    </listitem>
  </itemizedlist>


  <para>
    Each of these steps is addressed separately below.
  </para>
  
  <sect2 id="nameform">
    <title>Add a name attribute to the html form</title>
 
    <para>
      The html form that controls the map interface in
      <filename>demo.html</filename> is defined by this line:
    </para>


    <programlisting>
      &lt;form method=GET action="[program]"&gt;
    </programlisting>


    <para>
      The addition of the name attribute enables us to
      refer to the form by name in JavaScript functions.  
      So change the line above to look like this:
    </para>


    <programlisting>
      &lt;form name="mapserv" method=GET action="[program]"&gt;
    </programlisting>
  </sect2>


  <sect2 id="addvars">
    <title>Add a hidden variable to the form</title>
 <!--
    <para>
      Next, we need to add two html form variables with default values.
      Before the form is submitted to MapServer these valuse will be replaced
      based on the user's mouse actions. Add the following lines just after 
      the form definition that we modified in the previous step:
    </para>


    <programlisting>
      &lt;input type="hidden" name="imgxy" value="299.5 299.5"&gt;
      &lt;input type="hidden" name="imgbox" value="-1 -1 -1 -1"&gt;
    </programlisting>


    <para>
      Note that the name attributes for these variables must be typed
      exactly as shown.  The <varname>imgxy</varname> variable is used to
      communicate the screen coordinates of a user's mouse click.  The
      <varname>imgbox</varname> variable is used to communicate a pair of screen
      coordinates that define the bounds of a box the user drags with their mouse. 
      The values for both variables are given in terms of image pixel coordinates.  
      These default values will be replaced with the coordinates of the user's mouse
      actions.
    </para>


    <para>
      In this step we have initialized the two variables
      and assigned default values to them. The default value for 
      <varname>imgxy</varname> is the center of the map image, which is set in 
      <filename>demo.map</filename> to 600x600 pixels. Screen pixels
      use a zero based numbering system with the upper left pixel being 0,0 and the 
      lower right pixel being 599,599 for a 600x600 pixel map. Alternately, you can use 
      MapServer's template substitution to assign the default value to imgxy using "[center]".
      For example:
    <programlisting>
      &lt;input type="hidden" name="imgxy" value="[center]"&gt;
    </programlisting>      
      The <varname>imgbox</varname> pixel coordinates are set to -1 all around, which
      translates essentially to "no box". 
    </para>
  </sect2>
-->

 
    <para>
      Next, we need to add an html form variable and initialize it with default values.
      This variable will hold a pair of screen
      coordinates that define the bounds of a box the user drags with their mouse. 
      Before the form is submitted to MapServer these coordinates will be replaced
      based on the user's mouse actions. Add the following line to the list of 
      hidden form variables near the bottom of the <filename>demo.html</filename> page:
    </para>

    <programlisting>
      &lt;input type="hidden" name="imgbox" value="-1 -1 -1 -1"&gt;
    </programlisting>

  </sect2>


  <sect2 id="addjs">
    <title>Add JavaScript functions</title>
 
    <para>
      Now we need to add two JavaScript functions to enable
      communication with the applet.  Put these in the &lt;head&gt;
      section of <filename>demo.html</filename>, which looks like this
      by default:
    </para>


    <programlisting>&lt;head&gt;&lt;title&gt;MapServer Demo Interface&lt;/title&gt;&lt;/head&gt;</programlisting>


    <para>
      Change that to look like this:
    </para>


    <programlisting>
	&lt;head&gt;
	&lt;title&gt;MapServer Demo Interface&lt;/title&gt;

	&lt;SCRIPT LANGUAGE="JavaScript"&gt;

	function setbox_handler(name, minx, miny, maxx, maxy, redraw) {
		document.mapserv.imgbox.value = minx + " " + miny + " " + maxx + " " + maxy;
		document.mapserv.imgxy.value = minx + " " + miny;
	}

	function seterror_handler(message) { 
		alert(message);
	}

	&lt;/SCRIPT&gt;

	&lt;/head&gt;
    </programlisting>


    <para>
      Note the use of "mapserv" on the left side of the assignment 
      statements in the <function>setbox_handler</function> function:
    </para>


    <programlisting>
      document.mapserv.imgbox.value = ...
      document.mapserv.imgxy.value = ...
    </programlisting>


    <para>
      This is the name attribute that we assigned to the form above.
      The <function>setbox_handler</function> function is called by 
      <application>jBox</application> and sets the values of
      the hidden variable, and the
      <function>seterror_handler</function> function provides a means for
      the applet to pass error messages out to the user.
      However, you don't even really need to understand
      the functions, as you will never call them yourself - that is up
      to the applet.  
    </para>
  </sect2>


  <sect2 id="replacedef">
    <title>Replace output map image definition</title>
 
      <para>
        Finally, we need to replace the output map image definition
        with the applet definition.  Find the following html snippet
        in <filename>demo.html</filename> (it may be strung out all on
        one line):
      </para>
    
      <programlisting>
        &lt;tr&gt;
          &lt;td colspan="2"&gt;
            &lt;INPUT NAME="img" TYPE="image" SRC="[img]" width=600 height=600 border=0&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
      </programlisting>
    
      <para>
        This is the definition of an html table cell that contains the
        output map image generated by MapServer.  We need to replace
        this with the applet definition.  Change the above block so
        that it looks like this instead:
      </para>
    
      <programlisting>
        &lt;tr&gt;
          &lt;td colspan="2"&gt;
            &lt;applet codebase="/java/jBox" code="jBox.class" width="600"
               height="600" name="jBox" MAYSCRIPT&gt;
              &lt;param name="image" value="http://[host][img]"&gt;
            &lt;/applet&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
      </programlisting>
  
      <para>
        Let's pick this applet definition apart a bit.
      </para>
  
      <sect3>
        <title>A Closer Look</title>


        <variablelist><title>The &lt;applet&gt; tag</title>


          <varlistentry><term>codebase</term>
            <listitem>
              <para>
                Specifies the path, relative to the html document
                root, to the directory containing the needed class file(s).  If
                you put your class files in a directory structure other than
                <filename class="directory">/java/jBox</filename>, you will
                need to change the codebase attribute accordingly.
                  <note><para>
                    You can also use a url for the codebase attribute,
                    so that the class files could actually be located just about
                    anywhere on the internet.
                  </para></note>
              </para>
            </listitem>
          </varlistentry>
          <varlistentry><term>code</term>
            <listitem>
              <para>
                Specifies the name of the class file that is to be executed.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry><term>width</term>
            <listitem>
              <para>
                Defines the width and height (in pixels) of the space to be allocated to
                the applet on the html page.  This value should be the same as
                the width and height of your output map image, which is set to 600x600 in
                <filename>demo.map</filename>. Alternately, you can use MapServer's template
                substitution and define the width and height as:
               </para>
               <programlisting>
						width=[mapwidth] height=[mapheight]
                </programlisting>
            </listitem>
            
          </varlistentry>
          
          <varlistentry><term>name</term>
            <listitem>
              <para>
                Assigns a name to the applet for use within the html page.  This
                is handy for use in referring to the applet within javaScript code.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry><term>MAYSCRIPT</term>
            <listitem>
              <para>
                Permits the Java applet to access JavaScript functions
                (required for the <application>jBox</application>).  Accessing JavaScript
                when the MAYSCRIPT attribute is not specified results
                in an exception.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>
          Parameters to be passed to the applet are specified in
          &lt;param&gt; tags embedded between the opening and
          closing &lt;applet&gt; tags.  Here we have defined only one:
        </para>


        <variablelist><title>Applet parameters</title>
          <varlistentry><term>image</term>
            <listitem>
              <para>
                Specifies the map image to be loaded into the applet.  Must be a
                fully-qualified URL.  The "[host]" and "[img]" specifiers used here are
                standard MapServer template substitutions, and will be swapped
                out for the appropriate values when the MapServer parses
                <filename>demo.html</filename>.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
          
      </sect3>


  </sect2>
</sect1>


<sect1 id="firstrun">
  <title>A First Run</title>


  <para>
    When you have made the changes to
    <filename>demo.html</filename> detailed in the previous section,
    you will be able to load the modified version into your
    browser.  Load the front page and hit the
    <guilabel>Initialize</guilabel> button.  You can now specify
    a zoom extent by dragging a box over the map.  You'll need to have
    the <guilabel>Browse map</guilabel> button on, and hit the
    <guilabel>Refresh/Query</guilabel> button in order to make the box
    zoom take effect.
  </para>
  
  <para>
    What's more, if you turn on the <guilabel>Query multiple
    features</guilabel> button, drag a box, and hit the
    <guilabel>Query/Refresh</guilabel> button, you'll get back results
    for all of the features that intersect the bounds of your box.
  </para>


  <para>
    However, if you turn on the <guilabel>Query feature</guilabel>
    button and try to get information on some feature, you'll probably
    notice a couple of things:
  </para>


  <itemizedlist>
    <listitem>
      <para>
        You don't get "instant results" when you click on a feature in
        the map like you used to.  A small crosshair appears at the
        point of your mouse click, but that's about it.  You have to
        make the effort of going over and clicking on the
        <guilabel>Refresh/Query</guilabel> button before you actually
        get results back.
      </para>
    </listitem>
    <listitem>
      <para>
        If you try dragging a box and then hit the
        <guilabel>Refresh/Query</guilabel> button, you get a different
        error message:


        <errorname>mapserv(): Web application error. Query mode needs a point, imgxy and mapxy are not set.</errorname>
      </para>
    </listitem>
  </itemizedlist>


  <para>
    Is this the experience you want for your users?  Likely not.  The
    next section will explain how to circumvent these problems with a
    bit of JavaScript code.
  </para>


</sect1>


<sect1 id="finetune">
<title>Fine-tuning with JavaScript</title>


  <sect2 id="auto_submit">
  <title>Automating Form Submission</title>


    <para>
      Rather than requiring the user to hit the Refresh/Query button,
      you can add a couple of lines to the end of the setbox_handler()
      function to submit the form. For example:
    </para>
  
    <programlisting>
      if (redraw) {
        document.mapserv.submit();
      }
    </programlisting>


    <para>
      This checks the redraw flag which was passed to setbox_handler()
      and submits the form named "mapserv" if the redraw flag is set. 
    </para>
  </sect2>


  <sect2 id="box_on_off">
  <title>Turning Box Dragging On and Off</title>


    <para>
      It is logical to drag a box across a part of the map to zoom in,
      or to select objects to query. But what about zooming out
      (mode=browse, zoomdir=-1), or re-centering the map (mode=browse,
      zoomdir=0)?  In these 
      operations the box doesn't do us much good. Worse yet, dragging
      a box in either of these situations would cause a zoom-in
      regardless  of the zoomdir setting.
    </para>


    <para>
      Rather than expecting the user to choose between dragging or
      clicking dependent on context, you may wish to use the jBox boxon() and
      boxoff() methods to control when box dragging is enabled and when it
      is not. As in the prior example, we will assume that the name of the 
      applet was declared as "jBox", then the basic JavaScript syntax for 
      calling the methods is:
    </para>


    <programlisting>
      document.jBox.boxoff();
    </programlisting>


    <para>
      In the MapServer demo, you might place the code in an event
      handler in a form control.  For example:
    </para>


    <programlisting>
      &lt;input type=radio
                name=zoomdir
                value=0
                onClick="document.jBox.boxoff();"
                [zoomdir_0_check] &gt;
    </programlisting>


    <para>
      In the above example, when the user switches to the pan mode
      (zoomdir=0), box dragging is turned off. Obviously you would need to
      add additional calls in other form controls to turn box dragging on
      and off as is appropriate to the operation.
    </para>


  </sect2>    
</sect1>


<sect1 id="parameters">
<title>Optional <application>jBox</application> Parameters</title>


  <para>
    So far we have passed one parameter to the
    <application>jBox</application>, as seen in the following line
    from <filename>demo.html</filename>:
  </para>


  <programlisting>
    &lt;param name="image" value="http://[host][img]"&gt;
  </programlisting>


  <para>
    The "image" parameter must be specified in order for the
    <application>jBox</application> to function.  There are several
    optional parameters that can be passed as a means of customizing
    your <application>jBox</application> appearance and
    functionality.  The syntax for specifying these parameters in
    <filename>demo.html</filename> is the same as shown above. A
    tag with the general form
  </para>


  <programlisting>
    &lt;param name="somename" value="somevalue"&gt;
  </programlisting>


  <para>
    must appear between the opening and closing applet tags.  
    A list of the optional jBox parameters, their purpose 
    and valid values is given below.
  </para>


  <variablelist><title>Optional parameters</title>
    <varlistentry><term>jitter</term>
      <listitem>
        <para>
          Specifies how far (in pixels) a user needs to drag their
          mouse before <application>jBox</application> will
          believe that they are actually dragging a box.  This
          prevents poorly-executed single-clicks at the mouse from
          being interpreted as dragged boxes.  Values should be
          integers.  Default is five.
       </para>
      </listitem>
    </varlistentry>
    <varlistentry><term>color</term>
      <listitem>
        <para>
          Specifies the color to use when drawing the mouse-dragged
          box or the mouse-clicked crosshair cursor.  Color values may
          be specified using either a comma-delimited RGB triplet (for
          example, value="255,255,255" draws a white box), or the
          English name for one of thirteen predefined colors (black,
          blue, cyan, darkGray, gray, green, lightGray, magenta,
          orange, pink, red, white or yellow).  Default is red.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry><term>thickness</term>
      <listitem>
        <para>
          Specifies the thickness (in pixels) of the line to use in
          drawing the box (does not affect the crosshair cursor or the
          measure polyline ). Values should be integers.  Default is one.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry><term>cursorsize</term>
      <listitem>
        <para>
          Specifies the radius (in pixels) of the crosshair cursor.
          Values should be integers.  Default is four.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry><term>verbose</term>
      <listitem>
      
        <para>
          Enables/disables cursor location reporting. 
          Valid values are "true" or "false". (Mapplet used "on" and "off")
          Default is "false".  Note that in order to use this feature, 
          three additional JavaScript functions must be defined:

          	<variablelist>
				 <varlistentry><term>mouseenter_handler(name)</term>
				 	<listitem>
				 	  <para>
				 		Called when mouse enters applet image area.
				 	  </para>
				 	</listitem>
				 </varlistentry> 
				 <varlistentry><term>mouseexit_handler(name)</term>
				 	<listitem>
				 	  <para>
				 		Called when mouse leaves applet image area.
				 	  </para>				 		
				 	</listitem>
				 </varlistentry> 
				 <varlistentry><term>mousemove_handler(name, x, y)</term>
				 	<listitem>
				 	  <para>
				 		Called when mouse moves within applet image area and provides 
				 		cursor coordinates in screen pixels. Typically you put code in 
				 		this function to convert the pixel coordinates to real-world coordinates 
				 		and then display the coordinates in the brower's status line.
				 	  </para>				 		
				 	</listitem>
				 </varlistentry> 
				</variablelist>
        </para>   
      </listitem>
    </varlistentry>
    <varlistentry><term>box</term>
      <listitem>
        <para>
          Initial box drawing status.  Valid values are "on" or "off".  
          Default is "on".  If set to "off", any mouse-button
          action inside the <application>jBox</application> applet
          interface will always be represented by the crosshair cursor.
          The public methods boxon() and boxoff() are used to turn box 
          drawing on and off once the applet has been initalixed.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry><term>busyimage</term>
      <listitem>
        <para>
          Specifies an image to display while the
          <application>jBox</application> is working.  Value given
          must be a fully-qualified URL.  Generally only useful when
          used with the <ulink url="#swap">setimage</ulink> applet method.
        </para>
      </listitem>
    </varlistentry>
  </variablelist>


</sect1>

<sect1 id="methods">
<title>Public Methods</title>

<variablelist>
	<!--<title>Optional parameters</title>-->

    <varlistentry><term>boxon()</term>
      <listitem>
        <para>toggles box drawing on.
        </para>
      </listitem>
    </varlistentry>
    
    <varlistentry><term>boxoff()</term>
      <listitem>
        <para>toggles box (and line) drawing off.
        </para>
      </listitem>
    </varlistentry>

	<varlistentry><term>lineon()</term>
      <listitem>
        <para>toggles line drawing on, and box drawing off.
        </para>
      </listitem>
    </varlistentry>
    
    <varlistentry><term>lineoff()</term>
      <listitem>
        <para>synonym for <function>boxoff()</function>, turns both line and box drawing off.
        </para>
      </listitem>
    </varlistentry>
    
    <varlistentry><term>setimage(string)</term>
      <listitem>
        <para>displays the image loaded from the passed url.
        </para>
      </listitem>
    </varlistentry>
    
    <varlistentry><term>setcursor(string)</term>
      <listitem>
        <para>sets the cursor to one of crosshair, hand or default
        </para>
      </listitem>
    </varlistentry>
  </variablelist>

</sect1>



<sect1 id="jscript_func">
<title>JavaScript Functions</title>
	<para>
	  jBox uses <ulink url="http://wp.netscape.com/eng/mozilla/3.0/handbook/plugins/"> LiveConnect</ulink>
	  to communicte between the jBox Java applet and JavaScript functions in the HTML page. When jBox needs
	  to communicate back to the HTML page, it calls a JavaScript function. The following is a list 
	  of JavaScript functions that may be called be jBox.
	</para>
	
  <variablelist>
	<title>JavaScript Functions</title>

    <varlistentry><term>setbox_handler(name, minx, miny, maxx, maxy, redraw)</term>
      <listitem>
        <para>
        	This function receives the user's mouse coordinates from jBox and does appropriate
        	processing of the coordinates: either copies them into form variables in preparation 
        	for a form-submit, or processes them prior to a setimage() call.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry><term>seterror_handler(message)</term>
      <listitem>
        <para>
			This provides a method for jBox to pass error messages back to the containing page. 
			Below is a typical example:
        </para>
      <programlisting>
function seterror_handler(message) { 
	alert(message); 
}
      </programlisting>
      </listitem>
    </varlistentry>
    
    <varlistentry><term>reset_handler(name, minx, miny, maxx, maxy)</term>
      <listitem>
        <para>
          reset_handler(name, minx, miny, maxx, maxy);
        </para>
      </listitem>
    </varlistentry>
    
    <varlistentry><term>mouseenter_handler(name)</term>
      <listitem>
        <para>
        	 Called when mouse enters applet image area.
        </para>
      </listitem>
    </varlistentry>
    
    <varlistentry><term>mouseexit_handler(name)</term>
      <listitem>
        <para> Called when mouse leaves applet image area.
        </para>
      </listitem>
    </varlistentry>
    
    <varlistentry><term>mousemove_handler(name, x, y)</term>
      <listitem>
        <para>
        	 jBox uses this function to pass cursor coordinates back to the HTM page. The function 
        	 will typically convert the pixel coordinates to real-world coordinates and display them
        	 in the browser.
        </para>
      </listitem>
    </varlistentry>
    
    <varlistentry><term>measure_handler(name, s, t, n)</term>
      <listitem>
        <para>
        	 jBox uses this function to pass distance measurements back to the HTM page. The function 
        	 will typically convert the pixel distances to real-world coordinates and dispaly them 
        	 in the browser.
        </para>
      </listitem>
    </varlistentry>
    
  </variablelist>

</sect1>


<sect1 id="adv_features">
<title>Advanced Features</title>

  <sect2>
  	 <title>Image Swapping</title>
  	 	<para>
  	 		The <function>setimage()</function> method allows the jBox applet's image to be replaced without 
  	 		reloading the whole page. The only parameter to setimage() is the URL of the 
  	 		new image to be displayed. In a typical CGI MapServer application this image 
  	 		is created by mapserv in "map" mode. An example JavaScript code snippet follows:
  	 	</para>
  	 	
      <programlisting>	 
	var url;
	url = &quot;http://www.somedomain.com/cgi-bin/mapserv&quot;+
		&quot;?mode=map&quot; +
		&quot;&amp;map=&quot; + mapfile +
		&quot;&amp;mapext=&quot; + extent.join(&quot;+&quot;) +
		&quot;&amp;mapsize=&quot; + width + &quot;+&quot; + height +
		&quot;&amp;layers=&quot; + layerlist;
	document.jBox.setimage(url);
		</programlisting>	 

  	 	<para>
	 		There are obvious benefits in displaying a new image without reloading the 
	 		whole page, however there are a couple trade off's to consider: 
  	 	</para>	 
		<itemizedlist>
			 <listitem>
				<para>
				   Since MapServer is no longer creating a whole new page from the template 
				   file, your JavaScript will have to take care of updating all of the 
				   other page elements that may have changed such as the reference map, 
				   scale bar, legend, map extent, etc.
  	 			</para>
			 </listitem>

			 <listitem>
				<para>
	 				The browser's location no longer represents the current map. This means 
	 				that the browser's back button will not take the user back to the previous map. 
	 				Nor can the location be bookmarked or e-mailed.
  	 			</para>
			 </listitem>
		</itemizedlist>

  </sect2>
  
  <sect2>
    <title>Distance Measuring</title>
    	<para>
    	  The distance measuring functionality is designed to mimic the "Measure" and "Ruler" tools 
    	  found in ArcView and MapInfo, respectively. Distance measuring mode is initiated with a call 
    	  to <function>lineon()</function> and terminated with a call to <function>lineoff()</function> 
    	  or <function>boxoff()</function> or <function>boxon()</function>. In distance 
    	  measuring mode jBox draws a polyline connecting the user's mouse clicks and returns a segment 
    	  distance and total distance to a JavaScript function named "<function>measure_handler()</function>".
    	  Double-clicking resets the tool.
	 	</para>
	 	<para>
		  The JavaScript <function>measure_handler()</function> function must be declared before entering distance measuring mode. 
		  The function needs to convert the pixel distance values returned by jBox into real-world values 
		  and display them somewhere in the browser. A simple <function>measure_handler()</function> example is show below. 
		  See <ulink url="http://www2.tetonwyo.org/mapserver">http://www2.tetonwyo.org/mapserver</ulink> 
		  for a slightly more sophisticated example.
	 	</para>
		<programlisting>
	function measure_handler(name, s, t, n) {
		// c = 1 / 72dpi / 12inches_per_foot * 1.0003state_plane_scale_factor
		var c = 0.0011577546296296;	// constant
		var f = [scale] * c;		// scale factor
		if ((s&gt;0) || (t&gt;0)) {
			defaultStatus = "This segment = " + s*f + &quot;, Total = &quot; + t*f + &quot;, Number of vertices = &quot; + n ;
		}
	}
		</programlisting>	 	
	 	
  </sect2>
  
  <sect2>
    <title>Cursor Coordinate Display</title>
    	<para>
			See <ulink url="http://www.kralidis.ca/gis/mapserv/mapplet/howto.htm">
			http://www.kralidis.ca/gis/mapserv/mapplet/howto.htm</ulink> for details.
		</para>
  </sect2>
  
</sect1>


<sect1 id="acknowledgments">
<title>Acknowledgments</title>

<para>
	Most of jBox was written by Steve Lime. 
</para>

<para>
	Tom Kralidis <email>tomkralidis@hotmail.com</email> contributed the coordinate display functions. 
</para>

<para>
	Rich Greenwood <email>rich@greenwoodmap.com</email> added the distance measuring / line drawing code.
</para>

<para>
	Ken Boss <email>kenboss@dilbert.dnr.state.mn.us</email> wrote the original version of this HOWTO.
</para>

<para>
	If there are other contributors that I have not acknowledged here, please 
	contact me at <email>rich@greenwoodmap.com</email>.
</para>

</sect1>


</article>
