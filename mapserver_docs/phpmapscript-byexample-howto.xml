<?xml version='1.0' standalone='no'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"http://mapserver.gis.umn.edu/mdp/docbkx412/docbookx.dtd">
<article>
   <articleinfo>
      <title>PHP Mapscript 4.0 By Example HOWTO</title>
      <author>
         <firstname>Vinko</firstname>
         <surname>Vrsalovic</surname>
         <affiliation>
            <address>
               <email>v at w dot cl</email>
            </address>
         </affiliation>
      </author>

      <abstract>
		<para>This HOWTO aims to explain how MapScript works, through step by step explanations of (yet) basic working examples on PHP.   </para>
         <para>In its final form it's going to be a complete step by step explanation of the <ulink url="http://www2.dmsolutions.ca/webtools/php_mapscript/php_mapscript_docs40.html">DM Solutions PHP Mapscript 4.0</ulink> classes and their methods with practical examples 
         for each of them.</para><para>
          <emphasis>It is assumed a basic knowledge of <ulink url="http://mapserver.gis.umn.edu/doc/mapfile-reference.html">map files</ulink> 
          and <ulink url="http://hypnos.cbs.umn.edu/projects/tutorial/">MapServer</ulink>
          and familiarity with the <ulink url="http://www.php.net">PHP</ulink> (scripting) and <ulink url="http://www.w3.org/MarkUp/">HTML</ulink> (markup) languages .</emphasis></para>
         <para>Information given here refers to PHP MapScript version 4.0. </para>
         <para>Last update on 20042701</para>
      </abstract>
   </articleinfo>

   <sect1 id='intro'>
      <title>Introduction</title>

	<para>Hello, kind reader. I am Tut, thank you for downloading me. I am sorry, but I am just a technical manual so I cannot answer any questions.  
	The maintainer, a handsome, very nice and lazy guy according to what I saw from the other side of the screen, maybe will be able to answer your question(s). 
	I am currently here to tell you about MapScript in its PHP encarnation. At my current age, I will be more useful to beginners than advanced users, 
	even though I hope that some day I will be sufficiently old to be useful to advanced MapScript programmers.</para>
	<para>Let's hope I live long enough... sigh. </para>
	<para>But enough with my personal problems, let myself begin. My duty is to familiarize you with MapScript, and in particular with PHP MapScript. When I end, you 
	are expected to understand what MapScript is, and to be able to write applications to display and navigate that is, zooming and panning over shapefiles 
	via a web browser.
	</para>
      <para>What follows are the questions you must answer affirmatively before accompanying me through the rest of this journey (I apologize for my 
      maintainer's lack of literary taste).</para>

	  <sect2 id='instsw'>
	  	<title>Do you have running somewhere...</title>

      <itemizedlist>
         <listitem>
            <para>... a web server capable of running PHP as a CGI (Apache will do)?</para>
         </listitem>
         <listitem>
            <para>... the PHP language configured as a CGI, version 4.1.2 or higher? I recommend 4.3 onwards.</para>
         </listitem>
         <listitem>
            <para>... PHP MapScript, version 4.0 or later? <ulink url="http://mapserver.gis.umn.edu/doc40/phpmapscript-install-howto.html">[Install]</ulink></para>
         </listitem>
      </itemizedlist>
      </sect2>

      <sect2 id='reqkno'>
	  	<title>Can you ...</title>

      <itemizedlist>
         <listitem>
            <para>... code PHP or are willing to <ulink url="http://php.net/tut.php">learn</ulink> how to?</para>
         </listitem>
         <listitem>
            <para>... write and understand <ulink url="http://www.w3.org/MarkUp/">HTML</ulink> documents? (Note that Javascript is a plus)</para>
         </listitem>
		 <listitem>
            <para>... tell somebody what on earth is a <ulink url="http://shapelib.maptools.org/">shapefile</ulink> [or a <ulink url="http://postgis.refractions.net">PostGIS</ulink> table]?</para>
         </listitem>
      </itemizedlist>

      </sect2>
	
	<para>
	My constitutive parts are, in order of exposition:
	
	<itemizedlist>
		<listitem>
			<para>A general overview of MapScript, in a language independent way</para>
		</listitem>
		<listitem>
			<para>A trivial example</para>
		</listitem>
		<listitem>
			<para>A simple example</para>
		</listitem>
		<listitem>
			<para>Conclusion</para>
		</listitem>

	</itemizedlist>
	 You can also go to each part directly through my table of contents located at the top of myself, if you wish to skip some sections.
	</para>
</sect1>
	
<sect1 id="overview">
	<title>MapScript overview</title>
	 <para>Ok, now I'm at last arriving at a point I will enjoy. This overview intends to clear some common misconceptions beginners encounter when first facing 
	 MapScript and to give a general overview about MapScript's internals. For now, just look at the following diagram 
	(I apologize again for the maintainer's lack of graphic design taste).</para>
	
	<graphic fileref="http://www.vinko.cl/mapserver.png"></graphic>

	<para>It all starts as everything on the Web. A browser requests a certain URL through HTTP. The request arrives at the web server, which, in turn, 
	delivers a file or executes a program and then delivers its output back to the browser. Yes, I know you knew that, but I have been told to 
	be as complete as possible, and I will try to.
	</para>
	<para>In MapScript's case, the server executes a certain script, which contains standard language functionality, that is, the same functionality you would have
	in that language without MapScript, plus access to almost all of the MapServer C API, the level of completeness of MapServer API support varies a bit with 
	the language you choose, but I think it is my duty to tell you almost every available flavor of MapScript is usable. This 
	<ulink url="http://mapserver.gis.umn.edu/doc40/phpmapscript-class-guide.html">API</ulink>, exposed now in your scripting language through the MapScript module, 
	allows you to do many GIS-like operations on spatial data, including read-write access to shapefiles, reprojection of data, and many others. 
	For more information on the API, click over the link above. For other flavors, you can check their own documentation, you will see there is not much difference.</para>
	<para>The CGI version of MapServer is not required to run MapScript applications, just as you don't need a particular MapScript module to run the CGI. The CGI 
	version has many features out-of-the-box, MapScript is just an API, so with MapScript you must start from scratch or with some of the examples available. Think of the 
	CGI as of a MapScript application written directly in C, with direct access to the MapServer C API. Sometimes the out-of-the-box functionality has some limits 
	which can be surpassed by MapScript, but not embedded within the CGI. In other words, the CGI is not scriptable, but you can program all the CGI and more with MapScript. This 
	may seem a strange thing to clarify, but is a common misconception, just check the list <ulink url="http://lists.gis.umn.edu/mailman/listinfo/mapserver-users">
	archives</ulink> if you are not inclined to believe me.</para>
	<para>As with MapServer itself, MapScript can be configured using only map files, but, unlike the CGI, also includes the possibility of dynamically 
	create maps or modify existing ones and to (and here is the key to the flexibility that MapScript has) mix this information with other sources of non GIS
	data, such as user input, non spatial and spatial databases, text files, etc. and that you can use every single module your language provides. The power of this approach 
	is tremendous, and the most restrictive limit is your imagination. As always, flexibility comes with a price, performance. It's generally slower to use a scripting 
	language instead of C, but nowadays this shouldn't be a big worry. And you can still program directly in C (there are not much documents about how to do it, though  
	you might want to check the <ulink url="http://lists.gis.umn.edu/mailman/listinfo/mapserver-dev">mapserver-dev</ulink> list ) if you would like to.</para>
	<para>The input and output formats MapScript can handle are exactly the same as the ones configured when you build MapServer/MapScript. 
	But one of the most important things to remember is that, basically, you feed geographic data and relevant user input (for instance clicks over the map image) 
	to MapScript and as a result get one or more file(s), typically standard image files such as a PNG or JPEG. So you can apply anything you've seen in any server side 
	scripted web application, DHTML, Java applets, CSS, HTML templates, sessions, you name it.</para>
 
</sect1>

	<sect1 id="begin">
		<title>Our first application</title>
		
		<para>In this first example, I will tell you how to display a shapefile on a web page using a map file.</para>
		<sect2 id="begmap">

		<title>The Map File</title>

		<para> Here's the map file: </para>

		<programlisting>
		NAME "Europe in purple"
		SIZE 400 400
		STATUS ON
		SYMBOLSET "/var/www/html/maps/symbols/symbols.sym"
		EXTENT -5696501 1923039 5696501 11022882
		UNITS METERS
		SHAPEPATH "/var/www/html/maps/data"
			
		WEB
			IMAGEPATH "/var/www/html/maps/tmp/"
			IMAGEURL "/tmp/"
		END
		
		LAYER
			NAME "Europe"
			TYPE POLYGON
			STATUS ON
			DATA "europe"
			CLASS
				STYLE
					COLOR 110 50 100
					OUTLINECOLOR 200 200 200
					SYMBOL 0
				END
			END
		END
		
		END
		</programlisting>

		<para> Here I have shown a map with a single layer, where the <filename>europe.shp</filename>, 
		<filename>europe.shx</filename> and <filename>europe.dbf</filename> files must be located in the subdirectory
		called <filename>data</filename>. The symbols are located in the <filename>symbols</filename> subdirectory. All this locations are 
		relative from the place the map file is, but better safe than sorry, I guess. The web section is used to define where will the 
		images be saved and in what URL will they be available.</para>
		</sect2>

		<sect2 id="begphp">
		<title>Displaying the map with MapScript</title>		
		<para> To display a map the following MapScript objects and methods will be used:</para>
		<itemizedlist>
			<listitem>
				<para>MapObj object</para>
			</listitem>
			<listitem>
				<para>imageObj object</para>
			</listitem>
		</itemizedlist>

		<para>MapObj methods:</para>

		<itemizedlist>
			<listitem>
				<para>The constructor method: MapObj ms_newMapObj(string map_file_name[,string new_map_path])</para>
			</listitem>
			<listitem>
				<para>The draw method: imageObj draw()</para>
			</listitem>
		</itemizedlist>

		<para>imageObj methods:</para>

		<itemizedlist>
			<listitem>
				<para>The saveWebImage method: string saveWebImage()</para>
			</listitem>
		</itemizedlist>

		<para> The code looks like this: </para>
		<programlisting>
		1 &lt;?php
		
		2 dl('php_mapscript.so'); 
		
		3 $map_path="/var/www/html/ms/map_files/";
				
		4 $map = ms_newMapObj($map_path."europe.map");
		5 $image=$map->draw();
		6 $image_url=$image->saveWebImage();
		
		7 ?&gt;
		
		8  &lt;HTML&gt;
		9  	&lt;HEAD&gt;
		10 		&lt;TITLE&gt;Example 1: Displaying a map&lt;/TITLE&gt;
		11 	&lt;/HEAD&gt;
		12 	&lt;BODY&gt;
		13 		&lt;IMG SRC=&lt;?php echo $image_url; ?&gt; &gt;
		14 	&lt;/BODY&gt;
		15 &lt;/HTML&gt;
		</programlisting>

		<para>The code I will present through the rest of this document will follow the following rule</para>

		<itemizedlist>
			<listitem>
				<para>Every non empty line is numbered</para>
			</listitem>
		</itemizedlist>

		<para> This code will render an image corresponding to the shapefile <filename>europe</filename> and display it on a HTML page.</para>
		<para> Here goes the explanation. </para>

		<itemizedlist>
			<listitem>
				<para>In line 2 it is loaded the MapScript extension (you may not need it if your php.ini file is configured to automatically load it).</para>
			</listitem>
			<listitem>
				<para>Line 3 declares a variable that holds the absolute path for the mapfile.</para>
			</listitem>
			<listitem>
				<para>Line 4 creates an instance of the MapObj object using the constructor. As you can see, the constructor receives the location of the 
				map file as its only required parameter, as you can see, the map file received the <filename>europe.map</filename> name.</para>
			</listitem>
			<listitem>
				<para>Afterwards the draw method of the map object is called to render the image defined by the map file (line 5). The result (an imageObj) is saved in the $image variable.</para>
			</listitem>
			<listitem>
				<para>Line 6 calls the saveWebImage method to generate the image file, it returns a string which represents the URL as defined in the mapfile (in this case, /tmp/filename.png).
				</para>
			</listitem>
			<listitem>
				<para>The rest of the lines are pure HTML, except line 13, that defines the source URL of the image will be the value stored in $image_url.</para>
			</listitem>
		</itemizedlist>

		<para>You should test the application on your system, to check that it really works and to solve the problems that may arise on your
		particular configuration before moving on to the more complex examples.</para>
		
		<para>The output (using the <filename>europe</filename> shapefile) should look like this:</para>
		<figure>
			<title>Example 1 Output</title>
			<graphic fileref="http://ims.cprsig.cl/1011908782176461.png"></graphic>
		</figure>

		</sect2>
	</sect1>

	<sect1 id='letszoom'>
		<title>Zooming and Panning</title>
		<para> Now I will tell you how to add zoom and pan capabilities to the code. </para>
		<para> Here goes the list of <emphasis>new</emphasis> methods and objects called.</para>
		<para> New Objects: </para>

		<itemizedlist>
			<listitem>
				<para> pointObj </para>
			</listitem>
			<listitem>
				<para> rectObj </para>
			</listitem>
		</itemizedlist>

		<para> New Methods and Members called: </para>

		<itemizedlist>
			<listitem>
				<para> The zoompoint method of the map object: void zoompoint(int nZoomFactor, pointObj oPixelPos, int nImageWidth, int nImageHeight, rectObj oGeorefExt).</para>
			</listitem>
			<listitem>
				<para> The setextent method of the map object: $map->setextent(double minx, double miny, double maxx, double maxy);.</para>
			</listitem>
			<listitem>
				<para> The extent, width and height members of the map object.</para>
			</listitem>
			<listitem> 
				<para> The constructors of RectObj and PointObj: $point = ms_newPointObj(); $rect = ms_newRectObj();</para>
			</listitem>
			<listitem>
				<para> The setXY method of the point object: $point->setXY(double x_coord, double y_coord);</para>
			</listitem>
			<listitem>
				<para> The setextent method of the rectangle object: $rect->setextent(double minx, double miny, double maxx, double maxy);</para>
			</listitem>
		</itemizedlist>

		<para>The map file remains the same as the one presented in the previous example.</para>
		<para>Here I present the new code.</para>

		<programlisting>
		1 &lt;?php
		
		2 dl('php_mapscript.so');
		
		3 // Default values and configuration
		
		4 $val_zsize=3;
		5 $check_pan="CHECKED";
		6 $map_path="/var/www/html/ms/map_files/";
		7 $map_file="europe.map";
		
		8 $map = ms_newMapObj($map_path.$map_file);
		
		
		9 if ( isset($HTTP_POST_VARS["mapa_x"]) &amp;&amp; isset($HTTP_POST_VARS["mapa_y"])
		10      &amp;&amp; !isset($HTTP_POST_VARS["full"]) ) {
		
		11      $extent_to_set = explode(" ",$HTTP_POST_VARS["extent"]); 
		
		12      $map-&gt;setextent($extent_to_set[0],$extent_to_set[1],
		13                      $extent_to_set[2],$extent_to_set[3]);
		
		14      $my_point = ms_newpointObj();
		15      $my_point-&gt;setXY($HTTP_POST_VARS["mapa_x"],$HTTP_POST_VARS["mapa_y"]);
		
		16      $my_extent = ms_newrectObj();
		
		17      $my_extent-&gt;setextent($extent_to_set[0],$extent_to_set[1],
		18                              $extent_to_set[2],$extent_to_set[3]);
		
		19      $zoom_factor = $HTTP_POST_VARS["zoom"]*$HTTP_POST_VARS["zsize"];
		20      if ($zoom_factor == 0) {
		21              $zoom_factor = 1;
		22              $check_pan = "CHECKED";
		23              $check_zout = "";
		24              $check_zin = "";
		25      } else if ($zoom_factor &lt; 0) {
		26              $check_pan = "";
		27              $check_zout = "CHECKED";
		28              $check_zin = "";
		29      } else {
		30              $check_pan = "";
		31              $check_zout = "";
		32              $check_zin = "CHECKED";
		33      }
		
		34      $val_zsize = abs($zoom_factor);
		
		35      $map-&gt;zoompoint($zoom_factor,$my_point,$map-&gt;width,$map-&gt;height,
		36                      $my_extent);
		
		37 }
		
		
		38 $image=$map-&gt;draw();
		39 $image_url=$image-&gt;saveWebImage();
		
		40 $extent_to_html = $map-&gt;extent-&gt;minx." ".$map-&gt;extent-&gt;miny." "
		41              .$map-&gt;extent-&gt;maxx." ".$map-&gt;extent-&gt;maxy;
		
		42 ?&gt;
		43 &lt;HTML&gt;
		44 &lt;HEAD&gt;
		45 &lt;TITLE&gt;Map 2&lt;/TITLE&gt;
		46 &lt;/HEAD&gt;
		47 &lt;BODY&gt;
		48 &lt;CENTER&gt;
		49 &lt;FORM METHOD=POST ACTION=&lt;?php echo $_SERVER['PHP_SELF']?&gt;&gt;
		50 &lt;TABLE&gt;
		51 &lt;TR&gt;
		52      &lt;TD&gt;
		53              &lt;INPUT TYPE=IMAGE NAME="mapa" SRC="&lt;?php echo $image_url?&gt;"&gt;
		54      &lt;/TD&gt;
		55 &lt;/TR&gt;
		56 &lt;TR&gt;
		57      &lt;TD&gt;
		58              Pan
		59      &lt;/TD&gt;
		60      &lt;TD&gt;
		61              &lt;INPUT TYPE=RADIO NAME="zoom" VALUE=0 &lt;?php echo $check_pan?&gt;&gt;
		62      &lt;/TD&gt;
		63 &lt;/TR&gt;
		64 &lt;TR&gt;
		65      &lt;TD&gt;
		66              Zoom In
		67      &lt;/TD&gt;
		68      &lt;TD&gt;
		69              &lt;INPUT TYPE=RADIO NAME="zoom" VALUE=1 &lt;?php echo $check_zin?&gt;&gt;
		70      &lt;/TD&gt;
		71 &lt;/TR&gt;
		72 &lt;TR&gt;
		73      &lt;TD&gt;
		74              Zoom Out
		75      &lt;/TD&gt;
		76      &lt;TD&gt;
		77              &lt;INPUT TYPE=RADIO NAME="zoom" VALUE=-1 &lt;?php echo $check_zout?&gt;&gt;
		78      &lt;/TD&gt;
		79 &lt;/TR&gt;
		80 &lt;TR&gt;
		81      &lt;TD&gt;
		82              Zoom Size
		83      &lt;/TD&gt;
		84      &lt;TD&gt;
		85              &lt;INPUT TYPE=TEXT NAME="zsize" VALUE="&lt;?php echo $val_zsize?&gt;" 
		86              SIZE=2&gt;
		87      &lt;/TD&gt;
		88 &lt;/TR&gt;
		89 &lt;TR&gt;
		90      &lt;TD&gt;
		91              Full Extent
		92      &lt;/TD&gt;
		93      &lt;TD&gt;
		94              &lt;INPUT TYPE=SUBMIT NAME="full" VALUE="Go" 
		95              SIZE=2&gt;
		96      &lt;/TD&gt;
		97 &lt;/TABLE&gt;
		98 &lt;INPUT TYPE=HIDDEN NAME="extent" VALUE="&lt;?php echo $extent_to_html?&gt;"&gt;
		99 &lt;/FORM&gt;
		100 &lt;/CENTER&gt;
		101 &lt;/BODY&gt;
		102 &lt;/HMTL&gt;
		</programlisting>

		<para>This code will zoom out, zoom in, pan, and restore to full extent the image displayed in the previous example.</para>
		<para>It looks much more complicated than it really is, much of the lines are the HTML code, and much of the remaining
		PHP code is just to deal with the forms and such.</para>
		
		<para>You should try it and look at how it works first, you can do that <ulink url="http://ims.cprsig.cl/guide/example2.php" target="_NEW">here</ulink>
		, or you can try it in your own server by copying and pasting the code.</para>
		
		<para>Now it's time for you to play with it a little and look at the source in your browser to check how it changes.</para>

		<para>Done?, now let's start the explanation with the HTML part.</para>
		
		<para>Line 49 declares a form, and line 53 declares the image generated by MapScript to be part of that form, so when you click on it, the
		X and Y coordinates of the click (in pixels) will be sent along with the other data for the PHP code to process.</para>
		
		<para>If you are familiar with HTML and PHP, the rest of the HTML code should be straightforward for you to understand with
		the exception of line 98, that will be explained in due time.</para>
		
		<para>Now look at the PHP code, it's almost the same code used in example 1, with the addition of lines 9 to 37. What 
		do these lines do?</para>
		
		<para>Line 9 checks the relevant variables from the form have been setted. 'mapa_x' and 'mapa_y' represent 
		the X and Y coordinates of the click over the image, and 'full' represents the click on the 'Full Extent' button.</para>
								
		<para>The first time the page is displayed the code between the if statement doesn't get executed, but the rest
		of the code does. Lines 40 and 41 set the '$extent_to_html' variable with the values of the extent defined in
		the map file separated by spaces; that value will be put in the HTML variable 'extent' in line 98.</para>

		<para>Now look at line 11 and 12. We are inside the if statement, that means the form has been submitted at least
		once. We grab the extent stored in the previous execution (the 'extent' HTML variable) of the code and set the 
		extent of the map to be that last extent. This allows to zoom or pan with respect of the previous extent, not the 
		extent that is set in the map file.</para>
		
		<para>From that last paragraph you can deduce that all the default values are set in the map file, and anything
		that you change through MapScript and would like to remain in your code, must be stored somehow. In this case
		it is done through hidden variables in a form. For more advanced applications you could use session variables or a
		database.</para>
		
		<para>Now you should be able to see why the 'Full Extent' button works. If you check line 10, it says that 
		if you haven't pressed the button, skip the code in the if statement, so the extent is resetted to the value
		that the map file has. You should also see that it isn't necessarily a full extent (in case the extent in the map
		file is not full extent).</para>
		
		<para>Lines 14 and 15 declare a new point object and initialize it with the values the user clicked on. You
		should not forget that those values are in pixels, not in georeferenced coordinates.</para>
		
		<para>Lines 16 through 18 create a new rectangle object and set it with the extent of the previous image, 
		just like it is done on line 12. In fact this would work too: $my_extent = $map->extent;.</para>
		
		<para>To do all the zooming and panning, the zoompoint function in called on line 35, but first the arguments it receives must be prepared.
		You can determine the point the user clicked on, and the extent of the image ($my_point and
		$my_extent, respectively), but now you have to determine the zoom factor. That's what lines 19 to 33 do. If you wondered
		why the values of the radio buttons where 0, -1, and 1 for pan, zoom in and zoom out, now you will know the reason.</para>
		
		<para>A zoom factor of 1 tells zoompoint that the operation is pan, a negative value indicates zoom out
		and a positive value indicates zoom in. So, by means of multiplying the value received for the radio buttons
		(HTML variable 'zoom') by the size of the zoom the user entered the zoom factor is calculated. If that value is 0, that means the user
		selected the pan operation, so '$zoom_factor' is set to 1, otherwise the result of the multiplication is the zoom factor zoompoint needs to
		receive. The other lines are to preserve the button the user clicked on the next time. Line 34 tries to
		preserve the value of the zoom size the user entered (It doesn't do that all the time, when and why that
		line fails? That's for you to find out).</para>
		
		<para>And finally, line 34 calls the zoompoint method with the zoom factor obtained, the point built 
		from the pixel coordinates (I insist on that issue because zoompoint is almost the only method that receives 
		the coordinates in pixels, for the other methods you must convert pixels to georeferenced coordinates on 
		your own), the height and width of the image, and the extent.</para>
		
		<para>After calling zoompoint, the extent of the image is changed accordingly to the operation performed (or,
		better put, the zoom factor). So then the image is drawn and the current extent saved (after the zooming) for
		use in the next iteration.</para>
		
	</sect1>
<sect1 id='Conclusion'>
<title>Conclusions</title>
	<para>
		Well, it's time for me to go recharge my batteries. So I will use this last energy to share some final words. The examples I have managed
		to present here are very basic but you should now be able to devise ways to improve it, and suit things to your needs. Keep in mind that you can
		preprocess, store, read, write data from any source you can usually read through PHP, plus all the sources MapServer can handle for GIS data. You can
		even process some GIS data with PHP only if the need would arise (SQL sources are a good example of this). You can also do hybrid approaches 
		where some script prepares data which is then shown through the CGI interface to MapServer, the possibilities are just too many to enumerate. 
		As I already said your imagination is the limit. The next version of this document will include examples with more than one layer, with different
		datasources and creation dynamic layers and classes. If you have a better idea or would like to see some other thing here first, please drop a note to
		my maintainer.</para>
		<para>In the meantime, if you need bigger examples you can refer to the GMap demo, which I don't know where to find at this moment, 
		or the <ulink url="http://maptools.org">MapTools</ulink> site (MapLab, Chameleon). 

		Goodbye, and thanks for reading this far.
	</para>
</sect1>
	   <sect1 id='docinfo'>
      <title>About This Document</title>

      <sect2 id='copyright'>
         <title>Copyright Information</title>

         <para>Copyright (c) 2001-2004 Vinko Vrsalovic.</para>

         <para>This documentation is covered by the same Open Source license as the MapServer software. See MapServer's 
         <ulink url='http://mapserver.gis.umn.edu/license.html'>License and Credits</ulink>

         page for the complete text.</para>
      </sect2>

      <sect2 id='disclaimer'>
         <title>Disclaimer</title>

         <para>No liability for the contents of this document can be accepted. Use the concepts, examples and other content at your own risk. As this is a new edition of this document, there may be errors and inaccuracies that may be damaging to your system. Although this is highly unlikely, the author(s) do not take any responsibility for that: proceed with caution.</para>
      </sect2>

      <sect2 id='acknowledgmements'>
         <title>Acknowledgments</title>

         <para>This document is humbly dedicated to the people who made MapServer and MapScript a reality. The dedication also goes to
         the members of the <ulink url='http://mapserver.gis.umn.edu/support.html'>mapserver-users mailing list</ulink>, that helped me getting started with MapServer/MapScript.</para>
      </sect2>

<!-- Section2: feedback -->
      <sect2 id='feedback'>
         <title>Feedback</title>

         <para>Input is really appreciated. Send any comments or suggestions to the mantainer at 
         <email>v at w dot cl</email>

         .</para>
      </sect2>
   </sect1>
</article>

