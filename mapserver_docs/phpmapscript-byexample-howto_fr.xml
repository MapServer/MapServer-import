<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"http://mapserver.gis.umn.edu/mdp/docbkx412/docbookx.dtd">
<article>
	<articleinfo>
		<title>HOWTO PHP Mapscript 3.5 par l'exemple</title>
		<author>
			<firstname>Vinko</firstname>
			<surname>Vrsalovic</surname>
			<affiliation>
				<address>
					<email>v@w.cl</email>
				</address>
			</affiliation>
		</author>
		<othercredit>
			<contrib>Traduction</contrib>
			<firstname>Franz-Albert</firstname>
			<surname>Van Den Bussche</surname>
			<affiliation>
				<orgname>Club des Utilisateurs de Linux et des logiciels libres de Toulouse et des environs</orgname>
				<orgdiv>CULTe</orgdiv>
				<address>
					<email>franz@favdb.net</email>
				</address>
			</affiliation>
		</othercredit>
		<othercredit>
			<contrib>Relecture</contrib>
			<firstname>Nathalie</firstname>
			<surname>Vielmas</surname>
			<affiliation>
				<orgname>Club des Utilisateurs de Linux et des logiciels libres de Toulouse et des environs</orgname>
				<orgdiv>CULTe</orgdiv>
				<address>
					<email>nath31@ifrance.com</email>
				</address>
			</affiliation>
		</othercredit>
		<abstract>
			<para>Dans ce document j'essayerai, étape par étape, d'expliquer des objets PHP Mapscript 3.5 et leurs méthodes. (Ndt: le therme anglo-saxon method, dans ce contexte serait mieux traduit par "procédure", mais pour éviter toute confusion dans le cas où vous souhaitez obtenir des compléments d'information sur ce document, j'ai préféré conserver le mot strictement équivalent en français). <emphasis>Il sera considéré ici que vous avez des connaissances de base sur <ulink url="mapfile-reference_fr.html">les mapfiles</ulink>et que vous êtes familier avec les scripts<ulink url="http://www.php.net">PHP</ulink> et avec le langage HTML.</emphasis>
			</para>
			<para>Les informations ci-après concernent PHP MapScript version 3.5.</para>
			<para>Dernière mise à jour: 24-01-2002</para>
		</abstract>
	</articleinfo>
	<sect1 id="intro">
		<title>Introduction</title>
		<para>L'objet de ce document est que chacun puisse se familiariser avec PHP MapScript (à partir de maintenant je me limiterai simplement à MapScript), en montrant étape par étape les explications d'exemples réels. Après avoir lu ce document, vous devriez être capable de construire une application MapScript basique sans problème (principalement parce que vous pouvez vous approprier ces codes ;-).</para>
		<para>La liste suivante énumère les connaissances nécessaires ainsi que les logiciels nécessaires.  Note:  L'installation elle-même n'est pas décrite ici; voyez le document <ulink url="phpmapscript-install-howto_fr.html">HOWTO Installation de PHP MapScript</ulink> pour plus d'informations.</para>
		<sect2 id="instsw">
			<title>Logiciels installés</title>
			<itemizedlist>
				<listitem>
					<para>Le logiciel MapScript, version 3.5, est installé et fonctionne sur un serveur HTTP.</para>
				</listitem>
				<listitem>
					<para>Le langage PHP est installé et fonctionne dans le même serveur HTTP.</para>
				</listitem>
			</itemizedlist>
		</sect2>
		<sect2 id="reqkno">
			<title>Connaissances requises</title>
			<itemizedlist>
				<listitem>
					<para>Connaissance de PHP.</para>
				</listitem>
				<listitem>
					<para>Connaissance de HTML: formulaires, tableaux et autres.</para>
				</listitem>
				<listitem>
					<para>Connaissance des fichiers <ulink url="mapfile_fr.html">mapfile</ulink> de  MapServer.</para>
				</listitem>
				<listitem>
					<para>Connaissance des fichiers shape ESRI.</para>
				</listitem>
			</itemizedlist>
		</sect2>
		<para>Vous devriez aussi disposer de la documentation MapScript de <ulink url="http://www2.dmsolutions.ca/webtools/php_mapscript/php_mapscript_docs35.html">DM Solutions</ulink>
ou du fichier README situé dans le répertoire mapscript/php3 de la distribution MapServer. Le <ulink url="phpmapscript-class-guide_fr.html">PHP MapScript Class Guide</ulink> peut aussi vous être nécessaire comme référence.</para>
	</sect1>
	<sect1 id="begin">
		<title>Notre première application</title>
		<para>Dans ce premier exemple, j'afficherai simplement un fichier shape sur une page en utilisant un mapfile.  Pour suivre cet exemple, téléchargez les fichiers suivants:</para>
		<itemizedlist>
			<listitem>
				<para>
					<ulink url="phpmapscript_ex.zip">fichiers shape au format zip</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					<ulink url="phpmapscript_ex.tar.gz">fichiers shape au format tar.gz</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					<ulink url="europe.map">le fichier mapfile</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					<ulink url="example1.php">Premier fichier exemple php</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					<ulink url="example2.php">Deuxième fichier exemple php</ulink>
				</para>
			</listitem>
		</itemizedlist>
		<sect2 id="begmap">
			<title>Le Mapfile</title>
			<para> Voici le mapfile: </para>
			<programlisting>
		NAME FIRSTMAP
		SIZE 400 400
		STATUS ON
		SYMBOLSET ./symbols/symbols.sym
		EXTENT -5696501 1923039 5696501 11022882
		UNITS METERS
		SHAPEPATH "data"
			
		WEB
			IMAGEPATH "/var/www/html/maps/tmp/"
			IMAGEURL "/tmp/"
		END
		
		LAYER
			NAME Europe
			TYPE POLYGON
			STATUS ON
			DATA europe
			CLASS
				COLOR 110 50 100
				OUTLINECOLOR 200 200 200
			END
		END
		
		END
		</programlisting>
			<para>Ici nous avons une carte avec une simple couche, avec le fichier shape appelé <filename>europe</filename> situé dans le répertoire <filename>data</filename>. Les symboles sont situés dans le sous-répertoire <filename>symbols</filename>. Toutes les localisations sont relatives au fichier mapfile. La partie WEB est seulement utilisée pour définir où les images générées sont sauvegardées et à quelle URL elles seront disponibles.</para>
		</sect2>
		<sect2 id="begphp">
			<title>Affichage de la carte avec MapScript</title>
			<para>Pour afficher la carte les objets MapScript et les méthodes suivantes seront utilisés:</para>
			<itemizedlist>
				<listitem>
					<para>Objet MapObj</para>
				</listitem>
				<listitem>
					<para>Objet imageObj</para>
				</listitem>
			</itemizedlist>
			<para>Méthodes MapObj:</para>
			<itemizedlist>
				<listitem>
					<para>La méthode de construction: MapObj ms_newMapObj(string map_file_name)</para>
				</listitem>
				<listitem>
					<para>La méthode de tracé: imageObj draw()</para>
				</listitem>
			</itemizedlist>
			<para>Méthodes imageObj:</para>
			<itemizedlist>
				<listitem>
					<para>La méthode saveWebImage: string saveWebImage(int type, int transparent, int interlace, int quality)</para>
				</listitem>
			</itemizedlist>
			<para>Le code ressemble à ceci: </para>
			<programlisting>
		1 &lt;?php
		
		2 dl('php_mapscript.so'); 
		
		3 $map_path="/var/www/html/ms/map_files/";
				
		4 $map = ms_newMapObj($map_path."europe.map");
		5 $image=$map->draw();
		6 $image_url=$image->saveWebImage(MS_PNG,1,1,0);
		
		7 ?&gt;
		
		8  &lt;HTML&gt;
		9  	&lt;HEAD&gt;
		10 		&lt;TITLE&gt;Example 1: Displaying a map&lt;/TITLE&gt;
		11 	&lt;/HEAD&gt;
		12 	&lt;BODY&gt;
		13 		&lt;IMG SRC=&lt;?php echo $image_url; ?&gt; &gt;
		14 	&lt;/BODY&gt;
		15 &lt;/HTML&gt;
		</programlisting>
			<para>Le code qui suivra dans ce document respecte les règles suivantes:</para>
			<itemizedlist>
				<listitem>
					<para>Toute ligne non vide est numérotée</para>
				</listitem>
			</itemizedlist>
			<para>Ce code restituera une image correspondante au fichier shape <filename>europe</filename> et s'affichera sur une page HTML. Voici les explications.</para>
			<itemizedlist>
				<listitem>
					<para>Ligne 2: nous chargeons l'extension MapScript (vous n'en avez pas besoin si votre fichier php.ini est configuré pour son chargement automatiquement).</para>
				</listitem>
				<listitem>
					<para>Ligne 3: déclare une variable qui gèrera le chemin absolu du fichier mapfile (simplement pour être certain que nous ouvrirons le bon mapfile).</para>
				</listitem>
				<listitem>
					<para>Ligne 4: nous créons une instance de l'objet MapObj en utilisant le constructeur. Comme vous pouvez le voir, le constructeur reçoit la localisation du fichier mapfile comme seul paramètre (nous avons appelé le mapfile <filename>example1.map</filename>).</para>
				</listitem>
				<listitem>
					<para>Ensuite nous appelons la méthode de traçage de l'objet map pour restituer l'image définie par le mapfile (ligne 5). Le résultat (un imageObj) est sauvegardé dans la variable $image.</para>
				</listitem>
				<listitem>
					<para>Ligne 6: nous appelons la méthode saveWebImage pour générer le fichier d'image; elle retourne une chaîne de caractères représentant l'URL telle que définie dans le mapfile (dans ce cas /tmp/filename.png). Le premier paramètre de saveWebImage détermine le type d'image générée (dans ce cas PNG), le second définit si l'image sera transparente (1 indique oui), le troisième détermine si le fichier d'image sera entrelacé (1 indique oui) et le quatrième est ignoré sauf quand le type d'image est MS_JPEG. L'URL est stockée dans la variable $image_url</para>
				</listitem>
				<listitem>
					<para>Le reste des lignes est du pur HTML, sauf la ligne 13 qui détermine l'URL source de l'image qui sera la valeur stockée dans $image_url.</para>
				</listitem>
			</itemizedlist>
			<para>Vous devriez tester cet exemple sur votre système pour vérifier que ça fonctionne vraiment et résoudre les éventuels problèmes liés à votre configuration avant d'attaquer des exemples plus complexes.</para>
			<para>La sortie (en utilisant le fichier shape <filename>europe</filename>) devrait ressembler à ceci:</para>
			<figure>
				<title>Sortie de l'exemple 1</title>
				<graphic fileref="http://ims.cprsig.cl/1011908782176461.png"/>
			</figure>
		</sect2>
	</sect1>
	<sect1 id="letszoom">
		<title>Voyons le zoom!</title>
		<para>Maintenant nous allons ajouter à ce code les capacités de zoom et de déplacement d'image. </para>
		<para> Voici la liste des <emphasis>nouvelles</emphasis> méthodes et objets appelés.</para>
		<para> Nouveaux objets: </para>
		<itemizedlist>
			<listitem>
				<para> pointObj </para>
			</listitem>
			<listitem>
				<para> rectObj </para>
			</listitem>
		</itemizedlist>
		<para> Nouvelles méthodes et membres appelés: </para>
		<itemizedlist>
			<listitem>
				<para> La méthode zoompoint de l'objet map: void zoompoint(int nZoomFactor, pointObj oPixelPos, int nImageWidth, int nImageHeight, rectObj oGeorefExt).</para>
			</listitem>
			<listitem>
				<para> La méthode setextent de l'objet map: $map->setextent(double minx, double miny, double maxx, double maxy);.</para>
			</listitem>
			<listitem>
				<para> Les membres zone (extent), largeur (width) et hauteur (height) de l'objet map.</para>
			</listitem>
			<listitem>
				<para> Les constructeurs de RectObj et PointObj: $point = ms_newPointObj(); $rect = ms_newRectObj();</para>
			</listitem>
			<listitem>
				<para> La méthode setXY de l'objet point: $point->setXY(double x_coord, double y_coord);</para>
			</listitem>
			<listitem>
				<para> La méthode setextent de l'objet rectangle: $rect->setextent(double minx, double miny, double maxx, double maxy);</para>
			</listitem>
		</itemizedlist>
		<para>Le mapfile reste le même que celui de l'exemple précédent.</para>
		<para>Voici le nouveau code (les explications suivent).</para>
		<programlisting>
		1 &lt;?php
		
		2 dl('php_mapscript.so');
		
		3 // Default values and configuration
		
		4 $val_zsize=3;
		5 $check_pan="CHECKED";
		6 $map_path="/var/www/html/ms/map_files/";
		7 $map_file="europe.map";
		
		8 $map = ms_newMapObj($map_path.$map_file);
		
		
		9 if ( isset($HTTP_POST_VARS["mapa_x"]) &amp;&amp; isset($HTTP_POST_VARS["mapa_y"])
		10      &amp;&amp; !isset($HTTP_POST_VARS["full"]) ) {
		
		11      $extent_to_set = explode(" ",$HTTP_POST_VARS["extent"]); 
		
		12      $map-&gt;setextent($extent_to_set[0],$extent_to_set[1],
		13                      $extent_to_set[2],$extent_to_set[3]);
		
		14      $my_point = ms_newpointObj();
		15      $my_point-&gt;setXY($HTTP_POST_VARS["mapa_x"],$HTTP_POST_VARS["mapa_y"]);
		
		16      $my_extent = ms_newrectObj();
		
		17      $my_extent-&gt;setextent($extent_to_set[0],$extent_to_set[1],
		18                              $extent_to_set[2],$extent_to_set[3]);
		
		19      $zoom_factor = $HTTP_POST_VARS["zoom"]*$HTTP_POST_VARS["zsize"];
		20      if ($zoom_factor == 0) {
		21              $zoom_factor = 1;
		22              $check_pan = "CHECKED";
		23              $check_zout = "";
		24              $check_zin = "";
		25      } else if ($zoom_factor &lt; 0) {
		26              $check_pan = "";
		27              $check_zout = "CHECKED";
		28              $check_zin = "";
		29      } else {
		30              $check_pan = "";
		31              $check_zout = "";
		32              $check_zin = "CHECKED";
		33      }
		
		34      $val_zsize = abs($zoom_factor);
		
		35      $map-&gt;zoompoint($zoom_factor,$my_point,$map-&gt;width,$map-&gt;height,
		36                      $my_extent);
		
		37 }
		
		
		38 $image=$map-&gt;draw();
		39 $image_url=$image-&gt;saveWebImage(MS_PNG,1,1,0);
		
		40 $extent_to_html = $map-&gt;extent-&gt;minx." ".$map-&gt;extent-&gt;miny." "
		41              .$map-&gt;extent-&gt;maxx." ".$map-&gt;extent-&gt;maxy;
		
		42 ?&gt;
		43 &lt;HTML&gt;
		44 &lt;HEAD&gt;
		45 &lt;TITLE&gt;Map 2&lt;/TITLE&gt;
		46 &lt;/HEAD&gt;
		47 &lt;BODY&gt;
		48 &lt;CENTER&gt;
		49 &lt;FORM METHOD=POST ACTION=&lt;?php echo $PHP_SELF?&gt;&gt;
		50 &lt;TABLE&gt;
		51 &lt;TR&gt;
		52      &lt;TD&gt;
		53              &lt;INPUT TYPE=IMAGE NAME="mapa" SRC="&lt;?php echo $image_url?&gt;"&gt;
		54      &lt;/TD&gt;
		55 &lt;/TR&gt;
		56 &lt;TR&gt;
		57      &lt;TD&gt;
		58              Pan
		59      &lt;/TD&gt;
		60      &lt;TD&gt;
		61              &lt;INPUT TYPE=RADIO NAME="zoom" VALUE=0 &lt;?php echo $check_pan?&gt;&gt;
		62      &lt;/TD&gt;
		63 &lt;/TR&gt;
		64 &lt;TR&gt;
		65      &lt;TD&gt;
		66              Zoom In
		67      &lt;/TD&gt;
		68      &lt;TD&gt;
		69              &lt;INPUT TYPE=RADIO NAME="zoom" VALUE=1 &lt;?php echo $check_zin?&gt;&gt;
		70      &lt;/TD&gt;
		71 &lt;/TR&gt;
		72 &lt;TR&gt;
		73      &lt;TD&gt;
		74              Zoom Out
		75      &lt;/TD&gt;
		76      &lt;TD&gt;
		77              &lt;INPUT TYPE=RADIO NAME="zoom" VALUE=-1 &lt;?php echo $check_zout?&gt;&gt;
		78      &lt;/TD&gt;
		79 &lt;/TR&gt;
		80 &lt;TR&gt;
		81      &lt;TD&gt;
		82              Zoom Size
		83      &lt;/TD&gt;
		84      &lt;TD&gt;
		85              &lt;INPUT TYPE=TEXT NAME="zsize" VALUE="&lt;?php echo $val_zsize?&gt;" 
		86              SIZE=2&gt;
		87      &lt;/TD&gt;
		88 &lt;/TR&gt;
		89 &lt;TR&gt;
		90      &lt;TD&gt;
		91              Full Extent
		92      &lt;/TD&gt;
		93      &lt;TD&gt;
		94              &lt;INPUT TYPE=SUBMIT NAME="full" VALUE="Go" 
		95              SIZE=2&gt;
		96      &lt;/TD&gt;
		97 &lt;/TABLE&gt;
		98 &lt;INPUT TYPE=HIDDEN NAME="extent" VALUE="&lt;?php echo $extent_to_html?&gt;"&gt;
		99 &lt;/FORM&gt;
		100 &lt;/CENTER&gt;
		101 &lt;/BODY&gt;
		102 &lt;/HMTL&gt;
		</programlisting>
		<para>Ce code permettra les différents zoom (agrandissement, réduction), le déplacement et la restauration de la vue initiale de l' image affichée dans l'exemple précédent.</para>
		<para>C'est moins compliqué qu'il n'y paraît, beaucoup de ces lignes sont du code HTML, et plusieurs d'entre elles sont liées au code PHP de gestion de formulaire.</para>
		<para>Vous devriez l'essayer pour voir ce que ça donne, vous pouvez faire ça <ulink url="http://ims.cprsig.cl/guide/example2.php" target="_NEW">ici</ulink>, ou vous pouvez aussi l'essayer sur votre propre serveur en copiant ce code.</para>
		<para>Manipulez un peu cet exemple et observez comment le source est modifié dans votre navigateur.</para>
		<para>C'est bon?, maintenant commençons les explications par la partie HTML.</para>
		<para>Dans la ligne 49 nous déclarons un formulaire, et dans la ligne 53 nous déclarons l'image générée par MapScript comme faisant partie de ce formulaire, donc quand vous cliquez sur elle, les coordonnées X et Y du clique (en pixels) sont envoyées avec les autres données du code PHP pour être analysées.</para>
		<para>Si vous connaissez le HTML et le PHP, le reste du code HTML ne devrait pas être difficile à comprendre à l'exception de la ligne 98, qui mérite d'être expliqué en son temps.</para>
		<para>Maintenant regardons le code PHP, c'est le même code que celui utilisé dans l'exemple 1, avec les lignes 9 et 37 en supplément. Que font donc ces deux lignes?</para>
		<para>Dans la ligne 9 nous vérifions que les variables du formulaire sont bien renseignées. 'mapa_x' et 'mapa_y' représentent les coordonnées X et Y du clique de souris sur l'image, et 'full' représente le clique sur le bouton 'Full Extent'.</para>
		<para>La première fois que la page est affichée la condition 'if' n'est pas exécutée, mais le reste du code l'est. En ligne 40 et 41 nous renseignons la variable '$extent_to_html' avec les valeurs de la zone (extent) définie dans le mapfile, séparées par des espaces; cette valeur sera mise dans la variable HTML 'extent' en ligne 98.</para>
		<para>Maintenant voyons les lignes 11 et 12. Nous sommes dans la condition 'if', ça veut dire que le formulaire a été soumis au moins une fois. Nous extrayons la zone stockée lors de la précédente exécution (la variable HTML 'extent') du code et renseignons la zone de la carte pour devenir cette dernière zone. Ceci permet de zoomer ou déplacer d'après la zone précédente, et non la zone qui est définie dans le mapfile.</para>
		<para>D'après ce dernier paragraphe vous pouvez déduire que toutes les valeurs par défaut sont renseignées dans le mapfile, que tout changement se fait à travers MapScript et devrait être présent dans votre code, étant stocké quelque part. Dans ce cas nous faisons ça avec des variables cachées du formulaire. Pour une application plus aboutie nous utiliserions des variables de session ou une base de données.</para>
		<para>Maintenant vous devriez être capable de comprendre pourquoi le bouton 'Full Extent' fonctionne. Si vous regardez la ligne 10, elle indique que si vous pressez le bouton, la condition 'if' est sautée, ainsi la zone est réinitialisée à la valeur définie dans le mapfile. Vous devriez aussi voir qu'il ne s'agit pas obligatoirement de la zone complète (dans le cas où le mapfile n'est pas une zone complète).</para>
		<para>En ligne 14 et 15 nous déclarons un nouvel objet point et initialisons celui-ci avec les valeurs du clique de l'utilisateur. N'oubliez pas que ces valeurs sont en pixels, et non dans des coordonnées géographiques.</para>
		<para>En lignes 16 à 18 nous créons un nouvel objet rectangle et le renseignons avec la zone de la précédente image, exactement comme nous l'avions fait en ligne 12. En fait, nous aurions pu écrire $my_extent = $map->extent;.</para>
		<para>Pour effectuer le zoom ou le déplacement, nous appelons la fonction zoompoint en ligne 35, mais d'abord nous devons préparer les arguments qu'elle reçoit. Nous avions le point cliqué par l'utilisateur, et la zone de l'image (respectivement $my_point et $my_extent), maintenant nous avons besoin de déterminer le facteur de zoom. C'est ce qui est fait aux lignes 19 à 33. Si vous vous inquiétiez de savoir pourquoi les valeurs des boutons radio étaient 0, -1, et 1 pour le déplacement, l'agrandissement et la réduction, maintenant vous en connaissez la raison.</para>
		<para>Un facteur de zoom de 1 indique à zoompoint que nous déplaçons l'image, une valeur négative indique que nous avons une réduction et une valeur positive indique que nous avons un agrandissement. Ainsi nous multiplions la valeur reçue pour les boutons radio (variable HTML 'zoom') par la taille du zoom que l'utilisateur a donné. Si cette valeur est zéro, ça veut dire que nous voulons déplacer l'image, ainsi nous renseignons '$zoom_factor' à 1, sinon le résultat de la multiplication est le facteur de zoom que zoompoint a besoin de recevoir. Les autres lignes empêchent l'utilisateur de cliquer sur le bouton la prochaine fois. La ligne 34 essaye de préserver la valeur de la taille du zoom que l'utilisateur a donné (ça ne marche pas à tous les coups, quand et pourquoi? A vous de trouver).</para>
		<para>Et finalement, en ligne 34, nous appelons la méthode zoompoint avec le facteur de zoom obtenu, le point construit à partir des coordonnées en pixels (j'insiste là-dessus parce que zoompoint est la seule méthode qui reçoit des coordonnées en pixels, pour les autres méthodes vous devrez vous-même convertir les pixels en coordonnées géographiques), la hauteur (height) et largeur (width) de l'image, et la zone (extent).</para>
		<para>Après avoir appelé zoompoint, la zone de l'image est changée de manière à correspondre à l'opération effectuée (ou, encore mieux, au facteur de zoom). Puis nous traçons l'image et sauvegardons la zone actuelle (après le zoom) pour être utilisée dans l'itération suivante.</para>
	</sect1>
	<sect1 id="docinfo">
		<title>A propos de ce document</title>
		<sect2 id="copyright">
			<title>Information de Copyright</title>
			<para>Copyright (c) 2001,2002 Vinko Vrsalovic.</para>
			<para>Ce document est protégé par la même licence Open Source que le logiciel MapServer lui-même.  Voyez la page <ulink url="license_fr.html">Licence et Remerciements</ulink> de MapServer pour le texte complet.
			</para>
		</sect2>
		<sect2 id="disclaimer">
			<title>Avertissement</title>
			<para>Aucune responsabilité pour le contenu de ce document ne peut être acceptée. Utilisez les concepts, exemples et autres éléments à vos risques et périls. Comme il s'agit d'une nouvelle version  de ce document, il peut y persister des erreurs et omissions qui pourraient endommager votre système. Aussi il est expressément conseillé, l'auteur et le traducteur n'assurant aucune responsabilité, de procéder avec précaution.
			</para>
		</sect2>
		<sect2 id="acknowledgements">
			<title>Remerciements</title>
			<para>Ce document est dédié aux personnes qui ont fait de MapServer et MapScript une réalité. Cette dédicace s'adresse aussi aux membres de la <ulink url="support_fr.html">liste de diffusion des utilisateurs de MapServer</ulink>, qui m'ont aidé à me lancer dans l'utilisation de MapServer/MapScript.</para>
		</sect2>
		<!-- Section2: feedback -->
		<sect2 id="feedback">
			<title>Feedback</title>
			<para>Envoyez toutes vos suggestions et commentaires, qui sont véritablement les bienvenus, à l'auteur, ou au traducteur.
         .</para>
		</sect2>
	</sect1>
</article>
