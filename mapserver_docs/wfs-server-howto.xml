<?xml version="1.0" standalone="no"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://mapserver.gis.umn.edu/mdp/docbkx412/docbookx.dtd">
<article>
	<articleinfo>
		<title>MapServer WFS Server HOWTO</title>
		<author>
			<firstname>Jean-Fran&ccedil;ois</firstname>
			<surname>Doyon</surname>
			<affiliation>
				<orgname>Natural Resources Canada</orgname>
				<orgdiv>Earth Sciences Sector</orgdiv>
				<orgdiv>Canada Center for Remote Sensing</orgdiv>
				<orgdiv>GeoAccess Division</orgdiv>
				<address>
					<email>jdoyon@nrcan.gc.ca</email>
				</address>
			</affiliation>
		</author>
		<author>
			<firstname>Daniel</firstname>
			<surname>Morissette</surname>
			<affiliation>
				<orgname>DM Solutions Group Inc.</orgname>
			</affiliation>
		</author>
		<abstract>
			<para>This document explains how to configure MapServer to serve data through the OGC WFS interface.</para>
			<para>Last Updated:  01-06-2003</para>
		</abstract>
	</articleinfo>
	<sect1 id="intro">
		<title>Introduction</title>
		<para>A WFS ( Web Feature Service ) publishes feature-level geospatial data to the web.  This means that instead of returning an image, as MapServer has traditionally done, the client now obtains fine-grained information about specific geospatial features of the underlying data, at both the geometry AND attribute levels.  As with other OpenGIS specifications, this interface uses XML over HTTP as it's delivery mechanism, and, more precisely, GML (Geography Markup Language), which is a subset of XML.</para>
		<sect2 id="related">
			<title>WFS-Related information</title>
			<para>Here are some WFS related links. Since these are highly detailed technical specifications, there is no need to read through them in their entirety to get a MapServer WFS up and running.  It is still recommended however to read them over and get familiar with the basics of each of them, in order to understand how it all works:</para>
			<itemizedlist>
				<listitem>
					<para>The <ulink url="http://www.opengis.org/techno/specs/02-058.pdf">OpenGIS Web Feature Service Implementation Specification</ulink>.</para>
				</listitem>
				<listitem>
					<para>The <ulink url="http://www.opengis.net/gml/02-069/GML2-12.html">Geography Markup Language Implementation Specification</ulink>.</para>
				</listitem>
			</itemizedlist>
			<para>Working knowledge of MapServer is of course also required.</para>
		</sect2>
		<sect2 id="software">
			<title>Software Requirements</title>
			<para>In order to enable MapServer to serve WFS, it MUST be compiled against certain librairies:</para>
			<itemizedlist>
				<listitem>
					<para>PROJ.4: The reprojection library. Version 4.4.3 or greater is required.</para>
				</listitem>
				<listitem>
					<para>GDAL/OGR: I/O support librairies. Version 1.1.8 or greater is required.</para>
				</listitem>
			</itemizedlist>
			<para>Please see the MapServer UNIX Compilation and Installation HOWTO for detailed instructions on compiling mapserver with support for these librairies and features.  For Windows users, look on the MapServer website to see if there are any binaries available that meet these requirements.</para>
		</sect2>
	</sect1>
	<sect1>
		<title>Configuring your MapFile to serve WFS layers</title>
		<para>Much as in the WMS support, WFS publishing is enabled by adding certain magic METADATA keyword/value pairs to a MapFile.</para>
		<para>MapServer will serve and include in its WFS capabilities only the layers that meet the following conditions:</para>
		<itemizedlist>
			<listitem><para>Data source is of vector type (Shapefile, OGR, PostGIS, SDE, SDO, ...)</para></listitem>
			<listitem><para>LAYER NAME must be set</para></listitem>
			<listitem><para>LAYER TYPE is one of: LINE, POINT, POLYGON</para></listitem>
			<listitem><para>LAYER DUMP parameter set to TRUE</para></listitem>
		</itemizedlist>
		<sect2>
			<title>MAP object METADATA parameters</title>
			<variablelist>
				<varlistentry>
					<term>wfs_onlineresource</term>
					<listitem>
						<para></para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>wfs_title</term>
					<listitem>
						<para></para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>wfs_abstract</term>
					<listitem>
						<para></para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>wfs_keywordlist</term>
					<listitem>
						<para></para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>wfs_accessconstraints</term>
					<listitem>
						<para></para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>wfs_fees</term>
					<listitem>
						<para></para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>wfs_encoding</term>
					<listitem>
						<para>Optional XML encoding for all XML documents returned by the server. The default is ISO-8859-1.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>ows_schemas_location</term>
					<listitem>
						<para>(Note the name ows_schemas_location and not wfs_... this is because all OGC Web Services (OWS) use the same metadata) Root of the web tree where the family of OGC WFS XMLSchema files are located.  This must be a valid URL where the actual .xsd files are located if you want your WFS output to validate in a validating XML parser. The default if this is not set is to use ".." as the schema files location, which should correspond to the root of your web server if you installed mapserv in the cgi-bin directory. See http://ogc.dmsolutions.ca for an example of a valid schema tree.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>wfs_geometry_element_name</term>
					<listitem>
						<para>Name of the element (i.e. attribute) to use for the geometry in GML output.  If not set then "MS_GEOMETRY" will be used. The layer-level "wfs_geometry_element_name" takes precedence over this value.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>wfs_srs</term>
					<listitem>
						<para>The SRS to use for all layers in this server.  (e.g. EPSG:4326) See the notes below about the SRS rules in the WFS.</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</sect2>
		<sect2>
			<title>LAYER object METADATA parameters</title>
			<variablelist>
				<varlistentry>
					<term>wfs_title</term>
					<listitem>
						<para></para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>wfs_abstract</term>
					<listitem>
						<para></para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>wfs_keywordlist</term>
					<listitem>
						<para></para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>wfs_geometry_element_name</term>
					<listitem>
						<para>Name of the element (i.e. attribute) to use for the geometry in GML output.  If not set then "MS_GEOMETRY" will be used. This value takes precedence over the value of "wfs_geometry_element_name" set at the map level (if one was set).</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>wfs_srs</term>
					<listitem>
						<para>If there is no SRS defined at the top-level in the mapfile then this SRS will be used to advertize this feature type (layer) in the capabilities. See the note below about the SRS rules in the WFS.</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</sect2>
	</sect1>
	<sect1>
		<title>Rules for handling SRS in a MapServer WFS</title>
		<para>Contrary to WMS, the OGC WFS specification doesn't allow a layer (feature type) to be advertized in more than one SRS.  Also, there is no default SRS that applies to all layers by default in the OGC WFS spec.  However, it is possible to have every layer in a WFS server advertized in a different SRS.</para>
		<para>Here is how MapServer decides the SRS to advertize and use for each layer in your WFS:</para>
		<itemizedlist>
			<listitem>
				<para>If a top-level map SRS is defined* then this SRS is used and applies to all layers (feature types) in this WFS.  In this case the SRS of individual layers is simply ignored even if it's set.</para>
			</listitem>
			<listitem>
				<para>If there is no top-level map SRS defined* then each layer is advertized in its own SRS in the capabilities.</para>
			</listitem>
		</itemizedlist>
		<para>* By "SRS is defined", we mean either the presence of a PROJECTION object defined using an EPSG code, or of a "wfs_srs" metadata at this level.</para>
		<para>Note that at the map top-level the "wfs_srs" metadata value takes precedence over the contents of the PROJECTION block.</para>
		<para>At the layer level, if both the wfs_srs metadata and the PROJECTION object are set to different values, then the wfs_srs metadata defines the projection to use in advertizing this layer (assuming there is no top-level map SRS), and the PROJECTION value is assumed to be the projection of the data.  So this means that the data would be reprojected from the PROJECTION SRS to the one defined in the wfs_srs metadata before being served to WFS clients.</para>
		<para>Confusing?  As a rule of thumb, simply set the wfs_srs at the map level (in web metadata) and never set the wfs_srs metadata at the layer level and things will work fine for most cases.</para>
	</sect1>
	<sect1>
		<title>To-do items and known limitations</title>
		<itemizedlist>
			<listitem>
				<para>This is just a basic WFS (read-only): transaction requests are not supported and probably never will given the nature of MapServer.</para>
			</listitem>
			<listitem>
				<para>For now we support only GET requests. The spec also talks about XML-encoded POST requests but we do not support that.</para>
			</listitem>
			<listitem>
				<para>We support only the BBOX filter for now.  It would be nice to support attribute filters, but this means supporting the OGC Filter Encoding spec and we'll keep that for later.</para>
			</listitem>
			<listitem>
				<para>WFS spec. seems to require that features of a given feature type must all be of the same geometry type (point, line, polygon).  This works fine for shapefiles, but some data source formats supported by MapServer allow mixed geometry types in a single layer and this goes against the WFS spec.  Suggestions on how to handle this are welcome.</para>
			</listitem>
			<listitem>
				<para>GetFeature requests don't validate against the XML schema.  This seems to be related to some issue with the DescribeFeatureType schema URL embedded in the header of the GetFeature response.</para>
			</listitem>
		</itemizedlist>
	</sect1>
</article>

