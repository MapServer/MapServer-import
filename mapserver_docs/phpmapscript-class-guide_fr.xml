<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://mapserver.gis.umn.edu/mdp/docbkx412/docbookx.dtd">
<!-- $Id$ -->
<article>
	<articleinfo>
		<!-- insert title here, include the word HOWTO -->
		<title>Mapserver PHP/MapScript Class Reference</title>
		<author>
			<firstname>Jeff</firstname>
			<surname>McKenna</surname>
			<affiliation>
				<orgname>DM Solutions Group Inc.</orgname>
				<address>
					<email>mckenna@dmsolutions.ca</email>
				</address>
			</affiliation>
		</author>
		<othercredit>
			<contrib>Traduction</contrib>
			<firstname>Franz-Albert</firstname>
			<surname>Van Den Bussche</surname>
			<affiliation>
				<orgname>Club des Utilisateurs de Linux et des logiciels libres de Toulouse et des environs</orgname>
				<orgdiv>CULTe</orgdiv>
				<address>
					<email>franz@favdb.net</email>
				</address>
			</affiliation>
		</othercredit>
		<othercredit>
			<contrib>Relecture</contrib>
			<firstname>Nathalie</firstname>
			<surname>Vielmas</surname>
			<affiliation>
				<orgname>Club des Utilisateurs de Linux et des logiciels libres de Toulouse et des environs</orgname>
				<orgdiv>CULTe</orgdiv>
				<address>
					<email>nath@favdb.net</email>
				</address>
			</affiliation>
		</othercredit>
		<date>2002-06-21</date>
		<abstract>
			<!-- a short description of the contents of the doc -->
			<para>Ce document décrit toutes les classes, propriétés et méthodes associées avec au module PHP/Mapscript.  (NdT: le terme anglosaxon method, dans ce contexte serait mieux traduit par "procédure", mais pour éviter toute confusion dans le cas où vous souhaitez obtenir des compléments d'information sur ce document, j'ai préféré conserver le mot strictement équivalent en français).
               </para>
			<para>Dernière mise à jour: 21/06/2002</para>
		</abstract>
	</articleinfo>
	<sect1 id="intro">
		<title>Introduction</title>
		<para>PHP MapScript a été développé à l'origine pour PHP-3.0.14 et fonctionne avec les versions plus récentes de PHP3. Il a aussi été porté sous PHP4; le script de configuration de MapServer détectera automatiquement avec quelle version de PHP vous tentez de construire le module et prendra toutes les dispositions nécessaires.
          </para>
		<para>Le module a été testé et utilisé avec Linux, Solaris, *BSD, et WinNT.
		</para>
		<para>Ce module est en contant développement.
		</para>
		<!-- Section2: More information on the PHP/Mapscript Module -->
		<sect2 id="information">
			<title>Comment obtenir plus d'informations sur PHP/Mapscript</title>
			<itemizedlist>
				<listitem>
					<para>La source principale d'aide est la page oueb de PHP/MapScript à: <ulink url="http://www2.dmsolutions.on.ca/mapserver/php_mapscript/">http://www2.dmsolutions.on.ca/mapserver/php_mapscript/</ulink>.
					</para>
				</listitem>
				<listitem>
					<para>Pour les questions relatives à l'installation du module PHP/Mapscript, voyez le document <ulink url="phpmapscript-install-howto_fr.html">PHP/Mapscript Installation HOWTO</ulink>.
					</para>
				</listitem>
				<listitem>
					<para>De même, voyez la documentation Mapserver MapScript sur:
        		   <ulink url="mapscript_fr.html">http://mapserver.gis.umn.edu/mapscript.html</ulink>
                  			et la documentation du fichier MapFile de MapServer sur:
                  <ulink url="mapfile_fr.html">http://mapserver.gis.umn.edu/mapfile.html</ulink>.  
               		</para>
				</listitem>
				<listitem>
					<para>Le principale site pour la documentation PHP est sur: <ulink url="http://www.php.net/">http://www.php.net/</ulink>.
					</para>
				</listitem>
			</itemizedlist>
		</sect2>
	</sect1>
	<!-- Section1: Classes -->
	<sect1 id="Classes">
		<title>Liste des Classes et Fonctions qui sont actuellement disponibles</title>
		<important>
			<itemizedlist>
				<listitem>
					<para>Les noms de constante et de variable des membre de classe sont sensibles à la casse en PHP.
					</para>
				</listitem>
				<listitem>
					<para>Plusieurs fonctions MapScript (toutes celles qui accèdent aux fichiers en arrière plan comme ms_newMapObj(), drawMap(), etc.) affecteront la valeur du répertoire courrant (CWD) dans l'environnement PHP. Ceci sera résolu, éventuellement, plus tard mais en attendant vous dervez veiller à ces effets.
					</para>
				</listitem>
			</itemizedlist>
		</important>
		<sect2 id="Constants">
			<title>Constantes</title>
			<para>Les constantes Mapserver suivantes sont disponibles:
			</para>
			<programlisting>
    Valeurs booléennes:
        MS_TRUE, MS_FALSE, MS_ON, MS_OFF, MS_YES, MS_NO

    Unités cartographiques:
        MS_INCHES, MS_FEET, MS_MILES, MS_METERS, MS_KILOMETERS, MS_DD,
        MS_PIXELS

    Types de couche:
        MS_LAYER_POINT, MS_LAYER_LINE, MS_LAYER_POLYGON,
        MS_LAYER_RASTER, MS_LAYER_ANNOTATION, MS_LAYER_QUERY

    Etats de Layer/Legend/Scalebar/Class:
        MS_ON, MS_OFF, MS_DEFAULT, MS_EMBED, MS_DELETE

    Types de police de caractères:
        MS_TRUETYPE, MS_BITMAP

    Positions d'étiquette:
        MS_UL, MS_LR, MS_UR, MS_LL, MS_CR, MS_CL, MS_UC, MS_LC,
        MS_CC, MS_AUTO, MS_XY

    Styles des polices Bitmap:
        MS_TINY , MS_SMALL, MS_MEDIUM, MS_LARGE, MS_GIANT

    Types de Shape:
        MS_SHAPE_POINT, MS_SHAPE_LINE, MS_SHAPE_POLYGON, MS_SHAPE_NULL

    Types des fichiers Shape:
        MS_SHP_POINT, MS_SHP_ARC, MS_SHP_POLYGON, MS_SHP_MULTIPOINT

    Types requête/jointure:
        MS_SINGLE, MS_MULTIPLE

    Types carte de requête:
        MS_NORMAL, MS_HILITE, MS_SELECTED

    Types de connexion:
        MS_INLINE, MS_SHAPEFILE, MS_TILED_SHAPEFILE, MS_SDE, MS_OGR, 
        MS_TILED_OGR, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL

    Types de sortie d'image:
        MS_GIF, MS_PNG, MS_JPEG, MS_WBMP
			</programlisting>
		</sect2>
		<sect2 id="Functions">
			<title>Functions</title>
			<programlisting>
    string ms_GetVersion()
        Retourne la version MapServer et les options en une chaîne de caractères.  Cette chaîne peut être parcourue pour trouver quels modules sont compilés, etc.
			</programlisting>
		</sect2>
		<sect2 id="MapObj">
			<title>Classe MapObj</title>
			<sect3 id="Constructor">
				<title>Constructeur:</title>
				<programlisting>
    mapObj ms_newMapObj(string map_file_name)
        Retourne un nouvel objet pour traiter un fichier mapfile de MapServer.
				</programlisting>
			</sect3>
			<sect3 id="Members">
				<title>Membres:</title>
				<programlisting>
    int          numlayers  (read-only)
    string       name
    int          status
    int          width
    int          height
    int          transparent
    int          interlace
    int    	 imagetype
    int    	 imagequality
    int          resolution   (pixels per inch, defaults to 72)    
    rectObj      extent
    double       cellsize
    int          units (map units type)
    double       scale (read-only, set by drawMap())
    string       shapepath
    int          keysizex
    int          keysizey
    int          keyspacingx
    int          keyspacingy
    webObj       web
    referenceMapObj reference
    colorObj     imagecolor
    scalebarObj scalebar
    legendObj legend
				</programlisting>
			</sect3>
			<sect3 id="Methods">
				<title>Méthodes:</title>
				<programlisting>
    int set(string property_name, new_value)
         Renseigne les propriétés de l'objet map à une nouvelle valeur. Reteurne -1 en cas d'erreur.

    int addColor(int r, int g, int b)  
         Ajoute une couleur à la palette de la carte.  Retourne l'index de couleur.

    int getsymbolbyname(string symbol_name)  
         Retourne l'index de symbole en utilisant le nom (name).

    void preparequery()
         Calcule l'échelle de la carte et l'assigne à map-&gt;scale.
             
    imageObj prepareImage()
         Retourne une instance (handle) sur un objet image vide.

    imageObj draw()
         Restitue une carte et retourne une instance sur l'objet image.

    imageObj drawQuery()
         Restitue une carte interrogée et retourne une instance sur l'objet image.

    imageObj drawLegend()
         Restitue une légende et retourne une instance sur l'objet image.

    imageObj drawReferenceMap()
         Restitue une carte référence et retourne une instance sur l'objet image.

    imageObj drawScaleBar()
         Restitue une barre d'échelle et retourne une instance sur l'objet image.

    int embedlegend(imageObj image) 
         insert une légende. Actuellement la légende est simplement ajoutée au cache d'étiquette aussi vous devez invoquer drawLabelCache() pour faire la restitution actuelle (sauf si postlabelcache est positionné auquel cas elle sera dessinée immédiatement).

    int embedScalebar(imageObj image) 
         insert une barre d'échelle. Actuellement la barre d'échelle est juste ajoutée au cache d'étiquette aussi vous devez invoquer drawLabelCache() pour faire la restitution actuelle (sauf si postlabelcache est positionné auquel cas elle sera dessinée immédiatement).

    int drawLabelCache(imageObj image)
         Restitue les étiquette pour une carte. Retourne -1 en cas d'erreur.

    layerObj getLayer(int index)
         Retourne un layerObj depuis la carte donnée par la valeur index (0=première couche)

    layerObj getLayerByName(string layer_name)
         Retourne un layerObj depuis la carte donnée par layer_name.

    colorObj getcolorbyindex(int iCloIndex)
         Retourne un colorObj correspondant à l'index de couleur  dans la palette

    void setextent(double minx, double miny, double maxx, double maxy)
         Détermine la zone (extent) en utilisant les éléments géographiques donnés en argument.

    void zoompoint(int nZoomFactor, pointObj oPixelPos, int nImageWidth, 
                  int nImageHeight, rectObj oGeorefExt)

        Zoom à une position XY donnée;

        Les paramètres sont :                                                 
       - nZoomFactor : valeurs positives pour un agrandissement, valeurs négatives pour une réduction. Le facteur de 1 recentrera.           
       - oPixelPos (pointObj) : coordonnées x et y du clique,avec (0,0) pour en haut à gauche.
       - nImageWidth : largeur en pixel de l'image actuelle.                 
       - nImageHeight : hauteur en pixel de l'image actuelle.               
       - oGeorefExt (rectObj) : étendue géographique actuelle.            
       - MaxGeoref extent (rectObj) : (facultatif) étendues géographiques maximum.
         Si indiquée alors il sera impossible de zoomer/déplacer hors de cette étendue.

    void zoomrectange(rectObj oPixelExt, int nImageWidth, int nImageHeight,
                     rectObj oGeorefExt)
        Définit l'étendue de la carte par l'étendue donnée.
        
        Les paramètres sont :
        - oPixelExt, avec (0,0) pour en haut à gauche
        - nImageWidth : largeur en pixel de l'image actuelle.
        - nImageHeight : hauteur en pixel de l'image actuelle. 
        - oGeorefExt (rectObj) : étendue géographique actuelle.

    void zoomscale(int nScale, pointObj oPixelPos, int nImageWidth, 
                  int nImageHeight, rectObj oGeorefExt)

        Agrandissement ou réduction à la position XY actuelle à laquelle la carte est affichée à l'échelle indiquée.

        Les parametres sont :                                                 
       - nScale : échelle à laquelle la carte devrait être affichée.
       - oPixelPos (pointObj) : coordonnées x, y du clique, avec (0,0) pour en haut à gauche
       - nImageWidth : largeur en pixel de l'image actuelle.                 
       - nImageHeight : hauteur en pixel de l'image actuelle.               
       - oGeorefExt (rectObj) : étendue géographique actuelle.            
       - MaxGeoref extent (rectObj) : (facultatif) étendues géographiques maximum.
         Si indiquée alors il sera impossible de zoomer/déplacer hors de cette étendue.

    int queryByPoint(pointObj point, int mode, double buffer)
        Requiert toutes la couches sélectionnées dans la carte au point spécifié dans coordonnées géographiques de la carte (et non en pixels).  La requête est exécuter pour tous les éléments (shape) qui font parties d'une CLASS qui contient une valeur TEMPLATE ou qui correspond une classe quelconque d'une valeur LAYER TEMPLATE.
        Le mode est MS_SINGLE ou MS_MULTIPLE d'après le nombre de résultats souhaités. 
        En passant un buffer &lt;=0 par défaut pour la tolérance positionnée dans la mapfile (en pixels) mais au lieu de ça vous pouvez utiliser un buffer constant (spécifié en unités terrestres). NdT : je n'ai pas traduit le terme 'buffer' intentionellement, dans ce cas d'utilisation le 'tampon' en question constitue un élément pour déterminer une zone 'd'approximation', en fait il s'agit de la zone 'd'erreur' entre le point cliqué par l'utilisateur et le point réel (j'espère avoir été assez clair).
        Retourne MS_SUCCESS si les éléments ont été trouvés ou MS_FAILURE si rien n'a été trouvé ou si une erreur quelconque s'est produite (notez que le message d'erreur dans le cas où rien n'a été trouvé peut être évité sous PHP en utilisant l'opérateur de contrôle '@').

    int queryByRect(rectObj rect)
        Query all selected layers in map using a rectangle specified in 
        georeferenced map coordinates (i.e. not pixels).
        The query is performed on all the shapes that are part of a CLASS 
        that contains a TEMPLATE value or that match any class in a
        layer that contains a LAYER TEMPLATE value.
        Returns MS_SUCCESS if shapes were found or MS_FAILURE if nothing
        was found or if some other error happened (note that the error 
        message in case nothing was found can be avoided in PHP using 
        the '@' control operator).

    int queryByShape(shapeObj shape)
        Query all selected layers in map based on a single shape, the 
        shape has to be a polygon at this point.
        Returns MS_SUCCESS if shapes were found or MS_FAILURE if nothing
        was found or if some other error happened (note that the error 
        message in case nothing was found can be avoided in PHP using 
        the '@' control operator).

    int queryByFeatures(int slayer) 
        Perform a query based on a previous set of results from
        a layer. At present the results MUST be based on a polygon layer.
        Returns MS_SUCCESS if shapes were found or MS_FAILURE if nothing
        was found or if some other error happened (note that the error 
        message in case nothing was found can be avoided in PHP using 
        the '@' control operator).

    int save(string filename)
         Save current map object state to a file. Returns -1 on error.

    char getProjection()
         Returns a string represenation of the projection. If no 
         projection is set, MS_FALSE is returned.

    int setProjection(string proj_params, boolean bSetUnitsAndExtents)
         Set map projection and coordinate system.  Parameters are given as 
         a single string of comma-delimited PROJ.4 parameters.
         The argument bSetUnitsAndExtents is used to automatically update
         the map units and extents based on the new projection. Possible 
         values are MS_TRUE and MS_FALSE. By default it is set to MS_FALSE.

    int getMetaData(string name)
         Fetch metadata entry by name (stored in the WEB object in the map
         file).  Returns "" if no entry matches the name.  Note that the
         search is case sensitive.

    int setMetaData(string name, string value)
         Set a metadata entry for the map (stored in the WEB object in the map
         file).  Returns MS_SUCCESS/MS_FAILURE.

    array getLayersIndexByGroup(string groupname)
         Return an array containing all the layer's indexes given
         a group name.

    array getAllGroupNames()
         Return an array containing all the group names used in the
         layers.  

    array getAllLayerNames()
         Return an array containing all the layer names.     

    boolean moveLayerUp(int layerindex)
         Move layer up in the hierarchy of drawing. 

    boolean moveLayerDown(int layerindex)
         Move layer down in the hierarchy of drawing.
         
    array getlayersdrawingorder()
         Return an array containing layer's index in the order which they
         are drawn.

    boolean setlayersdrawingorder(array layeryindex)
         Set the layer's order array. The argument passed must be a valid
         array with all the layer's index. 
         Return TRUE on success or else FALSE.

    char *processtemplate(array params, boolean generateimages)
         Process the template file specified in the web object and return 
         the resut in a buffer. 
         The processing consists of opening the template file and replace
         all the tags found in it.
         Only tags that have an equivalent element in the map object are
         replaced (ex [scale]). 
         The are two expetions to the previous statement :
           - [img], [scalebar], [ref], [legend] would be replaced with the 
             appropriate url if the parameter generateimages is set to 
             MS_TRUE. (Note :  the images corresponding to the different objects 
             are geneterated if the object is set to MS_ON in the map file)
           - the user can use the params parameter to specify tags and 
             their values. For example if the user have a specific tag call [my_tag] and
             would like it to be replaced by "value_of_my_tag" he would do :
                $tmparray["my_tag"] = "value_of_my_tag";
                $map-&gt;processtemplate($tmparray, MS_FALSE);
         
    char *processquerytemplate(array params)     
         Process query template files and return the resut in a buffer.

         See also : processtemplate function.
   
    char *processlegendtemplate(array params)     
         Process legend template files and return the resut in a buffer.

         See also : processtemplate function.

    int  setSymbolSet(string fileName)
         Load and set a symbol file dynamictly.
       
    int  getNumSymbols()
         Return the number of symbols in map.         
			    </programlisting>
			</sect3>
		</sect2>
		<sect2 id="LayerObj">
			<title>LayerObj Class</title>
			<sect3 id="constructor">
				<title>Constructor:</title>
				<programlisting>
    Layer Objects can be returned by the MapObj class, or can be created
    using:

    layerObj ms_newLayerObj(MapObj map)
               </programlisting>
			</sect3>
			<sect3 id="Lay_members">
				<title>Members:</title>
				<programlisting>
    int    numclasses  (read-only)
    int    index       (read-only)
    int    status      (MS_ON, MS_OFF, MS_DEFAULT or MS_DELETE)
    string classitem
    string name
    string group
    string data
    int    type
    double tolerance
    int    toleranceunits
    double symbolscale
    double minscale
    double maxscale
    double labelminscale
    double labelmaxscale
    int    maxfeatures
    int    offsite
    int    annotate
    int    transform
    int    labelcache
    int    postlabelcache
    string labelitem
    string labelsizeitem
    string labelangleitem
    string tileitem
    string tileindex
    string header
    string footer
    string connection
    int    connectiontype
    string filteritem
    string template    
			</programlisting>
			</sect3>
			<sect3 id="Lay_methods">
				<title>Methods:</title>
				<programlisting>
    int set(string property_name, new_value)
         Set object property to a new value. Returns -1 on error.

    int draw(imageObj image)
         Draw a single layer, add labels to cache if required. 
         Returns -1 on error.

    int drawQuery(imageObj image)
         Draw query map for a single layer.

    classObj getClass(int classIndex)
         Returns a classObj from the layer given an index value (0=first class)

    int queryByPoint(pointObj point, int mode, double buffer)
         Query layer at point location specified in georeferenced map 
         coordinates (i.e. not pixels).  
         The query is performed on all the shapes that are part of a CLASS 
         that contains a TEMPLATE value or that match any class in a
         layer that contains a LAYER TEMPLATE value.
         Mode is MS_SINGLE or MS_MULTIPLE depending on number of results
         you want. 
         Passing buffer &lt;=0 defaults to tolerances set in the map file 
         (in pixels) but you can use a constant buffer (specified in 
         ground units) instead.
         Returns MS_SUCCESS if shapes were found or MS_FAILURE if nothing
         was found or if some other error happened (note that the error 
         message in case nothing was found can be avoided in PHP using 
         the '@' control operator).

    int queryByRect(rectObj rect)
         Query layer using a rectangle specified in georeferenced map 
         coordinates (i.e. not pixels).
         The query is performed on all the shapes that are part of a CLASS 
         that contains a TEMPLATE value or that match any class in a
         layer that contains a LAYER TEMPLATE value.
         Returns MS_SUCCESS if shapes were found or MS_FAILURE if nothing
         was found or if some other error happened (note that the error 
         message in case nothing was found can be avoided in PHP using 
         the '@' control operator).

    int queryByShape(shapeObj shape)
         Query layer based on a single shape, the shape has to be a polygon
         at this point.
         Returns MS_SUCCESS if shapes were found or MS_FAILURE if nothing
         was found or if some other error happened (note that the error 
         message in case nothing was found can be avoided in PHP using 
         the '@' control operator).

    int queryByFeatures(int slayer) 
         Perform a query set based on a previous set of results from
         another layer. At present the results MUST be based on a polygon
         layer.
         Returns MS_SUCCESS if shapes were found or MS_FAILURE if nothing
         was found or if some other error happened (note that the error 
         message in case nothing was found can be avoided in PHP using 
         the '@' control operator).

    int queryByAttributes(int mode)
         Query layer for shapes that intersect current map extents.
         The query is performed on all the shapes that are part of a CLASS 
         that contains a TEMPLATE value or that match any class in a
         layer that contains a LAYER TEMPLATE value.
         Mode is MS_SINGLE or MS_MULTIPLE depending on number of results
	    you want. 
 	    Returns MS_SUCCESS if shapes were found or MS_FAILURE if nothing
         was found or if some other error happened (note that the error 
         message in case nothing was found can be avoided in PHP using 
         the '@' control operator).

    int setFilter(string expression)
         Set layer filter expression.

    char getProjection()
         Returns a string represenation of the projection. If no 
         projection is set, MS_FALSE is returned.

    int setProjection(string proj_params)
         Set layer projection and coordinate system.  Parameters are given as 
         a single string of comma-delimited PROJ.4 parameters.

    int getNumResult()
         Returns the number of results from this layer in the last query.

    resultCacheMemberObj getResult(int index)
         Returns a resultCacheMemberObj by index from a layer object with 
         index in the range 0 to numresults-1.  
         Returns a valid object or FALSE(0) if index is invalid.

    int open(string shapepath)
         Open the layer for use with getShape().  
         Returns MS_SUCCESS/MS_FAILURE.

    void close()
         Close layer previously opened with open().

    shapeObj getShape(int tileindex, int shapeindex)
         Retrieve shapeObj from a layer by index.
         Tileindex is used only for tiled shapefiles (you get it from the
         resultCacheMemberObj returned by getResult() for instance).
         Simply pass tileindex = -1 for other data sources.         

    int addFeature(shapeObj shape)
         Add a new feature in a layer.  Returns -1 on error.

    int getMetaData(string name)
         Fetch layer metadata entry by name.  Returns "" if no entry 
         matches the name.  Note that the search is case sensitive.

    int setMetaData(string name, string value)
         Set a metadata entry for the layer.  Returns MS_SUCCESS/MS_FAILURE.

    int getWMSFeatureInfoURL(int clickX, int clickY, int featureCount, 
                            string infoFormat)
         Return a WMS GetFeatureInfo URL (works only for WMS layers)
         clickX, clickY is the location of to query in pixel coordinates
         with (0,0) at the top left of the image.
         featureCount is the number of results to return.
         infoFormat is the format the format in which the result should be
         requested.  Depends on remote server's capabilities.  MapServer
         WMS servers support only "MIME" (and should support "GML.1" soon).
         Returns "" and outputs a warning if layer is not a WMS layer 
         or if it is not queriable.
         
    char ** getItems()
         return a list of items. Must call open function first.         
		     </programlisting>
			</sect3>
		</sect2>
		<sect2 id="ClassObj">
			<title>ClassObj Class</title>
			<sect3 id="Class_constructor">
				<title>Constructor:</title>
				<programlisting>
    Class Objects can be returned by the LayerObj class, or can be created using:

    classObj ms_newClassObj(layerObj layer)
                    </programlisting>
			</sect3>
			<sect3 id="Class_members">
				<title>Members:</title>
				<programlisting>
    string name
    int    type
    int    status      (MS_ON, MS_OFF or MS_DELETE)    
    int    color
    int    backgroundcolor
    int    outlinecolor
    int    overlaycolor
    int    overlaybackgroundcolor
    int    overlayoutlinecolor
    int    symbol
    string symbolname    
    int    size
    int    minsize
    int    maxsize
    int    overlaysymbol
    string overlaysymbolname    
    int    overlaysize
    int    overlayminsize
    int    overlaymaxsize
    labelObj label
	               </programlisting>
			</sect3>
			<sect3 id="Class_methods">
				<title>Methods:</title>
				<programlisting>
    int set(string property_name, new_value)
         Set object property to a new value. Returns -1 on error.

    int setexpression(string expression)
         Set the expression string for the class object.
           
    int settext(string text)
         Set the text string for the class object.
         
    int drawLegendIcon(int width, int height, imageObj im, int dstX, int dstY)
         Draw the legend icon on im object at dstX, dstY.
         Returns MS_SUCCESS/MS_FAILURE.

    imageObj createLegendIcon(int width, int height)
         Draw the legend icon and return a new imageObj.         
				</programlisting>
			</sect3>
		</sect2>
		<sect2 id="ImageObj">
			<title>ImageObj Class</title>
			<sect3 id="Img_contructor">
				<title>Constructor:</title>
				<programlisting>
    Instances of ImageObj are always created by the map class methods.
				</programlisting>
			</sect3>
			<sect3 id="Img_members">
				<title>Members:</title>
				<programlisting>
    int    width     (read-only)
    int    height    (read-only)
    string imagepath
    string imageurl				
				</programlisting>
			</sect3>
			<sect3 id="Img_methods">
				<title>Methods:</title>
				<programlisting>
    void free()
         Destroys resources used by an image object.

    int saveImage(string filename, int type, int transparent, int interlace, 
                  int quality)
         Writes image object to specifed filename.
         Passing an empty filename sends output to stdout.  In this case,
         the PHP header() function should be used to set the documents's
         content-type prior to calling saveImage().
         Type can be either MS_GIF, MS_PNG, MS_JPEG or MS_WBMP (depends on
         which version of GD was used to compile MapScript)
         Quality should be a value in the range 0-95, higher value implies
         higher image quality and larger image sizes.
         If quality is negative, then the default IJG JPEG quality value is 
         used (the quality value is ignored for all formats other than JPEG).
         The function returns -1 on error.  On success, it returns either 0
         if writing to an external file, or the number of bytes written if 
         output is sent to stdout.

    string saveWebImage(int type, int transparent, int interlace, int quality)
         Writes image to temp directory.  Returns image URL.
         Type can be either MS_GIF, MS_PNG, MS_JPEG or MS_WBMP (depends on
         which version of GD was used to compile MapScript)
         Quality should be a value in the range 0-95, higher value implies
         higher image quality and larger image sizes.
         If quality is negative, then the default IJG JPEG quality value is 
         used  (the quality value is ignored for all formats other than JPEG).
         
    void pasteImage(imageObj srcImg, int transparentColorIndex [, int dstX, dstY])
         Copy srcImg on top of the current imageObj.
         transparentColorIndex is the color from srcImg that should be
         considered transparent (i.e. those pixels won't be copied).  
         Pass -1 if you don't want any transparent color.
         If optional dstx,dsty are provided then it defines the position 
         where the image should be copied (dstx,dsty = top-left corner 
         position).         
				</programlisting>
			</sect3>
		</sect2>
		<sect2 id="labelobj">
			<title>LabelObj Class</title>
			<sect3 id="Lab_constructor">
				<title>Constructor:</title>
				<programlisting>
    LabelObj are always embedded inside other classes.
				</programlisting>
			</sect3>
			<sect3 id="Lab_members">
				<title>Members:</title>
				<programlisting>
    string font
    int    type
    int    color
    int    outlinecolor
    int    shadowcolor
    int    shadowsizex
    int    shadowsizey
    int    backgroundcolor
    int    backgroundshadowcolor
    int    backgroundshadowsizex
    int    backgroundshadowsizey
    int    size
    int    minsize
    int    maxsize
    int    position
    int    offsetx
    int    offsety
    double angle
    int    autoangle
    int    buffer
    int    antialias
    int    wrap
    int    minfeaturesize
    int    autominfeaturesize
    int    mindistance
    int    partials
    int    force				
				</programlisting>
			</sect3>
			<sect3 id="Lab_methods">
				<title>Method:</title>
				<programlisting>
    int set(string property_name, new_value)
         Set object property to a new value. Returns -1 on error.				
				</programlisting>
			</sect3>
		</sect2>
		<sect2 id="webobj">
			<title>WebObj Class</title>
			<sect3 id="web_constructor">
				<title>Constructor:</title>
				<programlisting>
    Instances of WebObj are always are always embedded inside the MapObj.				
				</programlisting>
			</sect3>
			<sect3 id="web_members">
				<title>Members:</title>
				<programlisting>
    string log
    string imagepath
    string template              
    string imageurl
    string header
    string footer
    string empty     (read-only)
    string error     (read-only)
    string mintemplate
    string maxtemplate
    double minscale
    double maxscale
    rectObj extent   (read-only)				
				</programlisting>
			</sect3>
			<sect3 id="web_methods">
				<title>Method:</title>
				<programlisting>
    int set(string property_name, new_value)
         Set object property to a new value. Returns -1 on error.				
				</programlisting>
			</sect3>
		</sect2>
		<sect2 id="referenceMapObj">
			<title>referenceMapObj Class</title>
			<sect3 id="ref_constructor">
				<title>Constructor:</title>
				<programlisting>
    Instances of referenceMapObj are always embedded inside the mapObj.				
				</programlisting>
			</sect3>
			<sect3 id="ref_members">
				<title>Members:</title>
				<programlisting>
    string   image
    int      width
    int      height
    int      status
    rectObj  extent       (read-only)
    ColorObj color        (read-only)
    ColorObj outlinecolor (read-only)
				</programlisting>
			</sect3>
			<sect3 id="ref_method">
				<title>Method:</title>
				<programlisting>
    int set(string property_name, new_value)
         Set object property to a new value. Returns -1 on error.				
				</programlisting>
			</sect3>
		</sect2>
		<sect2 id="colorobj">
			<title>ColorObj Class</title>
			<sect3 id="col_constructor">
				<title>Constructor:</title>
				<programlisting>
    Instances of ColorObj are always embedded inside other classes.
 				</programlisting>
			</sect3>
			<sect3 id="col_members">
				<title>Members:</title>
				<programlisting>
    int    red
    int    green
    int    blue
				</programlisting>
			</sect3>
			<sect3 id="col_methods">
				<title>Method:</title>
				<programlisting>
    void setRGB(int red, int green, int blue)
         Set red, green, blue values.
				</programlisting>
			</sect3>
		</sect2>
		<sect2 id="pointobj">
			<title>PointObj Class</title>
			<sect3 id="pt_constructor">
				<title>Constructor:</title>
				<programlisting>
    PointObj ms_newPointObj()
			     </programlisting>
			</sect3>
			<sect3 id="pt_members">
				<title>Members:</title>
				<programlisting>
    double x
    double y
    double m //used for measured shape files. set to 0 for other types.        
				</programlisting>
			</sect3>
			<sect3 id="pt_methods">
				<title>Methods:</title>
				<programlisting>
    int setXY(double x, double y, double m)
         Set X,Y coordinate values.
         Note : the 3rd parameter m is used for measured shape files. It is not mandatory.         

    int draw(mapObj map, layerObj layer, imageObj img, 
             int class_index, string text)
         Draws the individual point using layer.  The class_index is used
         to classify the point based on the classes defined for the layer.
         The text string is used to annotate the point.
         Returns MS_SUCCESS/MS_FAILURE.

    double distanceToPoint(pointObj poPoint)
         Calculates distance between two points.  

    double distanceToLine(pointObject p1, pointObject p2)
         Calculates distance between a point and a line defined by the
         two points passed in argument. 

    double distanceToShape(shapeObj shape)
         Calculates the minimum distance between a point and a shape.

    projectionObj project(projectionObj in, projectionObj out)
         Project the point from "in" projection (1st argument) to "out" 
         projection (2nd argument).

    void free()
         Releases all resources used by the object.       
				</programlisting>
			</sect3>
		</sect2>
		<sect2 id="LineObj">
			<title>LineObj Class</title>
			<sect3 id="line_constructor">
				<title>Constructor:</title>
				<programlisting>
    LineObj ms_newLineObj()				
				</programlisting>
			</sect3>
			<sect3 id="line_members">
				<title>Members:</title>
				<programlisting>
    int    numpoints  (read-only)				
				</programlisting>
			</sect3>
			<sect3 id="line_methods">
				<title>Methods:</title>
				<programlisting>
    int add(pointObj point)
         Add a point to the end of line.

    int addXY(double x, double y, double m)
         Add a point to the end of line.
         Note : the 3rd parameter m is used for measured shape files. It is not mandatory.         

    PointObj point(int i)
         Returns a reference to point number i.  Reference is valid only
         during the life of the lineObj that contains the point.

    projectionObj project(projectionObj in, projectionObj out)
         Project the line from "in" projection (1st argument) to "out" 
         projection (2nd argument).

    void free()
         Destroys resources used by a line object.     
				</programlisting>
			</sect3>
		</sect2>
		<sect2 id="ShapeObj">
			<title>ShapeObj Class</title>
			<sect3 id="shape_constructor">
				<title>Constructor:</title>
				<programlisting>
    ShapeObj ms_newShapeObj(int type)
         'type' is one of MS_SHAPE_POINT, MS_SHAPE_LINE, MS_SHAPE_POLYGON or
         MS_SHAPE_NULL				
				</programlisting>
			</sect3>
			<sect3 id="shape_members">
				<title>Members:</title>
				<programlisting>
    string  text
    int     classindex
    int     type      (read-only)
    int     numlines  (read-only)
    int     index     (read-only)
    int     tileindex (read-only)
    rectObj bounds    (read-only)
    int     numvalues (read-only)
    array   values    (read-only)

    The values array is an associative array with the attribute values for
    this shape.  It is set only on shapes obtained from layer-&gt;getShape().
    The key to the values in the array is the attribute name, e.g. 
     $population = $shape-&gt;values["Population"];				
				</programlisting>
			</sect3>
			<sect3 id="shape_methods">
				<title>Methods:</title>
				<programlisting>
    int set(string property_name, new_value)
         Set object property to a new value. Returns -1 on error.
				
    int add(lineObj line)
         Add a line (i.e. a part) to the shape.

    LineObj line(int i)
         Returns a reference to line number i.  Reference is valid only
         during the life of the shapeObj that contains the point.

    int draw(mapObj map, layerObj layer, imageObj img, 
            int class_index, string text)
         Draws the individual shape using layer.  The class_index is used
         to classify the shape based on the classes defined for the layer.
         The text string is used to annotate the shape.
         Returns MS_SUCCESS/MS_FAILURE.

    boolean contains(pointObj point)
         Returns MS_TRUE if the point is inside the shape, MS_FALSE otherwise.

    boolean intersects(shapeObj shape)
         Returns MS_TRUE if the two shapes intersect, MS_FALSE otherwise.
   
    projectionObj project(projectionObj in, projectionObj out)
         Project the shape from "in" projection (1st argument) to "out" 
         projection (2nd argument).

    pointObj getpointusingmeasure(double m)
         Apply only on Measured shape files. Given a measure m, retun the 
         corresponding XY location on the shapeobject.
   
    pointObj getmeasureusingpoint(pointObject point)
         Apply only on Measured shape files. Given an XY Location, find the 
         nearest point on the shape object. Return a point object
         of this point with the m value set.
         
    void free()
         Destroys resources used by a shape object.  
			 	</programlisting>
			</sect3>
		</sect2>
		<sect2 id="rectObj">
			<title>RectObj Class</title>
			<sect3 id="rect_constructor">
				<title>Constructor:</title>
				<programlisting>
    RectObj are sometimes embedded inside other objects.  New ones can
    also be created with:

    RectObj ms_newRectObj()				
				</programlisting>
			</sect3>
			<sect3 id="rect_members">
				<title>Members:</title>
				<programlisting>
    double minx
    double miny
    double maxx
    double maxy				
				</programlisting>
			</sect3>
			<sect3 id="rect_methods">
				<title>Methods:</title>
				<programlisting>
    int set(string property_name, new_value)
         Set object property to a new value. Returns -1 on error.

    void setextent(double minx, double miny, double maxx, double maxy)
         Set the rectangle extents.

    int draw(mapObj map, layerObj layer, imageObj img, 
             int class_index, string text)
         Draws the individual rectangle using layer.  The class_index is used
         to classify the rectangle based on the classes defined for the layer.
         The text string is used to annotate the rectangle.
         Returns MS_SUCCESS/MS_FAILURE.

   double fit(int width, int height)
         Adjust extents of the rectangle to fit the width/height specified.

   projectionObj project(projectionObj in, projectionObj out)
         Project the rectangle from "in" projection (1st argument) to "out" 
         projection (2nd argument).

   void free()
         Destroys resources used by a rect object.  				
				</programlisting>
			</sect3>
		</sect2>
		<sect2 id="shapefileObj">
			<title>ShapefileObj Class</title>
			<sect3 id="shp_constructor">
				<title>Constructor:</title>
				<programlisting>
    shapefileObj ms_newShapefileObj(string filename, int type)
         Opens a shapefile and returns a new object to deal with it. 
         Filename should be passed with no extension.
         To create a new file (or overwrite an existing one), type should 
         be one of MS_SHP_POINT, MS_SHP_ARC, MS_SHP_POLYGON or 
         MS_SHP_MULTIPOINT.
         Pass type as -1 to open an existing file for read-only access,
         and type=-2 to open an existing file for update (append).
			</programlisting>
			</sect3>
			<sect3 id="shp_members">
				<title>Members:</title>
				<programlisting>
    int     numshapes  (read-only)
    int     type       (read-only)
    string  source     (read-only)
    rectObj bounds     (read-only)
			</programlisting>
			</sect3>
			<sect3 id="shp_methods">
				<title>Methods:</title>
				<programlisting>
    shapeObj getShape(int i)
         Retrieve shape by index.

    shapeObj getPoint(int i)
         Retrieve point by index.

    shapeObj getTransformed(mapObj map, int i)
         Retrieve shape by index.

    rectObj getExtent(int i)
         Retrieve a shape's bounding box by index.

    int addShape(shapeObj shape)
         Appends a shape to an open shapefile.

    int addPoint(pointObj point)
         Appends a point to an open shapefile.

    void free()
         Closes a shape file (and commits all changes in write mode) and 
         releases all resources used by the object.			
			</programlisting>
			</sect3>
		</sect2>
		<sect2 id="result">
			<title>ResultCacheMemberObj Class</title>
			<sect3 id="result_constructor">
				<title>Constructor:</title>
				<programlisting>
    Instances of ResultCacheMemberObj are always obtained through 
    layerObj's getResult() method.
				</programlisting>
			</sect3>
			<sect3 id="result_members">
				<title>Members:</title>
				<programlisting>
    int    shapeindex    (read-only)
    int    tileindex     (read-only)
    int    classindex    (read-only)
 				</programlisting>
			</sect3>
		</sect2>
		<sect2 id="proj">
			<title>ProjectionObj Class</title>
			<sect3 id="proj_constructor">
				<title>Constructor:</title>
				<programlisting>
    shapefileObj ms_newprojectionobj(string projectionstring)
				</programlisting>
				<para>
					Creates a projection object based on the projection string passed
   					as argument.
				</para>
				<para>
   					Eg : $projInObj = ms_newprojectionobj("proj=latlong") will create a 
        				geographic projection class.
				</para>
				<para>
   					Eg of usage : the following example will convert a lat/long point to an LCC projection :  
				</para>
				<programlisting>
    $projInObj = ms_newprojectionobj("proj=latlong");
    $projOutObj = ms_newprojectionobj("proj=lcc,ellps=GRS80,
                  lat_0=49,lon_0=-95,lat_1=49,lat_2=77");
    $poPoint = ms_newpointobj();
    $poPoint-&gt;setXY(-92.0, 62.0);         
    $poPoint = $poPoint-&gt;project($projInObj, $projOutObj);				
				</programlisting>
			</sect3>
		</sect2>
		<sect2 id="scale">
			<title>ScalebarObj Class</title>
			<sect3 id="scale_constructor">
				<title>Constructor:</title>
				<programlisting>
    Instances of scalebarObj are always embedded inside the mapObj.
				</programlisting>
			</sect3>
			<sect3 id="scale_members">
				<title>Members:</title>
				<programlisting>
    int height
    int width
    int style      
    int intervals
    int color
    int backgroundcolor            
    int outlinecolor
    int units
    int status //MS_ON, MS_OFF, MS_EMBED
    int position //for embeded scalebars, MS_UL, MS_UC, ...
    int transparent
    int interlace
    int postlabelcache
    labelObj label
    colorObj imagecolor
				</programlisting>
			</sect3>
			<sect3 id="scale_methods">
				<title>Methods:</title>
				<programlisting>
    int set(string property_name, new_value)
         Set object property to a new value. Returns -1 on error.
         
    int setimagecolor(int red, int green, int blue)
         Sets the imagecolor propery (background) of the object. Returns false on error.           
				</programlisting>
			</sect3>
		</sect2>
		<sect2 id="legend">
			<title>LegendObj Class</title>
			<sect3 id="leg_constructor">
				<title>Constructor:</title>
				<programlisting>
    Instances of legendObj are always are always embedded inside the mapObj.
				</programlisting>
			</sect3>
			<sect3 id="leg_members">
				<title>Members:</title>
				<programlisting>
    int height
    int width
    int keysizex      
    int keysizey
    int keyspacingx
    int keyspacingy
    int outlinecolor //Colour of outline of box, -1 for no outline
    int status //MS_ON, MS_OFF, MS_EMBED
    int position //for embeded legends, MS_UL, MS_UC, ...
    int transparent
    int interlace
    int postlabelcache //MS_TRUE, MS_FALSE
    labelObj label
    colorObj imagecolor
				</programlisting>
			</sect3>
			<sect3 id="leg_methods">
				<title>Methods:</title>
				<programlisting>
    int set(string property_name, new_value)
         Set object property to a new value. Returns -1 on error.
				</programlisting>
			</sect3>
		</sect2>
	</sect1>
	<!-- Section1: FAQ -->
	<sect1 id="FAQ">
		<title>FAQ / Common Problems</title>
		<qandaset defaultlabel="qanda">
			<qandaentry>
				<question>
					<para>
							   How do I change the colour of a shape on-the-fly?
						     </para>
				</question>
				<answer>
					<para>
						          Say you have an image object that you are trying to draw more objects on:
						      </para>
					<programlisting>
    $imageObj = $mapObj-&gt;draw();
    $pointObj-&gt;draw($mapObj, $layerObj, $imageObj, 0, $label);						
						      </programlisting>
					<para>
						          Fine. However, you want to change the colour of the point on the fly 
                                        before you draw it:
						      </para>
					<programlisting>
    $imageObj = $mapObj-&gt;draw();
    $classObj = $layerObj-&gt;getClass(0);
    $newColour = $mapObj-&gt;addColor(255,0,0);
    $classObj-&gt;set('color', $newColour);
    $pointObj-&gt;draw($mapObj, $layerObj, $imageObj, 0, $label);						
						      </programlisting>
					<para>
This won't work. In order to get the result you want, you must call
$mapObj-&gt;draw(); after you add your colour to the palatte.						
						      </para>
				</answer>
			</qandaentry>
		</qandaset>
	</sect1>
	<!-- Section1: Document Info -->
	<sect1 id="docinfo">
		<title>About This Document</title>
		<sect2 id="copyright">
			<title>Copyright Information</title>
			<para>
                Copyright (c) 2002, Jeff McKenna, DM Solutions Group Inc.
            </para>
			<para>
                This documentation is covered by the same Open Source license as the
                MapServer software itself.  See MapServer's 
                <ulink url="license_fr.html">License and 
                Credits</ulink> page for the complete text.
            </para>
		</sect2>
		<sect2 id="disclaimer">
			<title>Disclaimer</title>
			<para>
     				No liability for the contents of this document can be accepted.
    				Use the concepts, examples and other content at your own risk.
    				As this is a new edition of this document, there may be errors
    				and inaccuracies that may be damaging to your system.
    				Although this is highly unlikely, the author(s) do not take any 
    				responsibility for that:  proceed with caution.
                 	</para>
		</sect2>
		<!-- Section2: feedback -->
		<sect2 id="feedback">
			<title>Feedback</title>
			<para>
    				Send any comments or suggestions to the author.
   			</para>
		</sect2>
	</sect1>
</article>
