<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://mapserver.gis.umn.edu/mdp/docbkx412/docbookx.dtd">
<article>
	<articleinfo>
		<title>MapFile Reference - MapServer 3.5</title>
		<author>
			<firstname>Jean-Fran&ccedil;ois</firstname>
			<surname>Doyon</surname>
			<affiliation>
				<orgname>Natural Resources Canada</orgname>
				<orgdiv>Earth Sciences Sector</orgdiv>
				<orgdiv>Canadian Center for Remote Sensing</orgdiv>
				<orgdiv>GeoAccess Division</orgdiv>
				<address>
					<email>jdoyon@nrcan.gc.ca</email>
				</address>
			</affiliation>
		</author>
		<abstract>
			<para>
    			This document is a reference to the MapFile syntax for MapServer version 3.5.
   			</para>
			<para>Last Updated:  11-01-2001</para>
		</abstract>
	</articleinfo>
	<sect1>
		<title>MapFile Reference</title>
		<para>MapFiles are the basic configuration mechanism for the Mapserver.  Anything associated with a particular application
          is defined here, although most options can be changed via a web form (CGI Variables).</para>
		<sect2>
			<title>Notes</title>
			<itemizedlist>
				<listitem>
					<para>The Mapfile is NOT case-sensitive.</para>
				</listitem>
				<listitem>
					<para>Strings containing non-alphanumeric characters or a MapServer keyword <emphasis>MUST</emphasis> be quoted. It is recommended to put ALL strings in double-quotes.</para>
				</listitem>
				<listitem>
					<para>There is a maximum of 50 layers per mapfile.  This can be changed by editing the map.h file to change the
                value of MS_MAXLAYERS to the desired number and recompiling.</para>
				</listitem>
				<listitem>
					<para>File paths may be given as absolute paths, or as paths relative to the location of the mapfile.  In addition, data files
                may be specified relative to the <link linkend="shapepath">SHAPEPATH</link></para>
				</listitem>
				<listitem>
					<para>The mapfile has a hierarchical structure, with the Map object being the "root". All other objects fall under this one.</para>
				</listitem>
				<listitem>
					<para>Comments are designated with a #.</para>
				</listitem>
				<listitem>
					<para>Attributes are named using the following syntax: [ATTRIBUTENAME] ... Note that the name of the attribute included between the square brackets IS CASE SENSITIVE.  Generally ESRI generated shapefiles have their attributes (.dbf column names) all in upper-case for instance, and for PostGIS, ALLWAYS use lower-case.</para>
				</listitem>
			</itemizedlist>
		</sect2>
		<sect2 id="map">
			<title>Map Object</title>
                        <para>Defines the master object of the MapFile, that is the object that holds all other objects (i.e. the "root").  It defines application/map wide parameters.</para>
			<variablelist>
				<varlistentry>
					<term>EXTENT [minx] [miny] [maxx] [maxy]</term>
					<listitem>
						<para>The spatial extent of the map to be created.  Most often you will want to specify this, although mapserver will
                  extrapolate one if none is specified.</para>
					</listitem>
				</varlistentry>
				<varlistentry id="fontset">
					<term>FONTSET [filename]</term>
					<listitem>
						<para>Full filename of fontset file to use.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>IMAGECOLOR [r] [g] [b]</term>
					<listitem>
						<para>Color to initialize the map with (i.e. background color).</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>IMAGEQUALITY [int]</term>
					<listitem>
						<para>Compression quality for JPEG output.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>IMAGETYPE [gif|png|jpeg|wbmp]</term>
					<listitem>
						<para>Output image type.  This is dependent on how the MapServer executable was compiled and the GD used.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>INTERLACE [on|off]</term>
					<listitem>
						<para>Should output images be interlaced?  Default is [on].</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>LAYER</term>
					<listitem>
						<para>Signals the start of a <link linkend="layer">LAYER</link>object.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>LEGEND</term>
					<listitem>
						<para>Signals the start of a <link linkend="legend">LEGEND</link>object.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>NAME [name]</term>
					<listitem>
						<para>Prefix attached to map, scalebar and legend GIF filenames created using this MapFile.  It should be kept short.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>PROJECTION</term>
					<listitem>
						<para>Signals the start of a <link linkend="projection">PROJECTION</link> object.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>QUERYMAP</term>
					<listitem>
						<para>Signals the start of a <link linkend="querymap">QUERYMAP</link> object.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>REFERENCE</term>
					<listitem>
						<para>Signals the start of a <link linkend="referencemap">REFERENCE MAP</link> object.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>RESOLUTION [int]</term>
					<listitem>
						<para>Sets the pixels per inch for output, only affects scale computations and nothing else, default is 72</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>SCALE [double]</term>
					<listitem>
						<para>Computed scale of the map. Set most often by the application.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>SCALEBAR</term>
					<listitem>
						<para>Signals the start of a <link linkend="scalebar">SCALEBAR</link> object.</para>
					</listitem>
				</varlistentry>
				<varlistentry id="shapepath">
					<term>SHAPEPATH [filename]</term>
					<listitem>
						<para>Path to the directory holding the shapefiles or tiles.  There can be further subdirectories under SHAPEPATH.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>SIZE [x][y]</term>
					<listitem>
						<para>Size in pixels of the output image (i.e. the map).</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>STATUS [on|off]</term>
					<listitem>
						<para>Is the map active? Sometimes you may wish to turn this off to use only the reference map or scale bar.</para>
					</listitem>
				</varlistentry>
				<varlistentry id="symbolset">
					<term>SYMBOLSET [filename]</term>
					<listitem>
						<para>Full filename of the symbolset to use.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>SYMBOL</term>
					<listitem>
						<para>Signals the start of a <link linkend="symbology">SYMBOL</link> object.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>TRANSPARENT [on|off]</term>
					<listitem>
						<para>Should the background color for the maps be transparent. Default is off.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>UNITS [feet|inches|kilometers|meters|miles|dd]</term>
					<listitem>
						<para>Units of the map coordinates.  Used for scalebar and scale computations.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>WEB</term>
					<listitem>
						<para>Signals the start of a <link linkend="web">WEB</link> object.</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</sect2>
		<sect2 id="label">
			<title>Label Object</title>
			<para>This object is used to define a label, which is in turn usually used to annotate a feature with a piece of text.  Labels can however also be used as symbols through the use of various TrueType fonts.</para>
			<variablelist>
				<varlistentry>
					<term>ANGLE [double]</term>
					<listitem>
						<para>Angle, given in degrees, to draw the label or AUTO to allow the software to compute the angle, AUTO is valid for LINE layers only.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>ANTIALIAS [true|false]</term>
					<listitem>
						<para>Should text be antialiased? Note that this requires more available colors and results in slightly larger output images.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>BACKGROUNDCOLOR [r][g][b]</term>
					<listitem>
						<para>Color to draw a background rectangle (i.e. billboard). Off by default.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>BACKGROUNDSHADOWCOLOR [r][g][b]</term>
					<listitem>
						<para>Color to draw a background rectangle (i.e. billboard) shadow. Off by default.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>BACKGROUNDSHADOWSIZE [x][y]</term>
					<listitem>
						<para>How far should the background rectangle be offset? Default is 1.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>BUFFER [integer]</term>
					<listitem>
						<para>Padding, in pixels, around labels. Useful for maintaining spacing around text to enhance readability. Available only for cached labels. Default is 0.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>COLOR [r][g][b]</term>
					<listitem>
						<para>Color to draw text with.</para>
					</listitem>
				</varlistentry>
				<varlistentry id="font">
					<term>FONT [name]</term>
					<listitem>
						<para>Font alias (as defined in the <link linkend="fontset">FONTSET</link>) to use for labeling.</para>
					</listitem>
				</varlistentry>
				<varlistentry id="force">
					<term>FORCE [true|false]</term>
					<listitem>
						<para>Forces labels for a particular class on, regardless of collisions. Available only for cached labels. Default is false.</para>
					</listitem>
				</varlistentry>
				<varlistentry id="maxsize">
					<term>MAXSIZE [integer]</term>
					<listitem>
						<para>Maximum font size to use when scaling text (pixels). Default is 256.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>MINDISTANCE [integer]</term>
					<listitem>
						<para>Minimum distance between duplicate labels.  Given in pixels.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>MINFEATURESIZE [integer|auto]</term>
					<listitem>
						<para>Minimum size a feature must be to be labeled. Given in pixels. For line data the overall length of the displayed line is used, for polygons features the smallest dimension of the bounding box is used.  "Auto" keyword tells MapServer to only label features that are larger than their corresponding label. Available for cached labels only.</para>
					</listitem>
				</varlistentry>
				<varlistentry id="minsize">
					<term>MINSIZE [integer]</term>
					<listitem>
						<para>Minimum font size to use when scaling text (pixels). Default is 4.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>OFFSET [x][y]</term>
					<listitem>
						<para>Offset values for labels, relative to the lower left hand corner of the label and the label point. Given in pixels. In the case of rotated text specify the values as if all labels are horizontal and any rotation will be compensated for.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>OUTLINECOLOR [r][g][b]</term>
					<listitem>
						<para>Color to draw a one pixel outline around the text.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>PARTIALS [true|false]</term>
					<listitem>
						<para>Can text run off the edge of the map? Default is true.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>POSITION [ul|uc|ur|cl|cc|cr|ll|lc|lr|auto]</term>
					<listitem>
						<para>Position of the label relative to the labeling point (layers only).  First letter is "Y" position, second letter is "X" position. "Auto" tells MapServer to calculate a label position that will not interfere with other labels.  With points and polygons, MapServer selects from the 8 outer positions (i.e. excluding cc). With lines, it only uses lc or uc, until it finds a position that doesn't collide with labels that have already been drawn. If all positions cause a conflict, then the label is not drawn (Unless the label's <link linkend="force">FORCE</link> a parameter is set to "true"). "Auto" placement is only available with cached labels.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>SHADOWCOLOR [r][g][b]</term>
					<listitem>
						<para>Color of drop shadow.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>SHADOWSIZE [x][y]</term>
					<listitem>
						<para>Shadow offset in pixels.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>SIZE [integer]|[tiny|small|medium|large|giant]</term>
					<listitem>
						<para>Text size. Use "integer" to give the size in pixels of your TrueType font based label, or any of the other 5 listed keywords to bitmap fonts.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>TYPE [bitmap|truetype]</term>
					<listitem>
						<para>Type of font to use. Generally bitmap fonts are faster to draw then TrueType fonts. However, TrueType fonts are scalable and available in a variety of faces.  Be sure to set the <link linkend="font">FONT</link> parameter if you select TrueType.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>WRAP [character]</term>
					<listitem>
						<para>Character that represents an end-of-line condition in label text, thus resulting in a multi-line label.</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</sect2>
		<sect2 id="layer">
			<title>Layer Object</title>
			<para>The most used object in a MapFile, this one describes layers used to make up a map.  Layers are drawn in their order of appearance in the MapFile (first layer is at the bottom, last in on top).</para>
			<variablelist>
				<varlistentry>
					<term>CLASS</term>
					<listitem>
						<para>Signals the start of a <link linkend="class">CLASS</link> object.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>CLASSITEM [attribute]</term>
					<listitem>
						<para>Item name in attribute table to use for class lookups.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>CONNECTION [string]</term>
					<listitem>
						<para>Database connection string to retrieve remote data.</para>
						<para>An SDE connection string consists of a hostname, instance name, database name, username and password separated by commas.</para>
						<para>A PostGIS connection string is basically a regular PostgreSQL connection string, it takes the form of "user=nobody password=****** dbname=dbname host=localhost port=5432"</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>CONNECTIONTYPE [local|sde|ogr|postgis]</term>
					<listitem>
						<para>Type of connection. Default is local.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>DATA [filename]|[sde parameters][postgis table/column]</term>
					<listitem>
						<para>Full filename of the spatial data to process. No file extension is necessary for shapefiles. Can be specified relative to the <link linkend="shapepath">SHAPEPATH</link> option from the Map Object.</para>
						<para>If this is an SDE layer, the parameter should include the name of the layer as well as the geometry column, i.e. "mylayer,shape".</para>
						<para>If this is a PostGIS layer, the parameter should be in the form of "&lt;columnname&gt; from &lt;tablename&gt;", where "columnname" is the name of the column containing the geometry objects and "tablename" is the name of the table from which the geometry data will be read.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>FEATURE</term>
					<listitem>
						<para>Signals the start of a <link linkend="feature">FEATURE</link> object.</para>
					</listitem>
				</varlistentry>
				<varlistentry id="filter">
					<term>FILTER [string]</term>
					<listitem>
						<para>This parameter allows for data specific attribute filtering that is done at the same time spatial filtering is done, but before any CLASS expressions are evaluated.  For OGR and shapefiles the string is simply a mapserver regular expression.  For SDE and PostGIS the string is a SQL WHERE clause that is valid with respect to the underlying database (e.g. Oracle/PostgreSQL)</para>
						<para>For example: FILTER "type='road' and size &lt;2"</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>FILTERITEM [attribute]</term>
					<listitem>
						<para>Item to use with simple <link linkend="filter">FILTER</link> expressions. OGR and shapefiles only. </para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>FOOTER [filename]</term>
					<listitem>
						<para>Template to use <emphasis>after</emphasis> a layer's set of results have been sent. Multiresult query modes only.</para>
					</listitem>
				</varlistentry>
				<varlistentry id="group">
					<term>GROUP [name]</term>
					<listitem>
						<para>Name of a group that this layer belongs to.  The group name can then be reference as a regular layer name in the template files, allowing to do things like turning on and off a group of layers at once.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>HEADER [filename]</term>
					<listitem>
						<para>Template to use <emphasis>before</emphasis> a layer's set of results have been sent. Multiresult query modes only.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>LABELANGLEITEM [attribute]</term>
					<listitem>
						<para>Item name in attribute table to use for class annotation angles. Values should be in degrees.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>LABELCACHE [on|off]</term>
					<listitem>
						<para>Specifies whether labels should be drawn as the features for this layer are drawn, or whether they should be cached and drawn after all layers have been drawn. Default is on. Label overlap removal, auto placement etc... are only available when the label cache is active.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>LABELITEM [attribute]</term>
					<listitem>
						<para>Item name in attribute table to use for class annotation (i.e. labeling).</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>LABELMAXSCALE [double]</term>
					<listitem>
						<para>Maximum scale at which the layer is labeled.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>LABELMINSCALE [double]</term>
					<listitem>
						<para>Minimum scale at which the layer is labeled.</para>
					</listitem>
				</varlistentry>
				<varlistentry id="labelrequires">
					<term>LABELREQUIRES [expression]</term>
					<listitem>
						<para>Sets context for labeling this layer, for example:</para>
						<programlisting>LABELREQUIRES ([orthoquads] != 1)</programlisting>
						<para>means that this layer would NOT be labeled if a layer named "orthoquads" is on. The expression consists of a boolean expression based on the status of other layers, each [layer name] substring is replaced by a 0 or a 1 depending on that layers STATUS and then evaluated as normal. Logical operators AND and OR can be used.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>LABELSIZEITEM [attribute]</term>
					<listitem>
						<para>Item name in attribute table to use for class annotation sizes. Values should be in pixels.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>MAXFEATURES [integer]</term>
					<listitem>
						<para>Specifies the number of features that should be drawn for this layer in the CURRENT window.  Has some interesting uses with annotation and with sorted data (i.e. lakes by area).</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>MAXSCALE [double]</term>
					<listitem>
						<para>Maximum scale at which this layer is drawn.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>METADATA</term>
					<listitem>
						<para>This keyword allows for arbitrary data to be stored as name value pairs.  This is used with OGC WMS to define things such as layer title.  It can also allow more flexibility in creating templates, as anything you put in here will be accessible via template tags.</para>
						<para>Example:
						<screen>
METADATA
	title "My layer title"
	author "Me!"
END
						</screen>
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>MINSCALE [double]</term>
					<listitem>
						<para>Minimum scale at which this layer is drawn.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>NAME [string]</term>
					<listitem>
						<para>Short name for this layer. Limit is 20 characters. This name is the link between the mapfile and web interfaces that refer to this name. They must be identical. The name should be unique, unless one layer replaces another at different scales. Use the <link linkend="group">GROUP</link> option to associate layers with each other.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>OFFSITE [color index]</term>
					<listitem>
						<para>Sets the color index to treat as transparent for raster layers.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>POSTLABELCACHE [true|false]</term>
					<listitem>
						<para>Tells MapServer to render this layer after all labels in the cache have been drawn. Useful for adding neatlines and similar elements. Default is false.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>PROJECTION</term>
					<listitem>
						<para>Signals the start of a <link linkend="projection">PROJECTION</link> object.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>REQUIRES [expression]</term>
					<listitem>
						<para>Sets context for displaying this layer (see <link linkend="labelrequires">LABELREQUIRES</link>).</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>SIZEUNITS [pixels|feet|inches|kilometers|meters|miles|</term>
					<listitem>
						<para>Sets the unit of <link linkend="class">CLASS</link> object <link linkend="size">SIZE</link> values (default is pixels). Usefull for simulating buffering.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>STATUS [on|off|default]</term>
					<listitem>
						<para>Sets the current status of the layer. Often modified by MapServer itself.  Default turns the layer on permanently.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>STYLEITEM [attribute]</term>
					<listitem>
						<para>Item to use for feature specific styling.  This is *very* experimental and OGR only at the moment.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>SYMBOLSCALE [double]</term>
					<listitem>
						<para>The scale at which symbols and/or text appear full size. This allows for dynamic scaling of objects based on the scale of the map. If not set then this layer will always appear at the same size. Scaling only takes place within the limits of <link linkend="minsize">MINSIZE</link> and <link linkend="maxsize">MAXSIZE</link> as described above.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>TEMPLATE [file|url]</term>
					<listitem>
						<para>Used as a global alternative to <link linkend="class">CLASS</link>&nbsp;<link linkend="template">TEMPLATE</link></para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>TILEINDEX [filename]</term>
					<listitem>
						<para>Full filename for the index or tile definition for this layer. Similar to an ArcInfo library index, this shapefile contains polygon features for each tile. The item that contains the location of the tiled data is given using the <emphasis>TILEITEM</emphasis> parameter. If the <emphasis>DATA</emphasis> parameter contains a value then it is added to the end of the location. If <emphasis>DATA</emphasis> is empty then the location should contain the entire filename.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>TILEITEM [attribute]</term>
					<listitem>
						<para>Item that contains the location of an individual tile, default is "location".</para>
					</listitem>
				</varlistentry>
				<varlistentry id="tolerance">
					<term>TOLERANCE [double]</term>
					<listitem>
						<para>Sensitivity for point based queries (i.e. via mouse and/or map coordinates). Given in <link linkend="toleranceunits">TOLERANCEUNITS</link> with a default of 3 pixels. To restrict polygon searches so that the point must occur <emphasis>in</emphasis> the polygon set the tolerance to zero.</para>
					</listitem>
				</varlistentry>
				<varlistentry id="toleranceunits">
					<term>TOLERANCEUNITS [pixels|feet|inches|kilometers|meters|miles|dd]</term>
					<listitem>
						<para>Units of the <link linkend="tolerance">TOLERANCE</link> value. Default is pixels.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>TRANSFORM [true|false]</term>
					<listitem>
						<para>Tells MapServer whether or not a particular layer needs to be transformed from some coordinate system to image coordinates. Default is true. This allows you to create shapefiles in image/graphics coordinates and therefore have features that will always be displayed in the same location on every map. Ideal for placing logos or text in maps. Remember that the graphics coordinate system has an origin in the upper left hand corner of the image, contrary to most map coordinate systems.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>TYPE [point|line|polygon|circle|annotation|raster|query]</term>
					<listitem>
						<para>Specifies how the data should be drawn. Need not be the same as the shapefile type. For example, a polygon shapefile may be drawn as a point layer, but a point shapefile may not be drawn as a polygon layer. Common sense rules. Annotation means that a label point will be calculated for the features, but the feature itself will not be drawn although a marker symbol can be optionally drawn. this allows for advanced labeling like numbered highway shields. Points are labeled at that point. Polygons are labeled first using a centroid, and if that doesn't fall in the polygon a scanline approach is used to guarantee the label falls within the feature. Lines are labeled at the middle of the longest arc in the visible portion of the line. Query only means the layer can be queried but not drawn.</para>
						<para>In order to differentiate between POLYGONs and POLYLINEs (which do not exist as a type), simply respectively use or ommit the COLOR keyword when classifying.  If you use it, it's a polygon with a fill color, otherwise it's a polyline with only an OUTLINECOLOR.</para>
						<para>A circle must be defined by a a minimum bounding rectangle. That is, 2 points that define the smallest square that can contain it. These 2 points are the two opposite corners of said box.</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</sect2>
		<sect2 id="class">
			<title>Class Object</title>
			<para>Defines thematic classes for a given layer and each layer must have at least one class. In cases with more than one class, membership is determined using attribute values and expressions. Starts with the keyword <emphasis>CLASS</emphasis> and terminates with the keyword <emphasis>END</emphasis>.
			</para>
			<variablelist>
				<varlistentry>
					<term>BACKGROUNDCOLOR [r][g][b]</term>
					<listitem>
						<para>Color to use for non-transparent symbols.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>COLOR [r][g][b]</term>
					<listitem>
						<para>Color to use for drawing features.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>EXPRESSION [string]</term>
					<listitem>
						<para>Three types of expressions are now supported to define class membership. String comparisons, regular expressions, and simple logical expressions. If no expression is given, then all features are said to belong to this class.</para>
						<itemizedlist>
							<listitem>
								<para>String comparisons are case sensitive and are the fastest to evaluate. No special delimiters are necessary although string must be quoted if they contain special characters. (As a matter of good habit, it is recommended you quote all strings).</para>
							</listitem>
							<listitem>
								<para>Regular expressions function just like previous versions of MapServer. However, you must now delimit a regular expression using /regex/. No quotes should be used.</para>
							</listitem>
							<listitem>
								<para>Logical expressions allow you to build fairly complex tests based on one or more attributes and therefore are only available with shapefiles. Logical expressions are delimited by parentheses "(expression)".  Attribute names are delimited by square brackets "[ATTRIBUTE]". These names are case sensitive and must match the items in the shapefile. For example: EXPRESSION ([POPULATION] > 50000 AND '[LANGUAGE]' eq 'FRENCH') ... The following logical operators are supported : =,>,&lt;,&lt;=,>=,=,or,and,lt,gt,ge,le,eq. As you might expect this level of complexity is slower to process.</para>
							</listitem>
						</itemizedlist>
						<para>String comparisons and regular expressions work from the classitem defined at the layer level. You may mix expression types within the different classes of a layer.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>JOIN</term>
					<listitem>
						<para>Signals the start of a <link linkend="join">JOIN</link> object.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>LABEL</term>
					<listitem>
						<para>Signals the start of a <link linkend="label">LABEL</link> object.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>MAXSIZE [integer]</term>
					<listitem>
						<para>Maximum size in pixels to draw a symbol. Default is 50.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>MINSIZE [integer]</term>
					<listitem>
						<para>Minimum size in pixels to draw a symbol. Default is 0.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>NAME [string]</term>
					<listitem>
						<para>Name to use in legends for this class. If not set class won't show up in legend.</para>
					</listitem>
				</varlistentry>
				<varlistentry id="outlinecolor">
					<term>OUTLINECOLOR [r][g][b]</term>
					<listitem>
						<para>Color to use for outlining polygons and certain marker symbols. Line symbols do not support outline colors.</para>
					</listitem>
				</varlistentry>
				<varlistentry id="size">
					<term>SIZE [integer]</term>
					<listitem>
						<para>Height, in pixels, of the symbol/pattern to be used. Only useful with scalable symbols. Default is 1.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>SYMBOL [integer|string]</term>
					<listitem>
						<para>The symbol name or number to use for all features if attribute tables are not used.  The number is the index of the symbol in the symbol file, starting at 1, the 5th symbol in the file is therefore symbol number 5.  You can also give your symbols names using the <emphasis>NAME</emphasis> keyword in the symbol definition file, and use those to refer to them.  Default is 0, which results in a single pixel, single width line, or solid polygon fill, depending on layer type.</para>
					</listitem>
				</varlistentry>
				<varlistentry id="template">
					<term>TEMPLATE [filename]</term>
					<listitem>
						<para>Template file or URL to use in presenting query results to the user.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>TEXT [string]</term>
					<listitem>
						<para>Static text to label features in this class with. This overrides values obtained from the <emphasis>LABELTIEM</emphasis>. The string may be given as an expression delimited using the ()'s. This allows you to concatenate multiple attributes into a single label. For example: ([FIRSTNAME],[LASTNAME]).</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>You can also "stack" 2 symbols to achieve interesting effects.  You define the second symbol, which effectively sits "on top" of the symbol normally defined above.</para>
			<para>The following parameters allow you to define the symbol, and they are equivalent to their non-overlay counterparts:</para>
			<itemizedlist>
				<listitem>
					<para>OVERLAYBACKGROUNDCOLOR</para>
				</listitem>
				<listitem>
					<para>OVERLAYCOLOR</para>
				</listitem>
				<listitem>
					<para>OVERLAYOUTLINECOLOR</para>
				</listitem>
				<listitem>
					<para>OVERLAYSIZE</para>
				</listitem>
				<listitem>
					<para>OVERLAYMINSIZE</para>
				</listitem>
				<listitem>
					<para>OVERLAYMAXSIZE</para>
				</listitem>
				<listitem>
					<para>OVERLAYSYMBOL</para>
				</listitem>
			</itemizedlist>
		</sect2>
		<sect2 id="feature">
			<title>Feature Object</title>
			<para>Defines inline features. You can use inline features when it's not possible (or too much trouble) to create a shapefile. Inline features can also be built via urls or forms. Starts with the keyword <emphasis>FEATURE</emphasis> and terminates with the keyword <emphasis>END</emphasis>.</para>
			<variablelist>
				<varlistentry>
					<term>POINTS</term>
					<listitem>
						<para>A set of xy pairs terminated with an END, for example:</para>
						<programlisting>POINTS 1 1 50 50 1 50 1 1 END</programlisting>
						<para>Note that with POLYGON/POLYLINE layers POINTS must start and end with the same point (i.e. close the feature).</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>TEXT [string]</term>
					<listitem>
						<para>String to use for labeling this feature.</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</sect2>
		<sect2 id="legend">
			<title>Legend Object</title>
			<para>Defines how a legend is to be built. Legend components are built automatically from class objects from individual layers.  Starts with the keyword <emphasis>LEGEND</emphasis> and terminates with the keyword <emphasis>END</emphasis>. The size of the legend image is <emphasis>NOT</emphasis> known prior to creation so be careful not to hard-code width and height in the &lt;IMG> tag in the template file.</para>
			<variablelist>
				<varlistentry>
					<term>IMAGECOLOR [r][g][b]</term>
					<listitem>
						<para>Color to initialize the legend with (i.e. the background).</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>INTERLACE [on|off]</term>
					<listitem>
						<para>Should the output image be interlaced?  Default is [on].</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>LABEL</term>
					<listitem>
						<para>Signals the start of a <link linkend="label">LABEL</link> object</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>OUTLINECOLOR [r][g][b]</term>
					<listitem>
						<para>Color to use for outlining symbol key boxes.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>POSITION [ul|uc|ur|ll|lc|lr]</term>
					<listitem>
						<para>Where to place an embedded legend in the map. Default is lr.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>KEYSIZE [x][y]</term>
					<listitem>
						<para>Size of symbol key boxes in pixels. Default is 20 by 10.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>KEYSPACING [x][y]</term>
					<listitem>
						<para>Spacing between symbol key boxes ([y]) and labels ([x]) in pixels. Default is 5 by 5.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>POSTLABELCACHE [true|false]</term>
					<listitem>
						<para>Tells MapServer to render this legend after all labels in the cache have been drawn. Useful for adding neatlines and similar elements. Default is false.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>STATUS [on|off|embed]</term>
					<listitem>
						<para>Is the legend image to be created.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>TRANSPARENT [on|off]</term>
					<listitem>
						<para>Should the background color for the legend be transparent. Default is off.</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</sect2>
		<sect2 id="querymap">
			<title>QueryMap Object</title>
			<para>Defines a mechanism to map the results of a query. Starts with the keyword <emphasis>QUERYMAP</emphasis> and terminates with the keyword <emphasis>END</emphasis>.</para>
			<variablelist>
				<varlistentry id="color">
					<term>COLOR [r][g][b]</term>
					<listitem>
						<para>Color in which features are highlighted. Default is yellow.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>SIZE [x][y]</term>
					<listitem>
						<para>Size of the map in pixels. Defaults to the size defined in the map object.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>STATUS [on|off]</term>
					<listitem>
						<para>Is the query map to be drawn ?</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>STYLE [normal|hilite|selected]</term>
					<listitem>
						<para>Sets how selected features are to be handled. Layers not queried are drawn as usual.</para>
						<itemizedlist>
							<listitem>
								<para>Normal: Draws all features according to the settings for that layer.</para>
							</listitem>
							<listitem>
								<para>Hilite: Draws selected features using <link linkend="color">COLOR</link>. Non-selected features are drawn normally.</para>
							</listitem>
							<listitem>
								<para>Selected: draws only the selected features normally.</para>
							</listitem>
						</itemizedlist>
					</listitem>
				</varlistentry>
			</variablelist>
		</sect2>
		<sect2 id="join">
			<title>Join Object</title>
			<para>Defines how a specific join is handled. Starts with the keyword <emphasis>JOIN</emphasis> and terminates with the keyword <emphasis>END</emphasis>. Joins are defined within a query object.</para>
			<variablelist>
				<varlistentry>
					<term>FROM [item]</term>
					<listitem>
						<para>Join item in the shapefile.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>NAME [string]</term>
					<listitem>
						<para>Unique name for this join. Required.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>TABLE [file]</term>
					<listitem>
						<para>Name of XBase file (DBF, must be a full path) to join TO.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>TEMPLATE [filename]</term>
					<listitem>
						<para>Template to use with one-to-many joins. The template is processed once for each record and can only contain substitutions for items in the joined table.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>TO [item]</term>
					<listitem>
						<para>Join item in the table to be joined.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>TYPE [multiple|single]</term>
					<listitem>
						<para>The type of join. Default is single (i.e. one-to-one).</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</sect2>
		<sect2 id="referencemap">
			<title>Reference Map Object</title>
			<para>Defines how reference maps are to be created. Starts with the keyword <emphasis>REFERENCE</emphasis> and terminates with the keyword <emphasis>END</emphasis>. Three types of reference maps are supported. The most common would be one showing the extent of a map in an interactive interface. It is also possible to request reference maps as part of a query. Point queries will generate an image with a marker (see below) placed at the query point. Region based queries will depict the extent of the area of interest. Finally, feature based queries will display the selection feature(s) used.</para>
			<variablelist>
				<varlistentry>
					<term>COLOR [r][g][b]</term>
					<listitem>
						<para>Color in which the reference box is drawn. Set any component to -1 for no fill. Default is red.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>EXTENT [minx][miny][maxx][maxy]</term>
					<listitem>
						<para>The spatial extent of the base reference image.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>IMAGE [filename]</term>
					<listitem>
						<para>Full filename of the base reference image. Must be a GIF image.</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<variablelist>
				<varlistentry>
					<term>OUTLINECOLOR [r][g][b]</term>
					<listitem>
						<para>Color to use for outlining the reference box. Set any component to -1 for no outline.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>SIZE [x][y]</term>
					<listitem>
						<para>Size, in pixels, of the base reference image.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>STATUS [on|off]</term>
					<listitem>
						<para>Is the reference map to be created? Default it off.</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</sect2>
		<sect2 id="scalebar">
			<title>Scalebar Object</title>
			<para>Defines how a scalebar should be built. Starts with the keyword <emphasis>SCALEBAR</emphasis> and terminates with the keyword <emphasis>END</emphasis>. Scalebars currently do not make use of TrueType fonts. The size of the scalebar image is <emphasis>NOT</emphasis> known prior to rendering, so be careful not to hard-code width and height in the &lt;IMG> tag in the template file. Future versions will make the image size available.</para>
			<variablelist>
				<varlistentry>
					<term>BACKGROUNDCOLOR [r][g][b]</term>
					<listitem>
						<para>Color to use for scalebar background, not the image background.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>COLOR [r][g][b]</term>
					<listitem>
						<para>Color to use for drawing all features if attribute tables are not used.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>IMAGECOLOR [r][g][b]</term>
					<listitem>
						<para>Color to initialize the scalebar with (i.e. background).</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>INTERLACE [true|false]</term>
					<listitem>
						<para>Should output images be interlaced?  Default is [on].</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>INTERVALS [integer]</term>
					<listitem>
						<para>Number of intervals to break the scalebar into.  Default is 4.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>LABEL</term>
					<listitem>
						<para>Signals the start of a <link linkend="label">LABEL</link> object</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>OUTLINECOLOR [r][g][b]</term>
					<listitem>
						<para>Color to use for outlining individual intervals.  Set any component to -1 for no outline which is the default.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>POSITION [ul|uc|ur|ll|lc|lr]</term>
					<listitem>
						<para>Where to place an embedded scalebar in the image. Default is lr.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>POSTLABELCACHE [true|false]</term>
					<listitem>
						<para>For use with embedded scalebars only.  Tells the MapServer to embed the scalebar after all labels in the cache have been drawn. Default is false.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>SIZE [x][y]</term>
					<listitem>
						<para>Size in pixels of the scalebar. Labeling is not taken into account.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>STATUS [on|off|embed]</term>
					<listitem>
						<para>Is the scalebar image to be created, and if so should it be embedded into the image? Default is off. <emphasis>(Please note that embedding scalebars require that you define a markerset. In essence the scalebar becomes a custom marker that is handled just like any other annotation.)</emphasis>
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>STYLE [integer]</term>
					<listitem>
						<para>Chooses the scalebar style. Valid styles are 0 and 1.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>TRANSPARENT [on|off]</term>
					<listitem>
						<para>Should the background color for the scalebar be transparent. Default is off.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>UNITS [feet|inches|kilometers|meters|miles]</term>
					<listitem>
						<para>Output scalebar units, default is miles. Used in conjunction with the map's units to develop the actual graphic. Note that decimal degrees are not valid scalebar units.</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</sect2>
		<sect2 id="web">
			<title>Web Object</title>
			<para>Defines how a web interface will operate.  Starts with the keyword WEB and terminates with the keyword END.</para>
			<variablelist>
				<varlistentry>
					<term>EMPTY [url]</term>
					<listitem>
						<para>URL to forward users to if a query fails. If not defined the value for ERROR is used</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>ERROR [url]</term>
					<listitem>
						<para>URL to forward users to if an error occurs. Ugly old MapServer error messages will appear if this is not defined</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>FOOTER [filename]</term>
					<listitem>
						<para>Template to use AFTER anything else is sent.  Multiresult query modes only.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>HEADER [filename]</term>
					<listitem>
						<para>Template to use BEFORE everything else has been sent. Multiresult query modes only.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>IMAGEPATH [path]</term>
					<listitem>
						<para>Path to the temporary directory fro writing temporary files and images. Must be writable by the user the web server is running as. Must end with a / or \ depending on your platform.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>IMAGEURL [path]</term>
					<listitem>
						<para>Base URL for IMAGEPATH.  This is the URL that will take the web browser to IMAGEPATH to get the images.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>LOG [filename]</term>
					<listitem>
						<para>File to log MapServer activity in. Must be writable by the user the web server is running as.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>MAXSCALE [double]</term>
					<listitem>
						<para>Maximum scale at which this interface is valid.  When a user requests a map at a bigger scale, MapServer automatically returns the map at this scale.  This effectively prevents user from zooming too far out.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>MAXTEMPLATE [file|url]</term>
					<listitem>
						<para>Template to be used if above the maximum scale for the app, useful for nesting apps.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>METADATA</term>
					<listitem>
						<para>This keyword allows for arbitrary data to be stored as name value pairs.  This is used with OGC WMS to define things such as layer title.  It can also allow more flexibility in creating templates, as anything you put in here will be accessible via template tags.</para>
						<para>Example:
						<screen>
METADATA
	title "My layer title"
	author "Me!"
END
						</screen>
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>MINSCALE [double]</term>
					<listitem>
						<para>Minimum scale at which this interface is valid. When a user reuqests a map at a smaller scale, MapServer automatically returns the map at this scale.  This effectively prevents the user from zooming in too far.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>MINTEMPLATE</term>
					<listitem>
						<para>Template to be used if above the minimum scale for the app, useful for nesting apps.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>TEMPLATE [filename|url]</term>
					<listitem>
						<para>Template file or URL to use in presenting the results to the user in an interactive mode (i.e. map generates map and so on ... )</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</sect2>
		<sect2 id="projection">
			<title>Projection Object</title>
			<para>To set up projections you must define two projection objects: one for the output image (In the <link linkend="map">MAP</link> object) and one for each layer (In the <link linkend="layer">LAYER</link> objects) to be projected. Projection objects simply consist of a series of PROJ.4 keywords. Here is an example defining UTM zone 15, NAD83:</para>
			<programlisting>
PROJECTION
  "proj=utm"
  "ellps=GRS80"
  "zone=15"
  "north"
  "no_defs"
END
			</programlisting>
			<para>Geographic coordinates are defined as:</para>
			<programlisting>
PROJECTION
  "proj=latlong"
END
			</programlisting>
			<para>See the <ulink url="http://www.remotesensing.org/proj/">PROJ.4</ulink> user guides for complete descriptions of supported projections and coordinate systems. </para>
		</sect2>
	</sect1>
	<sect1 id="symbology">
		<title>Symbology Reference</title>
		<para>This section explains how to work with and define symbology in MapServer.</para>
		<sect2>
			<title>Notes</title>
			<itemizedlist>
				<listitem>
					<para>Symbol definitions can be included within the main MapFile or, more commonly, in a separate 
file.  Symbol definitions in a separate file are designated using the <link linkend="symbolset">SYMBOLSET</link> keyword, as part of the <link linkend="map">Map Object</link>. This recommended setup is ideal for re-using symbol definitions across multiple MapServer applications.</para>
				</listitem>
				<listitem>
					<para>There are 3 main types of symbols in MapServer: Markers, Shadesets, and Lines.</para>
				</listitem>
				<listitem>
					<para>Symbol 0 is always the degenerate case for a particular class of symbol.  For points, symbol 0  is a single pixel, for shading (i.e. filled polygons) symbol 0 is a solid fill, and for lines, symbol 0 is a single pixel wide line.</para>
				</listitem>
				<listitem>
					<para>Symbol definitions contain <emphasis>no</emphasis> color information, colors are set within <link linkend="class">CLASS</link> objects.</para>
				</listitem>
				<listitem>
					<para>There is a maximum of 64 symbols per file.  This can be changed by editing mapsymbol.h and changing the value of MS_MAXSYMBOLS at the top of the file.</para>
				</listitem>
			</itemizedlist>
		</sect2>
		<sect2>
			<title>Syntax</title>
			<variablelist>
				<varlistentry>
					<term>ANTIALIAS [true|false]</term>
					<listitem>
						<para>Should TrueType fonts be antialiased.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>CHARACTER [char]</term>
					<listitem>
						<para>Character used to reference a particular TrueType font character.  You'll need to figure out the mapping from the keyboard character to font character.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>FILLED [true|false]</term>
					<listitem>
						<para>Sets the symbol to be filled with a user defined color (See the <link linkend="class">CLASS</link> object).  For marker symbols, if <link linkend="outlinecolor">OUTLINECOLOR</link> was specified then the symbol is outlined with it.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>FONT [string]</term>
					<listitem>
						<para>Name of TrueType font to use as defined in the <link linkend="fontset">FONTSET</link>.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>GAP [int]</term>
					<listitem>
						<para>Given in pixels.  This defines a distance between symbols for TrueType lines.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>IMAGE [string]</term>
					<listitem>
						<para>Image (GIF or PNG) to use as a marker or brush for type PIXMAP symbols.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>NAME [string]</term>
					<listitem>
						<para>Alias for this font to be used in CLASS objects</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>POINTS [x y] [x y] ... END</term>
					<listitem>
						<para>Signifies the start of the definition of points that make up a vector symbol or that define the x and y radius of an ellipse symbol.  The end of this section is signified with the keyword END. Coordinates are given in pixels and define the default size of the symbol before any scaling.  You can create non-contiguous paths by inserting negative coordinates at the appropriate place. For ellipse symbols you provide a single point that defines the x and y radius of an ellipse.  Circles are created when x and y are equal.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>STYLE [num on] [num off] [num on] ... END</term>
					<listitem>
						<para>Defines a dash style or pattern.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>TRANSPARENT [color index]</term>
					<listitem>
						<para>Sets a transparent color for the input GIF image for pixmap symbols, or determines whether all shade symbols should have a transparent background. For shade symbols it may be desirable to have background features "show through" a transparent hatching pattern, creating a more complex map.  By default a symbol's background is the same as the parent image (i.e. color 0).  This is user configurable.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>TYPE [vector|ellipse|pixmap|truetype|simple]</term>
					<listitem>
						<para>
							<itemizedlist>
								<listitem>
									<para>vector: a simple drawing is used to define the shape of the symbol.</para>
								</listitem>
								<listitem>
									<para>ellipse: radius values in the x and y directions define an ellipse.</para>
								</listitem>
								<listitem>
									<para>pixmap: a user supplied GIF image will be used as the symbol.</para>
								</listitem>
								<listitem>
									<para>truetype: TrueType font to use as defined in the <link linkend="fontset">FONTSET</link>.</para>
								</listitem>
							</itemizedlist>
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</sect2>
		<sect2 id="examples">
			<title>Examples</title>
			<para>Here are some examples illustrating the various ways to create symbols in MapServer:</para>
			<example>
				<title>Dashed Line</title>
				<programlisting>
SYMBOL
  NAME 'dashed1'
  TYPE ELLIPSE
  POINTS 1 1 END
  FILLED
  STYLE 10 5 5 10 END
END
</programlisting>
			<para>This creates a dashed line with 10 pixels on, 5 off, 5 on, 10 off ...</para>
			</example>
			<example>
				<title>TrueType font marker symbol</title>
					<programlisting>
SYMBOL
  NAME "natcap"
  TYPE TRUETYPE
  FONT geo
  FILLED
  ANTIALIAS
  CHARACTER "&#38;#114;"
END
					</programlisting>
					<para>This symbol is a star, used to represent the national capital, hence the name.  The font name in defined in the <link linkend="fontset">FONTSET</link> file.  The code number "114" varies, you can use MS Windows' character map to figure it out, or guestimate.</para>
			</example>
			<example>
				<title>Vector triangle marker symbol</title>
				<programlisting>
SYMBOL
  NAME "triangle"
  TYPE vector
  POINTS
    0 4
    2 0
    4 4
    0 4
  END
END
				</programlisting>
				<para>This is fairly straight forward.  Note that to have 3 sides you need 4 points, hence the first and last points are identical.</para>
			</example>
			<example>
				<title>Non-contiguous vector marker symbol (Cross)</title>
				<programlisting>
SYMBOL
  NAME "cross"
  TYPE vector
  POINTS
    2 0
    2 4
    -99 -99
    0 2
    4 2
  END 
END
				</programlisting>
				<para>This example draws a cross, that is 2 lines (vectors) that are not connected end-to-end (Like the triangle in the previous example).  The negative values separate the two.</para>
			</example>
			<example>
				<title>Circle vector symbol</title>
				<programlisting>
SYMBOL
  NAME "circle"
  TYPE ellipse
  FILLED
  POINTS
    1 1
  END
END
				</programlisting>
				<para>A simple filled circle. Using non-equal values for the point will give you an actual ellipse.</para>
			</example>
			<example>
				<title>Downward diagonal fill</title>
				<programlisting>
SYMBOL   
  NAME "downwarddiagonalfill"
  TYPE vector
  TRANSPARENT 0
  POINTS
    0 1
    1 0
  END   
END
				</programlisting>
			</example>
		</sect2>
	</sect1>
</article>
