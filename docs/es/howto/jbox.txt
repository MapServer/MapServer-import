<div class="toc"><p><b>Table of Contents</b></p><dl><dt><a href="#intro">Introduction</a></dt><dt><a href="#features">jBox Features</a></dt><dt><a href="#require">Requirements</a></dt><dt><a href="#install">Installing the Software</a></dt><dd><dl><dt><a href="#unpack">Obtaining jBox</a></dt><dt><a href="#position">Positioning the Files</a></dt></dl></dd><dt><a href="#integrate">Integrating the jBox applet with an existing MapServer application</a></dt><dd><dl><dt><a href="#nameform">Add a name attribute to the html form</a></dt><dt><a href="#addvars">Add a hidden variable to the form</a></dt><dt><a href="#addjs">Add JavaScript functions</a></dt><dt><a href="#replacedef">Replace output map image definition</a></dt><dd><dl><dt><a href="#d45e413">A Closer Look</a></dt></dl></dd></dl></dd><dt><a href="#firstrun">A First Run</a></dt><dt><a href="#finetune">Fine-tuning with JavaScript</a></dt><dd><dl><dt><a href="#box_on_off">Turning Box Dragging On and Off</a></dt></dl></dd><dt><a href="#parameters">Optional jBox Parameters</a></dt><dt><a href="#methods">Public Methods</a></dt><dt><a href="#jscript_func">JavaScript Functions</a></dt><dt><a href="#adv_features">Advanced Features</a></dt><dd><dl><dt><a href="#d45e758">Image Swapping</a></dt><dt><a href="#d45e777">Distance Measuring</a></dt><dt><a href="#d45e812">Cursor Coordinate Display</a></dt></dl></dd><dt><a href="#acknowledgments">Acknowledgments</a></dt><dd><dl><dt><a href="#rhistory">Document Changes</a></dt></dl></dd></dl></div><div class="sect1"><div class="titlepage"><div><h2 class="title"><a name="intro"></a>Introduction</h2></div></div><p>

    The jBox Java applet provides
    interface enhancements to web pages driven by either the MapServer
    CGI or MapServer/MapScript. This document describes how to add 
    jBox to existing MapServer CGI pages. Users 
    working with PHP MapScript may find the Rosa
    Java applet more convenient. <a href="http://www2.dmsolutions.ca/mapserver/rosa/index.html" target="_top">
    DM Solutions - Rosa Introduction.</a> Rosa
    provides functionality similar to jBox 
    but with an interface oriented more toward PHP scripted pages.
  </p><p>
    jBox runs entirely on the client computer and is therefore 
    independent of the web server.
    In order for a client browser to run a Java applet, a Java Virtual Machine (VM), 
    must be installed on the client machine. (A Java VM may also be referred to as a 
    "Java Runtime Environment" (JRE))
    Microsoft Windows used to ship with Microsoft's VM, however this is no longer
    the case due to a lawsuit between Sun and Microsoft. Sun's Java VM can be downloaded at:
    <a href="http://java.sun.com/j2se/downloads/index.html" target="_top">J2SE Downloads</a>
  </p><p>
    jBox has historically run well on Microsoft Windows / 
    Internet Explorer clients,
    however newer versions of Windows are not shipping with a Java VM, as noted above. And
    newer versions of Windows have increasingly restrictive default security settings in 
    Internet Explorer, which may not initially allow Java applets 
    (or any other "Active Content") to run. jBox will
    generally run under Linux browsers (Netscape, Mozilla, Konqueror 3.1+) 
    assuming a Java VM is installed. jBox has not run on Macintosh 
    clients in the past, however Safari on OSX should support jBox.
  </p><p>

    jBox works with JPEG and GIF images. jBox also
    works with PNG images if the client computer has Sun's JRE 1.4.x installed. 
    jBoxPNG 
    supports PNG images on computers with older VMs by way of the
    <a href="http://www.sixlegs.com/" target="_top">sixlegs PNG Library</a>. 
    The jBoxPNG class and source is included with the jBox distribution zip file,
    and operates identically to jBox. jBoxPNG requires 
    that the sixlegs class tree be installed (see "Installing the Software", below).
  </p></div><div class="sect1"><div class="titlepage"><div><h2 class="title"><a name="features"></a>jBox Features</h2></div></div><p>
    The jBox applet adds the following functionality to
    MapServer/MapScript pages:
  </p><div class="variablelist"><p class="title"><b>Features</b></p><dl><dt><span class="term">Box zooming</span></dt><dd><p>Users can "drag a box" over a map using their mouse and
        then zoom in to the extent defined by the box.</p></dd><dt><span class="term">Panning</span></dt><dd><p>Users can dynamically pan the map image using their mouse.</p></dd><dt><span class="term">Box querying</span></dt><dd><p>Users can "drag a box" over a map using their mouse and
        execute attribute queries for all features that intersect the
        box.</p></dd><dt><span class="term">Map image swapping</span></dt><dd><p>Requests for new maps can be loaded directly into the
        currently displayed page, without reloading the rest of the
        page.</p></dd><dt><span class="term">Distance measuring</span></dt><dd><p>A series of distances can be measured by drawing a polyline
		  on the map. Individual segment distances and a cumulative total
		  distance are returned.</p></dd><dt><span class="term">Cursor coordinate display</span></dt><dd><p>The coordinates of the cursor location can be displayed.

              (see <a href="http://www.kralidis.ca/gis/mapserv/mapplet/howto.htm" target="_top">

                   http://www.kralidis.ca/gis/mapserv/mapplet/howto.htm </a> for details)

        </p></dd></dl></div></div><div class="sect1"><div class="titlepage"><div><h2 class="title"><a name="require"></a>Requirements</h2></div></div><p>
    This document assumes no previous knowledge or experience with
    Java programming or applet installation.  It does, however, assume
    the following:
  </p><div class="itemizedlist"><ul type="disc"><li><p>
        Familiarity with fundamental aspects of managing the
        MapServer software and the web server.
      </p></li><li><p>
        Basic familiarity with the JavaScript browser scripting language.  
        If this is a limitation, JavaScript reference materials can be found on the web
        (the <a href="http://devedge.netscape.com/docs/manuals/index.html?content=javascript.html" target="_top">
        Netscape JavaScript documentation pages</a> are a good place to start).
      </p></li><li><p>

        The ability to download and unzip files from the Internet.
      </p></li><li><p>
        The MapServer software is installed and functioning on a web server.
      </p></li><li><p>
        The MapServer demo application is running on your server (see
        both the download and documentation sections of the <a href="http://MapServer.gis.umn.edu" target="_top">MapServer web-site</a>).
        If you don't have the demo running, but you do have your own
        MapServer application in place, you probably won't have any
        difficulty adapting the instructions given here to your
        application.
      </p></li></ul></div></div><div class="sect1"><div class="titlepage"><div><h2 class="title"><a name="install"></a>Installing the Software</h2></div></div><div class="sect2"><div class="titlepage"><div><h3 class="title"><a name="unpack"></a>Obtaining jBox</h3></div></div><p>
     jBox can be obtained at 
    <a href="http://MapServer.gis.umn.edu/contributed.html" target="_top">
    http://MapServer.gis.umn.edu/contributed.html</a>.
    Click on the jBox link and save the zip file to a local disk.
  </p><p>

      Unpack the archive file into a new temporary directory.  How you go about this will
      depend on your operating system.
    </p></div><div class="sect2"><div class="titlepage"><div><h3 class="title"><a name="position"></a>Positioning the Files</h3></div></div><p>
      Refer to the README file for file descriptions. The 
      <tt>.class</tt> files are the Java byte code
      that is required in order to incorporate the applet into your
      pages. The <tt>com/sixlegs/image/png/*.class</tt> files are required 
    	by the PNG version of <tt>jBox.java</tt> (<tt>jBoxPNG.java</tt>). 
    </p><p>

	Alternatively, the <tt>.jar</tt> file(s) can be used rather than the
	<tt>.class</tt> files. Jars
	are Java ARchives (similar to <tt>.tar</tt> or <tt>.zip</tt> files)
	that contain multiple <tt>.class</tt> files in a compressed format. Jars have
	the potential to improve performance by reducing the number of requests that the browser
	makes for individual <tt>.class</tt> files. Each <tt>.class</tt>

	file requires seperate request, but a <tt>.jar</tt> file can provide multiple classes in
	response to a single request. Additionally, a <tt>.jar</tt> file may be smaller than
	<tt>.class</tt> files due to compression. However in some cases (e.g.
	<tt>png.jar</tt>) the <tt>.jar</tt> may supply many more classes than
	the applet actually requires.
    </p><p>

     	The <tt>.java</tt> files are the Java source code for the applet. Compiling 
     	the source also requires the LiveConnect classes. 
     	These files are not required to run jBox or  jBoxPNG.java and do
	not need to be in your web document directory tree.
    </p><p>
      To make the applet available to your server, you need simply to
      place the jar file(s) or (class files) somewhere in your web document tree.  For
      example, if your document tree is rooted at
    </p><pre class="programlisting">
    /usr/local/htdocs
        or
    /Inetpub/wwwroot/
    </pre><p>
      then you might make add a couple of subdirectories under htdocs
      or wwwroot so that you get a path like:
    </p><pre class="programlisting">
    /usr/local/htdocs/java/jBox
        or
    /Inetpub/wwwroot/java/jBox
    </pre><p>

      Then place the jar files in the jBox subdirectory.
      For JPEG and GIF files, only <tt>jBox.jar</tt> is required. 
      PNG images require <tt>jBoxPNG.jar</tt> 
      and also the sixlegs class support <tt>png.jar</tt>.
   </p><p>
      Note that the jar files themselves and the directory in which
      you place them all need to be accessible and readable by the user
      that your web server runs as (often user "nobody").  Make sure
      that the file and directory permissions are properly set, and
      that the web server is properly configured for this.
    </p></div></div><div class="sect1"><div class="titlepage"><div><h2 class="title"><a name="integrate"></a>Integrating the jBox applet with an existing MapServer application</h2></div></div><p>
	 We'll use the 
    MapServer demo as an example. This example outlines only the minimal 
    steps required to integrate jBox into a 
    MapServer page. More sophisticated applications of jBox
    are discussed later in this document.
  </p><p>

    The only changes will be to the html template
    file that defines how your map pages are displayed.  For the
    MapServer demo, this is the file <tt>demo.html</tt>.
    There are essentially four steps:
  </p><div class="itemizedlist"><ul type="disc"><li><p>add a name attribute to the form that controls the map interface,</p></li><li><p>add a hidden form variable to the form,</p></li><li><p>add a couple of small JavaScript functions to the &lt;head&gt; section,</p></li><li><p>replace the output map image definition with the applet definition.</p></li></ul></div><p>
    Each of these steps is addressed separately below.
  </p><div class="sect2"><div class="titlepage"><div><h3 class="title"><a name="nameform"></a>Add a name attribute to the html form</h3></div></div><p>
      The html form that controls the map interface in
      <tt>demo.html</tt> is defined by this line:
    </p><pre class="programlisting">

      &lt;form method=GET action="[program]"&gt;
    </pre><p>
      The addition of the name attribute enables us to
      refer to the form by name in JavaScript functions.  
      So change the line above to look like this:
    </p><pre class="programlisting">
      &lt;form name="mapserv" method=GET action="[program]"&gt;
    </pre></div><div class="sect2"><div class="titlepage"><div><h3 class="title"><a name="addvars"></a>Add a hidden variable to the form</h3></div></div><p>
      Next, we need to add an html form variable and initialize it with default values.
      This variable will hold a pair of screen
      coordinates that define the bounds of a box the user drags with their mouse. 
      Before the form is submitted to MapServer these coordinates will be replaced
      based on the user's mouse actions. Add the following line to the list of 
      hidden form variables near the bottom of the <tt>demo.html</tt> page:
    </p><pre class="programlisting">

      &lt;input type="hidden" name="imgbox" value="-1 -1 -1 -1"&gt;
    </pre></div><div class="sect2"><div class="titlepage"><div><h3 class="title"><a name="addjs"></a>Add JavaScript functions</h3></div></div><p>
      Now we need to add two JavaScript functions to enable
      communication with the applet.  Put these in the &lt;head&gt;
      section of <tt>demo.html</tt>, which looks like this
      by default:
    </p><pre class="programlisting">&lt;head&gt;&lt;title&gt;MapServer Demo Interface&lt;/title&gt;&lt;/head&gt;</pre><p>

      Change that to look like this:
    </p><pre class="programlisting">
    &lt;head&gt;
      &lt;title&gt;MapServer Demo Interface&lt;/title&gt;

      &lt;SCRIPT LANGUAGE="JavaScript"&gt;

        function setbox_handler(name, minx, miny, maxx, maxy) {
          document.mapserv.imgbox.value = minx + " " + miny + " " + maxx + " " + maxy;
          document.mapserv.imgxy.value = minx + " " + miny;
          // Additional code can go here prior to the form submit, below.
          // For example, form validation code.
          document.mapserv.submit();
        }

        function seterror_handler(message) { 
          alert(message);
        }

      &lt;/SCRIPT&gt;

    &lt;/head&gt;
    </pre><p>
      Note the use of "mapserv" on the left side of the assignment 
      statements in the <tt>setbox_handler</tt> function:
    </p><pre class="programlisting">
      document.mapserv.imgbox.value = ...
      document.mapserv.imgxy.value = ...
    </pre><p>
      This is the name attribute that we assigned to the form above.
      The <tt>setbox_handler</tt> function is called by 
      jBox and sets the values of
      the hidden variable, and the
      <tt>seterror_handler</tt> function provides a means for
      the applet to pass error messages out to the user.
      However, you don't even really need to understand
      the functions, as you will never call them yourself - that is up
      to the applet.  
    </p></div><div class="sect2"><div class="titlepage"><div><h3 class="title"><a name="replacedef"></a>Replace output map image definition</h3></div></div><p>

        Finally, we need to replace the output map image definition
        with the applet definition.  Find the following html snippet
        in <tt>demo.html</tt> (it may be strung out all on
        one line):
      </p><pre class="programlisting">
        &lt;tr&gt;
          &lt;td colspan="2"&gt;
            &lt;INPUT NAME="img" TYPE="image" SRC="[img]" width=600 height=600 border=0&gt;
          &lt;/td&gt;

        &lt;/tr&gt;
      </pre><p>
        This is the definition of an html table cell that contains the
        output map image generated by MapServer.  We need to replace
        this with the applet definition.  Change the above block so
        that it looks like this instead:
      </p><pre class="programlisting">
        &lt;tr&gt;
          &lt;td colspan="2"&gt;
            &lt;applet 
                  codebase="/java/jBox"
                  archive="jBox.jar"
                  code="jBox.class"
                  width="600"
                  height="600" 
                  name="jBox" 
                  MAYSCRIPT&gt;

              &lt;param name="image" value="http://[host][img]"&gt;
            &lt;/applet&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
      </pre><p>
        Note: For PNG image support, use 
       <pre class="programlisting">

        code="jBoxPNG.class"
        archive="jBoxPNG.jar,png.jar"
       </pre>
      above.
      </p><p>
        Let's pick this applet definition apart a bit.
      </p><div class="sect3"><div class="titlepage"><div><h4 class="title"><a name="d45e413"></a>A Closer Look</h4></div></div><div class="variablelist"><p class="title"><b>The &lt;applet&gt; tag</b></p><dl><dt><span class="term">codebase</span></dt><dd><p>
                Specifies the path, relative to the html document
                root, to the directory containing the needed class file(s). If
                you put your class files in a directory structure other than
                <tt>/java/jBox</tt>, you will
                need to change the codebase attribute accordingly.
              </p></dd><dt><span class="term">archive</span></dt><dd><p>

                Specifies the name of the Java ARchive (jar) file which contains the
                Java class files. archive can be omitted if you are placing
                the *.class files in the codebase directory instead of using a jar file.
              </p></dd><dt><span class="term">code</span></dt><dd><p>
                Specifies the name of the class file that is to be executed.
              </p></dd><dt><span class="term">width</span></dt><dd><p>
                Defines the width and height (in pixels) of the space to be allocated to
                the applet on the html page.  This value should be the same as
                the width and height of your output map image, which is set to 600x600 in
                <tt>demo.map</tt>. Alternately, you can use MapServer's template
                substitution and define the width and height as:
               </p><pre class="programlisting">
        width=[mapwidth] height=[mapheight]
                </pre></dd><dt><span class="term">name</span></dt><dd><p>

                Assigns a name to the applet for use within the html page.  This
                is handy for use in referring to the applet within javaScript code.
              </p></dd><dt><span class="term">MAYSCRIPT</span></dt><dd><p>
                Permits the Java applet to access JavaScript functions (required for the jBox).  
                This attribute prevents an applet from accessing JavaScript on a page without the knowledge of the page author. 
                Attempting to access JavaScript from an applet that does not have the MAYSCRIPT attribute generates an exception. 
                The MAYSCRIPT tag is needed only for Java to access JavaScript; it is not needed for JavaScript to access Java.
              </p></dd></dl></div><p>
          Parameters to be passed to the applet are specified in
          &lt;param&gt; tags embedded between the opening and
          closing &lt;applet&gt; tags.  Here we have defined only one:
        </p><div class="variablelist"><p class="title"><b>Applet parameters</b></p><dl><dt><span class="term">image</span></dt><dd><p>

                Specifies the map image to be loaded into the applet.  Must be a
                fully-qualified URL.  The "[host]" and "[img]" specifiers used here are
                standard MapServer template substitutions, and will be swapped
                out for the appropriate values when the MapServer parses
                <tt>demo.html</tt>.
              </p></dd></dl></div></div></div></div><div class="sect1"><div class="titlepage"><div><h2 class="title"><a name="firstrun"></a>A First Run</h2></div></div><p>
    Load the initilization page (<tt>demo_init.html</tt>) and hit the
    Initialize button. Select "Zoom In", and you can now define
    the zoom extent by dragging a box over the map. (You'll need to have
    the Browse map button on.)
  </p><p>
    Additionally, if you turn on the Query multiple
    features button, drag a box, and you'll get back results
    for all of the features that intersect the bounds of your box.
  </p></div><div class="sect1"><div class="titlepage"><div><h2 class="title"><a name="finetune"></a>Fine-tuning with JavaScript</h2></div></div><div class="sect2"><div class="titlepage"><div><h3 class="title"><a name="box_on_off"></a>Turning Box Dragging On and Off</h3></div></div><p>
      It is logical to drag a box across a part of the map to zoom in,
      or to select objects to query. But what about zooming out
      (mode=browse, zoomdir=-1), or re-centering the map (mode=browse,
      zoomdir=0)?  In these 
      operations the box doesn't do us much good. Worse yet, dragging
      a box in either of these situations would cause a zoom-in
      regardless  of the zoomdir setting.
    </p><p>

      Rather than expecting the user to choose between dragging or
      clicking dependent on context, you may wish to use the jBox boxon() and
      boxoff() methods to control when box dragging is enabled and when it
      is not. As in the prior example, we will assume that the name of the 
      applet was declared as "jBox", then the basic JavaScript syntax for 
      calling the methods is:
    </p><pre class="programlisting">
      document.jBox.boxoff();
    </pre><p>
      In the MapServer demo, you might place the code in an event
      handler in a form control.  For example:
    </p><pre class="programlisting">
       Zoom Out &lt;input type=radio
                name=zoomdir
                value=-1 
                onClick="document.jBox.boxoff();"
                [zoomdir_-1_check] &gt;
    </pre><p>
      In the above example, when the user switches to the "Zoom Out" mode
      (zoomdir=-1), box dragging is turned off. Obviously you would need to
      add additional calls in other form controls to turn box dragging on
      and off as is appropriate to the operation. The following example shows how to
      turn panning (image dragging) on.
    </p><pre class="programlisting">

       Pan &lt;input type=radio 
           name=zoomdir
           value=0 
           onClick="document.jBox.dragon();" 
           [zoomdir_0_check] &gt;
    </pre><p>
		The state of boxon(), dragon(), etc. is lost each time the
		page is submitted. Typically you would use some Javascript to
		reset the state as appropriate to the current mode.
    </p></div></div><div class="sect1"><div class="titlepage"><div><h2 class="title"><a name="parameters"></a>Optional jBox Parameters</h2></div></div><p>
    So far we have passed one parameter to the
    jBox, as seen in the following line
    from <tt>demo.html</tt>:
  </p><pre class="programlisting">
    &lt;param name="image" value="http://[host][img]"&gt;

  </pre><p>
    The "image" parameter must be specified in order for the
    jBox to function.  There are several
    optional parameters that can be passed as a means of customizing
    your jBox appearance and
    functionality.  The syntax for specifying these parameters in
    <tt>demo.html</tt> is the same as shown above. A
    tag with the general form
  </p><pre class="programlisting">
    &lt;param name="somename" value="somevalue"&gt;
  </pre><p>
    must appear between the opening and closing applet tags.  
    A list of the optional jBox parameters, their purpose 
    and valid values is given below.
  </p><div class="variablelist"><p class="title"><b>Optional parameters</b></p><dl><dt><span class="term">jitter</span></dt><dd><p>

          Specifies how far (in pixels) a user needs to drag their
          mouse before jBox will
          believe that they are actually dragging a box.  This
          prevents poorly-executed single-clicks at the mouse from
          being interpreted as dragged boxes.  Values should be
          integers.  Default is five.
       </p></dd><dt><span class="term">color</span></dt><dd><p>
          Specifies the color to use when drawing the mouse-dragged
          box or the mouse-clicked crosshair cursor.  Color values may
          be specified using either a comma-delimited RGB triplet (for
          example, value="255,255,255" draws a white box), or the
          English name for one of thirteen predefined colors (black,
          blue, cyan, darkGray, gray, green, lightGray, magenta,
          orange, pink, red, white or yellow).  Default is red.
        </p></dd><dt><span class="term">thickness</span></dt><dd><p>
          Specifies the thickness (in pixels) of the line to use in
          drawing the box (does not affect the crosshair cursor or the
          measure polyline ). Values should be integers.  Default is one.
        </p></dd><dt><span class="term">cursorsize</span></dt><dd><p>
          Specifies the radius (in pixels) of the crosshair cursor.
          Values should be integers.  Default is four.
        </p></dd><dt><span class="term">verbose</span></dt><dd><p>
          Enables/disables cursor location reporting. 
          Valid values are "true" or "false". (Mapplet used "on" and "off")
          Default is "false".  Note that in order to use this feature, 
          three additional JavaScript functions must be defined:
          	<div class="variablelist"><dl><dt><span class="term">mouseenter_handler(name)</span></dt><dd><p>

				 		Called when mouse enters applet image area.
				 	  </p></dd><dt><span class="term">mouseexit_handler(name)</span></dt><dd><p>
				 		Called when mouse leaves applet image area.
				 	  </p></dd><dt><span class="term">mousemove_handler(name, x, y)</span></dt><dd><p>
				 		Called when mouse moves within applet image area and provides 
				 		cursor coordinates in screen pixels. Typically you put code in 
				 		this function to convert the pixel coordinates to real-world coordinates 
				 		and then display the coordinates in the browser's status line.
				 	  </p></dd></dl></div>
        </p></dd><dt><span class="term">box</span></dt><dd><p>
          Initial box drawing status.  Valid values are "true" or "false".  
          Default is "true".  If set to "false", any mouse-button
          action inside the jBox applet
          interface will always be represented by the crosshair cursor.
          The public methods boxon() and boxoff() are used to turn box 
          drawing on and off once the applet has been initialized.
        </p></dd><dt><span class="term">drag</span></dt><dd><p>

          Initial drag status. Valid values are "true" or "false".  
          Default is "false". The public methods dragon() and dragoff() 
          are used to turn box drawing on and off once the applet has
          been initialized.
        </p></dd><dt><span class="term">busyimage</span></dt><dd><p>
          Specifies an image to display while the
          jBox is working.  Value given
          must be a fully-qualified URL.  Generally only useful when
          used with the <a href="#swap" target="_top">setimage</a> applet method.
        </p></dd></dl></div></div><div class="sect1"><div class="titlepage"><div><h2 class="title"><a name="methods"></a>Public Methods</h2></div></div><div class="variablelist"><dl><dt><span class="term">boxon()</span></dt><dd><p>toggles box drawing on.
        </p></dd><dt><span class="term">boxoff()</span></dt><dd><p>toggles box (and line) drawing off.
        </p></dd><dt><span class="term">lineon()</span></dt><dd><p>toggles line drawing on, and box drawing off.
        </p></dd><dt><span class="term">lineoff()</span></dt><dd><p>synonym for <tt>boxoff()</tt>, turns both line and box drawing off.
        </p></dd><dt><span class="term">dragon()</span></dt><dd><p>

          turns "Panning" on. When the mouse button is released, screen 
          coordinates for a new map center point are returned.
        </p></dd><dt><span class="term">dragoff()</span></dt><dd><p>synonym for <tt>boxoff()</tt>
         </p></dd><dt><span class="term">setimage(string)</span></dt><dd><p>displays the image loaded from the passed url.
        </p></dd><dt><span class="term">setcursor(string)</span></dt><dd><p>sets the cursor to one of crosshair, hand or default
        </p></dd><dt><span class="term">version()</span></dt><dd><p>returns jBox version number string</p></dd></dl></div></div><div class="sect1"><div class="titlepage"><div><h2 class="title"><a name="jscript_func"></a>JavaScript Functions</h2></div></div><p>
	  jBox uses <a href="http://wp.netscape.com/eng/mozilla/3.0/handbook/plugins/" target="_top"> LiveConnect</a>

	  to communicate between the jBox Java applet and JavaScript functions in the HTML page. When jBox needs
	  to communicate back to the HTML page, it calls a JavaScript function. The following is a list 
	  of JavaScript functions that may be called be jBox.
	</p><div class="variablelist"><p class="title"><b>JavaScript Functions</b></p><dl><dt><span class="term">setbox_handler(name, minx, miny, maxx, maxy, redraw)</span></dt><dd><p>
        	This function receives the user's mouse coordinates from jBox and does appropriate
        	processing of the coordinates: either copies them into form variables in preparation 
        	for a form-submit, or processes them prior to a setimage() call.
        </p></dd><dt><span class="term">seterror_handler(message)</span></dt><dd><p>
			This provides a method for jBox to pass error messages back to the containing page. 
			Below is a typical example:
        </p><pre class="programlisting">
function seterror_handler(message) { 
	alert(message); 
}
      </pre></dd><dt><span class="term">reset_handler(name, minx, miny, maxx, maxy)</span></dt><dd><p>
          reset_handler(name, minx, miny, maxx, maxy);
        </p></dd><dt><span class="term">mouseenter_handler(name)</span></dt><dd><p>

        	 Called when mouse enters applet image area.
        </p></dd><dt><span class="term">mouseexit_handler(name)</span></dt><dd><p> Called when mouse leaves applet image area.
        </p></dd><dt><span class="term">mousemove_handler(name, x, y)</span></dt><dd><p>
        	 jBox uses this function to pass cursor coordinates back to the HTM page. The function 
        	 will typically convert the pixel coordinates to real-world coordinates and display them
        	 in the browser.
        </p></dd><dt><span class="term">measure_handler(name, s, t, n, a)</span></dt><dd><p>
        	 jBox uses this function to pass distance measurements back to the HTM page. The function 
        	 will typically convert the pixel distances to real-world coordinates and display them 
        	 in the browser.
        </p></dd></dl></div></div><div class="sect1"><div class="titlepage"><div><h2 class="title"><a name="adv_features"></a>Advanced Features</h2></div></div><div class="sect2"><div class="titlepage"><div><h3 class="title"><a name="d45e758"></a>Image Swapping</h3></div></div><p>
  	 		The <tt>setimage()</tt> method allows the jBox applet's image to be replaced without 
  	 		reloading the whole page. The only parameter to setimage() is the URL of the 
  	 		new image to be displayed. In a typical CGI MapServer application this image 
  	 		is created by mapserv in "map" mode. An example JavaScript code snippet follows:
  	 	</p><pre class="programlisting">	 
	var url;
	url = ";http://www.somedomain.com/cgi-bin/mapserv";+
		";?mode=map"; +
		";&amp;map="; + mapfile +
		";&amp;mapext="; + extent.join(";+";) +
		";&amp;mapsize="; + width + ";+"; + height +
		";&amp;layers="; + layerlist;
	document.jBox.setimage(url);
		</pre><p>

	 		There are obvious benefits in displaying a new image without reloading the 
	 		whole page, however there are a couple trade off's to consider: 
  	 	</p><div class="itemizedlist"><ul type="disc"><li><p>
				   Since MapServer is no longer creating a whole new page from the template 
				   file, your JavaScript will have to take care of updating all of the 
				   other page elements that may have changed such as the reference map, 
				   scale bar, legend, map extent, etc.
  	 			</p></li><li><p>
	 				The browser's location no longer represents the current map. This means 
	 				that the browser's back button will not take the user back to the previous map. 
	 				Nor can the location be bookmarked or e-mailed.
  	 			</p></li></ul></div></div><div class="sect2"><div class="titlepage"><div><h3 class="title"><a name="d45e777"></a>Distance Measuring</h3></div></div><p>
    	  The distance measuring functionality is designed to mimic the "Measure" and "Ruler" tools 
    	  found in ArcView and MapInfo, respectively. As of jBox version 1.1, the distance tool also
    	  provides area calculation after the user has clicked three or more points. Distance measuring 
    	  mode is initiated with a call to <tt>lineon()</tt> and terminated with a call
    	  to <tt>lineoff()</tt> or <tt>boxoff()</tt> or <tt>boxon()</tt>.
    	  In distance  measuring mode jBox draws a polyline connecting the user's mouse clicks and returns a segment 
    	  distance, total distance, and calculated area to a JavaScript function named 
    	  "<tt>measure_handler()</tt>". Double-clicking resets the tool.
	 	</p><p>

	 	  The returned distance and area are in screen pixels and must be converted to real world
		  units appropriate for the map projection. Converting these numbers to meaningful values 
		  in an un-projected (latitude/longitude) map would require significant calculations, and 
		  is not discussed herein. The area and distance are calculated by simple Cartesian geometry 
		  formulas, and as such, are appropriate only for relatively small areas. 
	 	</p><p>
		  The JavaScript <tt>measure_handler()</tt> function must be declared before entering distance measuring mode. 
		  The function needs to convert the pixel values returned by jBox into real-world values 
		  and display them somewhere in the browser. A simple <tt>measure_handler()</tt> example is shown below. 
		  See <a href="http://www2.tetonwyo.org/mapserver" target="_top">http://www2.tetonwyo.org/mapserver</a> 
		  for a slightly more sophisticated example.
	 	</p><pre class="programlisting">
	function measure_handler(name, s, t, n, a) {
		// c = 1 / 72dpi / 12inches_per_foot * 1.0003state_plane_scale_factor
		var c = 0.0011577546296296;	// constant
		var f = [scale] * c;		// scale factor
		if ((s&gt;0) || (t&gt;0)) {
			defaultStatus = "This segment = " + s*f + ", Total = " + t*f + ", Number of vertices = " + n ;
		}
	}
		</pre></div><div class="sect2"><div class="titlepage"><div><h3 class="title"><a name="d45e812"></a>Cursor Coordinate Display</h3></div></div><p>

			See <a href="http://www.kralidis.ca/gis/mapserv/mapplet/howto.htm" target="_top">
			http://www.kralidis.ca/gis/mapserv/mapplet/howto.htm</a> for details.
		</p></div></div><div class="sect1"><div class="titlepage"><div><h2 class="title"><a name="acknowledgments"></a>Acknowledgments</h2></div></div><p>
	Most of jBox was written by Steve Lime. 
</p><p>
	Tom Kralidis <tt>&lt;<a href="mailto:tomkralidis at hotmail.com">tomkralidis at hotmail.com</a>&gt;</tt> contributed the coordinate display functions. 

</p><p>
	Rich Greenwood <tt>&lt;<a href="mailto:rich@greenwoodmap.com">rich@greenwoodmap.com</a>&gt;</tt> added the distance measuring / line drawing code.
</p><p>
	Ken Boss <tt>&lt;<a href="mailto:kenboss@dilbert.dnr.state.mn.us">kenboss@dilbert.dnr.state.mn.us</a>&gt;</tt> wrote the original version of this HOWTO.
</p><p>
	Eric Weisbender <tt>&lt;<a href="mailto:Weisbend@wapa.gov">Weisbend@wapa.gov</a>&gt;</tt> contributed to the development of jBoxPNG.

</p><p>
	If there are other contributors that I have not acknowledged here, please 
	contact me at <tt>&lt;<a href="mailto:rich@greenwoodmap.com">rich@greenwoodmap.com</a>&gt;</tt>.
</p><div class="sect2"><div class="titlepage"><div><h3 class="title"><a name="rhistory"></a>Document Changes</h3></div></div><p>
     <div class="revhistory"><table border="0" width="100%" summary="Revision history"><tr><th align="left" valign="top" colspan="3"><b>Revision History</b></th></tr><tr><td align="left">Revision : 1</td><td align="left">Date: 06/21/2004</td><td align="left">Author: Kari Geurts</td></tr><tr><td align="left" colspan="3">I added the Revision History section to this document.</td></tr></table></div>
  </p></div></div></div>
