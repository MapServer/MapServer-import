<P class=MsoNormal style="TEXT-JUSTIFY: inter-ideograph; MARGIN: 0cm 0cm 0pt; TEXT-ALIGN: justify">When developing J2EE web-applications is generally desired to deploy the entire application in a single WAR file containing all assets and required non-standard resources, such as additional libraries and drivers etc.:</P>
<P class=MsoNormal style="TEXT-JUSTIFY: inter-ideograph; MARGIN: 0cm 0cm 0pt; TEXT-ALIGN: justify">&nbsp;</P>
<UL>
<LI>
<DIV class=MsoNormal style="TEXT-JUSTIFY: inter-ideograph; MARGIN: 0cm 0cm 0pt; TEXT-ALIGN: justify"><o:p><SPAN style="mso-list: Ignore"><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;</SPAN></SPAN>JFreeChart</o:p></DIV></LI>
<LI>
<DIV class=MsoNormal style="TEXT-JUSTIFY: inter-ideograph; MARGIN: 0cm 0cm 0pt; TEXT-ALIGN: justify"><o:p>Batik (required by JFreeChart for SVG charts)</o:p></DIV></LI>
<LI>
<DIV class=MsoNormal style="TEXT-JUSTIFY: inter-ideograph; MARGIN: 0cm 0cm 0pt; TEXT-ALIGN: justify"><o:p><SPAN style="mso-list: Ignore"><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;</SPAN></SPAN>Struts and all its dependant libraries.</o:p></DIV></LI>
<LI>
<DIV class=MsoNormal style="TEXT-JUSTIFY: inter-ideograph; MARGIN: 0cm 0cm 0pt; TEXT-ALIGN: justify"><o:p><SPAN style="mso-list: Ignore"><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;</SPAN></SPAN>PostgreSQL Jdbc driver</o:p></DIV></LI>
<LI>
<DIV class=MsoNormal style="TEXT-JUSTIFY: inter-ideograph; MARGIN: 0cm 0cm 0pt; TEXT-ALIGN: justify"><o:p><SPAN style="mso-list: Ignore"><SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;</SPAN></SPAN>PostGIS</DIV></LI></UL></o:p>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><?xml:namespace prefix = o ns = "urn:schemas-microsoft-com:office:office" /><o:p>&nbsp;</o:p></P>
<P class=Default style="TEXT-JUSTIFY: inter-ideograph; MARGIN: 0cm 0cm 0pt; TEXT-ALIGN: justify">All of these are 100% implemented in Java and can therefore be deployed within the context (In J2EE a web-application is referred to as Context). JavaMapscript however is a wrapped native library and accessed via JNI (Java Native Interface). In Java native libraries can only be loaded once for a particular JVM instance. Since all contexts within a J2EE container (application server e.g. Tomcat) share the same JVM, attempting to load the same native library from a different context (or even the same context, if that context had been reloaded), would cause the native library to crash, as each context has its own ClassLoader who has no way of knowing that the library has already been loaded by a different context / class loader. To overcome this problem, Mapscript must be deployed separately from the context and installed in either the common or shared global context of the server (see <SPAN style="mso-field-code: ' REF _Ref105481562 h  * MERGEFORMAT '">Tomcat 5.5 Directory Structure below</SPAN>). Attempting to load a class or library from the shared context will cause it to be loaded through the shared class loader. This alone still not sufficiently resolves this issue.<o:p></P></o:p>
<P class=Default style="TEXT-JUSTIFY: inter-ideograph; MARGIN: 0cm 0cm 0pt; TEXT-ALIGN: justify"><o:p><FONT face="Times New Roman" size=3>&nbsp;</P></FONT><PRE class=MsoCaption style="MARGIN: 0cm 0cm 0pt">Tomcat 5.5 Directory Structure<BR>CATALINA_HOME<BR>├───bin<BR>├───common<BR>├───conf<BR>├───logs<BR>├───server<BR>├───shared<BR>│&nbsp;&nbsp; ├───classes (MapscriptLoader.class)<BR>│&nbsp;&nbsp; ├───lib (mapscript.jar)<BR>│&nbsp;&nbsp; └───mapscript (*.dll, *.so)<BR>│&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ├───fonts (*.ttf)<BR>│&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ├───nad<BR>│&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; └───symbols (*.sym, *.gif, *.png)<BR>├───temp<BR>├───webapps<BR>│&nbsp;&nbsp; ├───ROOT<BR>│&nbsp;&nbsp; └───cis (*.jsp, *.jspf, *.css)<BR>│&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ├───admin (*.jsp)<BR>│&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ├───images (*.gif, *.jpg, *.png)<BR>│&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ├───javascript (*.js)<BR>│&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ├───layercontrol (*.jsp)<BR>│&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ├───map (*.map)<BR>│&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ├───META-INF (context.xml)<BR>│&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ├───ms_tmp (*.gif)<BR>│&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; └───WEB-INF (*.xml, *.tld)<BR>│&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ├───classes (*.class)<BR>│&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; └───lib (*.jar)<BR>└───work<BR></PRE></o:p>
<P class=Default style="TEXT-JUSTIFY: inter-ideograph; MARGIN: 0cm 0cm 0pt; TEXT-ALIGN: justify"><o:p><FONT face="Times New Roman" size=3></FONT></o:p>&nbsp;</P>
<P class=Default style="TEXT-JUSTIFY: inter-ideograph; MARGIN: 0cm 0cm 0pt; TEXT-ALIGN: justify">A separate class is required to load the actual native library. The <SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 12.0pt">loadLibrary</SPAN><SPAN style="FONT-SIZE: 10pt; mso-bidi-font-size: 12.0pt"> </SPAN>statement must be either be contained in a singleton pattern or placed in a static block The solution provided by Umberto Nicoletti uses the former, but this example uses a static block instead, as this is easier to use and less error prone, because loading the native library within a static block located in the class definition will automatically ensure that the <SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 12.0pt">System.loadLibrary</SPAN> statement is only ever executed once without having to perform addition checks as necessary with a Singleton. Furthermore this method allows loading the library in the same manner most drivers are loaded in Java via&nbsp;<SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 12.0pt">Class.forName</SPAN>:<o:p></P>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 12.0pt"></SPAN>&nbsp;</P></o:p><o:p><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 12.0pt"></SPAN><PRE class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 12.0pt"><SPAN style="mso-tab-count: 1"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 12.0pt"><SPAN style="mso-tab-count: 1"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 12.0pt"><SPAN style="mso-tab-count: 1"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 12.0pt">public class MapscriptLoader<BR>{<BR><o:p></o:p></SPAN>&nbsp;&nbsp;&nbsp; </SPAN>static {<BR><o:p></o:p></SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN><SPAN style="mso-spacerun: yes">&nbsp;</SPAN><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>try {<BR><o:p></o:p></SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN><SPAN style="mso-spacerun: yes">&nbsp;</SPAN><SPAN style="mso-spacerun: yes">&nbsp;</SPAN><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>System.loadLibrary("mapscript"); //load native library<BR><o:p></o:p></SPAN>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <SPAN style="mso-spacerun: yes">&nbsp;</SPAN>System.out.println(" * mapscript native library loaded *");<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN><SPAN style="mso-spacerun: yes">&nbsp;</SPAN><SPAN style="mso-spacerun: yes">&nbsp;</SPAN><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>} catch (Exception e) {<BR><o:p></o:p></SPAN>&nbsp;<SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN><SPAN style="mso-spacerun: yes">&nbsp;</SPAN><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;</SPAN>System.err.println(" * error loading native library *");<BR><o:p></o:p></SPAN>&nbsp; </SPAN><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="mso-spacerun: yes">&nbsp;</SPAN><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>System.err.println("Error is: " + e);<BR></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN><SPAN style="mso-spacerun: yes">&nbsp;</SPAN><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;</SPAN>e.printStackTrace();<BR> <o:p></o:p></SPAN>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>}<BR></SPAN></SPAN></SPAN>    }<SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 12.0pt"><BR>}</SPAN></PRE>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 12.0pt"></SPAN>&nbsp;</P>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"></o:p>In order for the JVM to successfully load the Mapscript library, the <EM>mapscript.dll</EM> (or <EM>mapscript.so</EM> under Linux) must be located on the search path. To set the <EM>PATH</EM> environmental variable during the start-up of Tomcat the <EM>bin/setenv.bat</EM> (<EM>setenv.sh</EM>) batch/shell file must contain the following lines (Windows only):</P>
<P class=Default style="TEXT-JUSTIFY: inter-ideograph; MARGIN: 0cm 0cm 0pt; TEXT-ALIGN: justify"><o:p><FONT face="Times New Roman" size=3></FONT></o:p>&nbsp;</P><PRE class=Default style="TEXT-JUSTIFY: inter-ideograph; MARGIN: 0cm 0cm 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 12.0pt">SET PATH=%PATH%;%CATALINA_HOME%\shared\mapscript<BR><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 12.0pt">SET PROJ_LIB=%CATALINA_HOME%\shared\mapscript\nad</SPAN></SPAN></PRE>
<P class=Default style="TEXT-JUSTIFY: inter-ideograph; MARGIN: 0cm 0cm 0pt; TEXT-ALIGN: justify"><o:p><FONT face="Times New Roman" size=3>&nbsp;</FONT></o:p></P>
<P class=Default style="TEXT-JUSTIFY: inter-ideograph; MARGIN: 0cm 0cm 0pt; TEXT-ALIGN: justify">The <EM>PROJ_LIB</EM> variable is required by mapscript.dll to locate the directory containing the projections definitions.&nbsp;</P>
<P class=Default style="TEXT-JUSTIFY: inter-ideograph; MARGIN: 0cm 0cm 0pt; TEXT-ALIGN: justify"><o:p>&nbsp;</o:p></P>
<P class=Default style="TEXT-JUSTIFY: inter-ideograph; MARGIN: 0cm 0cm 0pt; TEXT-ALIGN: justify">This <SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 12.0pt">MapscriptLoader</SPAN> class can now be loaded from within any context without crashing the JVM:</P>
<P class=MsoNormal style="TEXT-JUSTIFY: inter-ideograph; MARGIN: 0cm 0cm 0pt; TEXT-ALIGN: justify"><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 12.0pt"><o:p></o:p></SPAN></P>
<P class=MsoCaption style="MARGIN: 0cm 0cm 0pt">
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><o:p><FONT face="Times New Roman" size=3></FONT></o:p></P><PRE><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 12.0pt">try {&nbsp;<BR></SPAN><SPAN style="FONT-SIZE: 10pt; FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;</SPAN>Class.forName("MapscriptLoader");<o:p></o:p></SPAN> <BR><FONT size=2>} catch(Throwable t) { t.printStackTrace(); }</FONT></PRE>