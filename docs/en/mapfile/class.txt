.. _class:

.. index::
   single: CLASS
    
*****************************************************************************
 CLASS
*****************************************************************************

.. index::
   pair: CLASS; BACKGROUNDCOLOR
    
BACKGROUNDCOLOR [r] [g] [b]
    Color to use for non-transparent symbols.
  
.. index::
   pair: CLASS; COLOR
    
COLOR [r] [g] [b]
    Color to use for drawing features.

.. index::
   pair: CLASS; DEBUG
    
DEBUG [on|off]
    Enables debugging of the class object. Verbose output is generated
    and sent to the standard error output (STDERR) or the MapServer
    logfile if one is set using the `LOG` parameter in the :ref:`WEB`
    object.
    
    .. seealso::
        
        :ref:`rfc28`

.. index::
   pair: CLASS; EXPRESSION
    
EXPRESSION [string]

    Four types of expressions are now supported to define which class
    a feature belongs to: String comparisons, regular expressions,
    logical expressions, and string functions (see
    :ref:`EXPRESSIONS`).  If no expression is given, then all features
    are said to belong to this class.

    - String comparisons are case sensitive and are the fastest to
      evaluate.  No special delimiters are necessary although strings
      must be quoted if they contain special characters. (As a matter
      of good habit, it is recommended that you quote all strings).
      The attribute to use for comparison is defined in the
      :ref:`LAYER` `CLASSITEM` parameter.
      
    - Regular expression are limited using slashes (/regex/). The
      attribute to use for comparison is defined in the :ref:`LAYER`
      `CLASSITEM` parameter.

    - Logical expressions allow the building of fairly complex tests
      based on one or more attributes and therefore are only available
      with shapefiles.  Logical expressions are delimited by
      parentheses "(expression)".  Attribute names are delimited by
      square brackets "[ATTRIBUTE]".  Attribute names are case
      sensitive and must match the items in the shapefile.  For
      example:

      ::

         EXPRESSION ([POPULATION] > 50000 AND '[LANGUAGE]' eq 'FRENCH')

      The following logical operators are supported: =, >, <, <=, >=,
      =, or, and, lt, gt, ge, le, eq, ne, in, ~, ~\*.  As one might
      expect, this level of complexity is slower to process.

    - One string function exists: length(). It computes the length of
      a string:

      ::
        
         EXPRESSION (length('[NAME_E]') < 8)                      
                                
      String comparisons and regular expressions work from the
      classitem defined at the layer level. You may mix expression
      types within the different classes of a layer.

.. index::
   pair: CLASS; GROUP
    
GROUP [string]
    Allows for grouping of classes.  It is only used when a
    `CLASSGROUP` at the :ref:`LAYER` level is set. If the `CLASSGROUP`
    parameter is set, only classes that have the same group name would
    be considered at rendering time.  An example of a layer with
    grouped classes might contain:

    .. code-block:: mapfile

      LAYER
        ...
        CLASSGROUP "group1"
        ...
        CLASS
          NAME "name1"
          GROUP "group1"
          ...
        END
        CLASS
          NAME "name2"
          GROUP "group2"
          ...
        END
        CLASS
          NAME "name3"
          GROUP "group1"
          ...
        END
        ...
      END # layer


.. index::
   pair: CLASS; KEYIMAGE

.. _KEYIMAGE:
     
KEYIMAGE [filename]
    Full filename of the legend image for the :ref:`CLASS`. This image
    is used when building a legend (or requesting a legend icon via
    MapScript or the :ref:`CGI application <cgi>`).
    
.. index::
   pair: CLASS; LABEL
    
:ref:`LABEL`
    Signals the start of a :ref:`LABEL` object.

.. index::
   pair: CLASS; MAXSCALEDENOM
    
MAXSCALEDENOM [double]
    Minimum scale at which this :ref:`CLASS` is drawn. Scale is given
    as the denominator of the actual scale fraction, for example for a
    map at a scale of 1:24,000 use 24000. Implemented in MapServer
    5.0, to replace the deprecated `MAXSCALE` parameter.

    .. seealso::
        
        :term:`Map Scale`

MAXSCALE [double] - deprecated
    Since MapServer 5.0 the proper parameter to use is `MAXSCALEDENOM`
    instead.  The deprecated `MAXSCALE` is the minimum scale at which
    this class is drawn.  Scale is given as the denominator of the
    actual scale fraction, for example for a map at a scale of
    1:24,000 use 24000.
    
    .. deprecated:: 5.0
    
.. index::
   pair: CLASS; MAXSIZE
    
MAXSIZE [integer]
    Maximum size in pixels to draw a symbol. Default is 50.
    See :ref:`LAYER` :ref:`SYMBOLSCALEDENOM <symbolscaledenom>`.

.. index::
   pair: CLASS; MINSCALEDENOM
    
MINSCALEDENOM [double]
    Maximum scale at which this :ref:`CLASS` is drawn.  Scale is given
    as the denominator of the actual scale fraction, for example for a
    map at a scale of 1:24,000 use 24000.  Implemented in MapServer
    5.0, to replace the deprecated `MINSCALE` parameter.
    
    .. seealso::
        
        :term:`Map Scale`

MINSCALE [double] - deprecated
    Since MapServer 5.0 the proper parameter to use is `MINSCALEDENOM`
    instead.  The deprecated `MINSCALE` is the maximum scale at which
    this CLASS is drawn.  Scale is given as the denominator of the
    actual scale fraction, for example for a map at a scale of
    1:24,000 use 24000.

    .. deprecated:: 5.0
    
.. index::
   pair: CLASS; MINSIZE
    
MINSIZE [integer]
    Minimum size in pixels to draw a symbol. Default is 0.
    See :ref:`LAYER` :ref:`SYMBOLSCALEDENOM <symbolscaledenom>`.
    
.. index::
   pair: CLASS; NAME
    
NAME [string]
    Name to use in legends for this class. If not set class won't show
    up in legend.
    
.. index::
   pair: CLASS; OUTLINECOLOR
    
OUTLINECOLOR [r] [g] [b]
    Color to use for outlining polygons and certain marker
    symbols. Line symbols do not support outline colors.
    
.. index::
   pair: CLASS; SIZE
    
SIZE [integer]
    Height, in pixels, of the symbol/pattern to be used. Only useful
    with scalable symbols. For `vector` (and `ellipse`) :ref:`SYMBOL`
    `TYPE`\s the default size is based on the range of Y values in the
    `POINTS` defining the symbol. For symbols of type `pixmap`, the
    default is the vertical size of the image. Default size is 1 for
    TTF symbols.
    
.. index::
   pair: CLASS; STATUS
    
STATUS [on|off]
    Sets the current display status of the class.  Default turns the
    class on.

.. index::
   pair: CLASS; STYLE
    
:ref:`STYLE`
    Signals the start of a :ref:`STYLE` object.  A class can contain
    multiple styles.  Multiple styles can be used create complex
    symbols (by overlay/stacking).  See :ref:`sym_construction` for
    more information on advanced symbol construction.

.. index::
   pair: CLASS; SYMBOL
    
:ref:`SYMBOL` [integer|string|filename]
    The symbol name or number to use for all features if attribute
    tables are not used. The number is the index of the symbol in the
    symbol file, starting at 1, the 5th symbol in the file is
    therefore symbol number 5.  You can also give your symbols names
    using the `NAME` parameter in the symbol definition file, and use
    those to refer to them. Default is 0, which results in a single
    pixel, single width line, or solid polygon fill, depending on
    layer type.

    You can also specify a gif or png filename. The path is relative
    to the location of the mapfile.
    
    See :ref:`sym_construction` for more information on advanced
    symbol construction.

.. index::
   pair: CLASS; TEMPLATE
    
:ref:`TEMPLATE <template>` [filename]
    Template file or URL to use in presenting query results to the
    user.  See :ref:`template` for more info.
    
.. index::
   pair: CLASS; TEXT
    
TEXT [string]
    Static text to label features in this class with. This overrides
    values obtained from the `LABELITEM`.  The string may be given as
    an expression (see :ref:`EXPRESSIONS`).  This allows you to
    concatenate multiple attributes into a single label.  You can for
    example concatenate the attributes FIRSTNAME and LASTNAME like
    this:

    ::

       TEXT '[FIRSTNAME] [LASTNAME]'

.. index::
   pair: CLASS; VALIDATION

VALIDATION
    Signals the start of a `VALIDATION` block.

    As of MapServer 5.4.0, `VALIDATION` blocks are the preferred
    mechanism for specifying validation patterns for CGI param runtime
    substitutions.  See :ref:`RUNSUB`.

.. index::
   single: Stacked symbols


Although the recommended way of making stacked symbols to achieve
interesting effects is to use `STYLE`\s, you can also "stack" 2
symbols without using `STYLE`\s.  You define the second symbol, which
effectively sits "on top" of the first symbol (as defined above).

The following parameters allow you to define the second symbol, and
they are equivalent to their non-overlay counterparts:

.. index::
   pair: CLASS; OVERLAYBACKGROUNDCOLOR

.. index::
   pair: CLASS; OVERLAYCOLOR

.. index::
   pair: CLASS; OVERLAYOUTLINECOLOR

.. index::
   pair: CLASS; OVERLAYSIZE

.. index::
   pair: CLASS; OVERLAYMINSIZE

.. index::
   pair: CLASS; OVERLAYMAXSIZE

.. index::
   pair: CLASS; OVERLAYSYMBOL

- OVERLAYBACKGROUNDCOLOR
- OVERLAYCOLOR
- OVERLAYOUTLINECOLOR
- OVERLAYSIZE
- OVERLAYMINSIZE
- OVERLAYMAXSIZE
- OVERLAYSYMBOL
