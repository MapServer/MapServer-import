.. _symbol:

*****************************************************************************
 SYMBOL
*****************************************************************************

- Symbol definitions can be included within the main MapFile or, more 
  commonly, in a separate file. Symbol definitions in a separate file 
  are designated using the SYMBOLSET keyword, as part of the :ref:`MAP Object <map>`. 
  This recommended setup is ideal for re-using symbol definitions across 
  multiple MapServer applications.
- There are 3 main types of symbols in MapServer: Markers, 
  Shadesets, and Lines.
- Symbol 0 is always the degenerate case for a particular class of 
  symbol. For points, symbol 0 is a single pixel, for shading (i.e. 
  filled polygons) symbol 0 is a solid fill, and for lines, symbol 0 
  is a single pixel wide line.
- Symbol definitions contain no color information, colors are set within 
  :ref:`CLASS` objects.
- For MapServer versions < 5 there is a maximum of 64 symbols per file. This can
  be changed by editing mapsymbol.h and changing the value of MS_MAXSYMBOLS at the 
  top of the file.  As of MapServer 5.0 there is no symbol limit.
- More information can be found in the :ref:`Construction of Cartographic Symbols <sym_construction>`
  document.


.. index::
    pair: ANTIALIAS; SYMBOL
    
ANTIALIAS [true|false]
    Should TrueType fonts be antialiased.

CHARACTER [char]
    Character used to reference a particular TrueType font character. 
    You'll need to figure out the mapping from the keyboard character 
    to font character.

FILLED [true|false]
    Sets the symbol to be filled with a user defined color (See the 
    :ref:`CLASS` object). For marker symbols, if OUTLINECOLOR was specified 
    then the symbol is outlined with it.

FONT [string]
    Name of TrueType font to use as defined in the :ref:`FONTSET`.


GAP [int]
    .. deprecated:: 6.0

    This keyword has been deprecated in version 6.0. It has been replaced by the
    same keyword in the :ref:`STYLE`.
    
    Given in pixels. This defines a distance between symbols for 
    TrueType lines.  As of MapServer 5.0 this also applies to PixMap symbols.

    When drawing the symbol along a line segment, a negative GAP will will add 
    180 degress to the angle. The TrueType and PixMap symbols are always oriented 
    along the line.  A GAP of 0 (the default value) will cause MapServer to use
    the symbol as a brush to draw the line.
    

IMAGE [string]
    Image (GIF or PNG) to use as a marker or brush for type PIXMAP symbols.

NAME [string]
    Alias for this font to be used in :ref:`CLASS` objects

LINECAP [butt|round|square|triangle]
    .. deprecated:: 6.0

    This keyword has been deprecated in version 6.0. It has been replaced by the
    same keyword in the :ref:`STYLE`.
    
    Sets the line cap type for the cartoline symbol. Default is butt. Works 
    with the CARTOLINE symbol only!

LINEJOIN [round|miter|bevel]
    .. deprecated:: 6.0

    This keyword has been deprecated in version 6.0. It has been replaced by the
    same keyword in the :ref:`STYLE`.
    
    Sets the line join type for the cartoline symbol. Default is "none" - 
    lines will not be joined . Works with the CARTOLINE symbol only!

LINEJOINMAXSIZE [int]
    .. deprecated:: 6.0

    This keyword has been deprecated in version 6.0. It has been replaced by the
    same keyword in the :ref:`STYLE`.
    
    Sets the max length of the miter line join type. The value represents a 
    coefficient which multiplies a current symbol size. Default is 3. 
    Works with the CARTOLINE symbol only!

PATTERN [num on] [num off] [num on] ... END
    .. deprecated:: 6.0

    This keyword has been deprecated in version 6.0. It has been replaced by the
    same keyword in the :ref:`STYLE`.
    
    Defines a dash style or pattern.  Implemented in MapServer 5.0,
    to replace the deprecated STYLE parameter.
    
    .. versionadded: 5.0

POINTS [x y] [x y] ... END
    Signifies the start of the definition of points that make up a vector 
    symbol or that define the x and y radius of an ellipse symbol. The end 
    of this section is signified with the keyword END. Coordinates are given 
    in pixels and define the default size of the symbol before any scaling. 
    You can create non-contiguous paths by inserting negative coordinates at 
    the appropriate place. For ellipse symbols you provide a single point that 
    defines the x and y radius of an ellipse. Circles are created when x and 
    y are equal.

.. note::
    If a class using this symbol doesn't contain an explicit size, then the 
    default symbol size will be based on the range of "y" values in the point 
    coordinates. e.g. if the y coordinates of the points in the symbol range 
    from 0 to 5, then the default size for this symbol will be assumed to be 5. 

STYLE [num on] [num off] [num on] ... END -deprecated
    Since MapServer 5.0 the proper parameter to use is PATTERN instead.  
    The deprecated STYLE parameter defines a dash style or pattern.
    
    .. deprecated:: 5.0

TRANSPARENT [color index]
    Sets a transparent color for the input GIF image for pixmap symbols, or 
    determines whether all shade symbols should have a transparent background. 
    For shade symbols it may be desirable to have background features 
    "show through" a transparent hatching pattern, creating a more complex map. 
    By default a symbol's background is the same as the parent image (i.e. 
    color 0). This is user configurable.

TYPE [vector|ellipse|pixmap|truetype|simple|cartoline|hatch]
        *  `vector`: a simple drawing is used to define the shape of the symbol.
        *  `ellipse`: radius values in the x and y directions define an ellipse.
        *  `pixmap`: a user supplied GIF image will be used as the symbol.
        *  `truetype`: TrueType font to use as defined in the FONTSET.
        *  `cartoline`: allows for different designs of line ends (mitered, rounded, 
           beveled). More information can be found in the 
           :ref:`Cartographic Symbols document <sym_construction>`.
        *  `hatch`: produces hatched lines throughout the shape.
