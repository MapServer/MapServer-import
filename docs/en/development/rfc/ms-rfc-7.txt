.. _rfc7:

=========================================
MS RFC 7: MapServer CVS Commit Management
=========================================

:Date:  2005/09/22
:Author: Frank Warmerdam
:Contact: warmerdam at pobox.com
:Last Edited: $Date: 2008-12-23 22:34:31 +0100 (Di, 23. Dez 2008) $
:Status: Adopted
:Id: $Id: ms-rfc-7.txt 8278 2008-12-23 21:34:31Z hobu $

.. note:: 

    This RFC is superseded by :ref:`RFC 7.1 <rfc7.1>`

Purpose
-------

To formalize CVS commit access, and specify some guidelines for CVS 
committers.


Election to CVS Commit Access
-----------------------------

Permission for CVS commit access shall be provided to new developers only
if accepted by the MapServer Technical Steering Committee.   A proposal
should be written to the TSC for new committers and voted on normally.  It
is not necessary to write an RFC document for these votes ... email to 
mapserver-dev is sufficient.

Removal of CVS commit access should be handled by the same process.  

The new committer should have demonstrated commitment to MapServer and
knowledge of the MapServer source code and processes to the committee's
satisfaction, usually by reporting bugs, submitting patches, and/or
actively participating in the various MapServer forums.

The new committer should also be prepared to support any new feature or
changes that he/she commits to the MapServer source tree in future
releases, or to find someone to which to delegate responsibility for
them if he/she stops being available to support the portions of code
that he/she is responsible for.

All committers should also be a member of mapserver-dev mailing list
so they can stay informed on policies, technical developments and 
release preparation.


Committer Tracking
------------------

A list of all project committers will be kept in the main mapserver 
directory (called COMMITTERS) listing for each CVS committer:

* Userid: the id that will appear in the CVS logs for this person.

* Full name: the users actual name. 

* Email address: A current email address at which the committer can be
  reached. It may be altered in normal ways to make it harder to auto-harvest.

* A brief indication of areas of responsibility.  


CVS Administrator
-----------------

One member of the Technical Steering Committee will be designed the CVS
Administrator.  That person will be responsible for giving CVS commit
access to folks, updating the COMMITERS file, and other CVS related 
management.  That person will need login access on the CVS server of course.

Initially Steve Lime will be the CVS Adminstrator. 


CVS Commit Practices
--------------------

The following are considered good CVS commit practices for the MapServer
project. 

* Use meaningful descriptions for CVS commit log entries. 

* Add a bug reference like "(bug 1232)" at the end of CVS commit log entries
  when committing changes related to a bug in bugzilla.

* Include an entry in the HISTORY file for any significant change or bug fix
  committed in the main MapServer source tree. Make sure it is placed under
  the correct version heading and include bug numbers in these messages too.

* Changes should not be committed in stable branches without a corresponding
  bug id and HISTORY entry. Any change worth pushing into the stable version
  is worth a bugzilla bug and good HISTORY notations.

* Never commit new features to a stable branch: only critical fixes. New
  features can only go in the main development trunk.

* Only bug fixes should be committed to the code during pre-release code
  freeze.

* Significant changes to the main development version should be discussed on
  the -dev list before you make them, and larger changes will require a RFC
  approved by the TSC.

* Do not create new branches without the approval of the TSC. Release managers
  are assumed to have permission to create a branch.

* All source code in CVS should be in Unix text format as opposed to DOS text
  mode.

* When committing new features or significant changes to existing source code,
  the committer should take reasonable measures to insure that the source code
  continues to build and work on the most commonly supported platforms
  (currently Linux and Windows), either by testing on those platforms
  directly, or by getting help from other developers working on those
  platforms. If new files or library dependencies are added, then the
  configure.in, Makefile.in, Makefile.vc and related documentations should be
  kept up to date.
