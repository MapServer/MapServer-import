.. _class:

*****************************************************************************
 CLASS
*****************************************************************************

BACKGROUNDCOLOR [r] [g] [b]
    Farbe für nicht-transparente Symbole.
  
COLOR [r] [g] [b]
    Farbe in der Features dargestellt werden.

.. index::
    pair: DEBUG; CLASS

MYOPTION [on|off]
    Lorem Ipsum la le lu
    
DEBUG [on|off]
    Aktiviert Debugausgaben für das Class-Objekt. Die Ausgaben werden an die
    Standardfehlerausgabe (STDERR) oder in die MapServer- Logdatei geschrieben,
    falls der LOG Parameter im :ref:`WEB` Objekt entsprechend gesetzt wurde.
    
    .. seealso::
        
        :ref:`rfc28`

.. index::
    pair: EXPRESSION; CLASS
    
:ref:`EXPRESSION <expressions>` [string]
    Es gibt vier Arten von Ausdrücken (Expression) mit denen eine 
    Klassenzugehörigkeit definiert wird. Zeichenkettenvergleich, 
    reguläre Ausdrücke, logische Ausdrücke und Zeichenkettenfunktionen. Wird 
    kein Ausdruck definiert, werden alle Objekte einer Klasse zugeordnet.

    - Zeichnkettenvergleiche sind abhängig von Groß-/Kleinschreibung und werden
      am schnellsten ausgewertet. Es müssen keine Begrenzer angegeben werden, 
      es sei denn die Zeichenkette enthält Sonderzeichen. (Um Probleme zu 
      vermeiden wird empfohlen Zeichenketten immer in Anführungszeichen zu 
      setzen).

    - Reguläre Ausdrücke müssen zwischen zwei Schrägstriche geschrieben werden
      /regulärer Ausrdruck/. Es sollten keine Anführungszeichen benutzt werden.

    - Logische Ausdrücke ermöglichen komplexe Tests auf Basis von einem oder
      mehreren Attributen und sind nur für Shapefiles verfügbar. Logische
      Ausdrücke werden durch Klammern begrenzt "(logischer Ausdruck)". 
      Attributnamen werden durch eckige Klammern begrenzt "[Attributname]. 
      Die Attributnamen wird zwischen Groß- und Kleinschreibung unterschieden.
      Beispiel:
      ::
      EXPRESSION ([POPULATION] > 50000 AND '[LANGUAGE]' eq 'FRENCH')

      Folgende logischen Operatoren stehen zur Verfügung: =,>,<,<=,>=,=,or,and,
      lt,gt,ge,le,eq,ne. Die Auswertung von logischen Ausdrücken erfordert 
      mehr Zeitaufwand.

    - Es existiert eine Zeichenkettenfunktion: length(). Diese berechnet die
      Länge einer Zeichenkette, wie das folgende Beispiel veranschaulicht:

      ::
        
         EXPRESSION (length('[NAME_E]') < 8)

      Zeichenkettenvergleiche und reguläre Ausdrücke benutzten die Angabe von
      CLASSITEM im Layer-Abschnitt. Für verschiedene Klassen eines Layers 
      können verschiedene Ausdruckstypen benutzt werden.

.. index::
    pair: GROUP; CLASS
    
GROUP [string]
    Ermöglicht die Gruppierung von Klassen. Dies wird nur benutzt wenn auf
    :ref:`LAYER` Ebene CLASSGROUP definiert wurde. Ist CLASSGROUP gesetzt, 
    werden nur Klassen mit dem gleichen Gruppennamen beim Zeichnen 
    berücksichtigt. Ein Beispiel mit mehreren Gruppen von Klassen:

    .. code-block:: mapfile

      LAYER
        ...
        CLASSGROUP "group1"
        ...
        CLASS
          NAME "name1"
          GROUP "group1"
          ...
        END
        CLASS
          NAME "name2"
          GROUP "group2"
          ...
        END
        CLASS
          NAME "name3"
          GROUP "group1"
          ...
        END
        ...
      END # layer


.. index::
    pair: KEYIMAGE; CLASS

.. _KEYIMAGE:
     
KEYIMAGE [filename]
    Vollständiger Dateiname des Legendenbildes für :ref:`CLASS`. Dieses Bild
    wird bei der Legendenerstellung benutzt (oder bei der Abfrage des 
    Legendensymbols via MapScript oder :ref:`CGI application <cgi>`).
    
:ref:`LABEL`
    Signalisiert den Anfang des :ref:`LABEL` Objektes.

.. index::
    pair: MAXSCALEDENOM; CLASS
    
MAXSCALEDENOM [double]
    Größter Maßstab bis zu dem :ref:`CLASS` gezeichnet wird. 
    Es wird nur der Nenner des eigentlichen Maßstabwertes angegeben. Z.B. für
    eine Karte im Maßstab 1:24000 wird 24000 angegeben. Implementiert in
    MapServer 5.0, ersetzt veralteten MAXSCALE Parameter.

    .. seealso::
        
        :term:`Map Scale`

MAXSCALE [double]
    (*veraltet*) Ab MapServer Version 5.0 ist MAXSCALEDENOM zu benutzen.
    Größter Maßstab bis zu dem die Klasse gezeichnet wird. 
    Es wird nur der Nenner des eigentlichen Maßstabwertes angegeben. Z.B. für
    eine Karte im Maßstab 1:24000 wird 24000 angegeben.

    .. deprecated: 5.0
    
MAXSIZE [integer]
    Maximalgröße des Symbol. Angabe in Pixel. Standard ist 50.

.. index::
    pair: MINSCALEDENOM; CLASS
    
MINSCALEDENOM [double]
    Kleinster Maßstab bis zu dem :ref:`CLASS` gezeichnet wird. 
    Es wird nur der Nenner des eigentlichen Maßstabwertes angegeben. Z.B. für
    eine Karte im Maßstab 1:24000 wird 24000 angegeben. Implementiert in
    MapServer 5.0, ersetzt veralteten MINSCALE Parameter.
    
    .. seealso::
        
        :term:`Map Scale`

MINSCALE [double]
    (*veraltet*) Ab MapServer Version 5.0 ist MINSCALEDENOM zu benutzen.
    Kleinster Maßstab bis zu dem die Klasse gezeichnet wird. 
    Es wird nur der Nenner des eigentlichen Maßstabwertes angegeben. Z.B. für
    eine Karte im Maßstab 1:24000 wird 24000 angegeben.

    .. deprecated: 5.0
    
MINSIZE [integer]
    Kleinste Größe des Symbol. Angabe in Pixel. Standard ist 0.
    
NAME [string]
    Name der für die Legendenbeschriftung benutzt wird. Wird keine Name
    gesetzt, erscheint diese Klasse nicht in der Legende.
    
OUTLINECOLOR [r] [g] [b]
    Farbe der Umrandung für Polygone und bestimmte Markersymbole. 
    Liniensymbole unterstützen keine Umrandungsfarbe.
    
SIZE [integer]
    Höhe von Symbolen/Mustern. Angabe in Pixel. Nur bei skalierbaren Symbolen
    sinnvoll. Für Vektor- (und Ellipsen-) Symboltypen basiert die Standardgröße
    auf dem Intevall der Y-Werte das bei der Definition des POINTS Symbol
    benutzt wurde. Für Pixmap-Symbole entspricht die vertikale Größe dem 
    Standardwert . Für TTF Symbole ist der Standardwert 1.
    
STATUS [on|off]
    Definiert den Anzeigestatus der Klasse. Standardwert ist on.

:ref:`STYLE`
    Signalisiert den Anfang des :ref:`STYLE` Objektes. Eine Klasse kann
    mehrere Styles beinhalten.

:ref:`SYMBOL` [integer|string|filename]
    Der zu benutzende Symbolname oder Symbolnummer für alle Objekte falls keine
    Attributtablle benutzt wird. Die Nummer entspricht dem Index in der 
    Symboldatei, beginnend bei 1. Das fünfte Symbol hat demnach die Nummer 5.
    Symbole können auch über Namen angesprochen werden, dazu kann in der 
    Symboldefinition das Schlüsselwort NAME benutzt werden. Standardwert ist 0,
    je nach Layertyp entspricht dies einem einzelnen Pixel, einer 1-Pixel 
    breiten Linie oder einem flächig gefüllten Polygon.
    
    Es kann auch eine gif- oder png-Datei angegeben werden. Der Pfad ist 
    relativ zum Mapfile anzugeben.
    
:ref:`TEMPLATE <template>` [filename]
    Template-Datei oder URL das zur Darstellung der Abfrageergebnisse benutzt
    werden soll. Siehe auch :ref:`template`. 
    
TEXT [string]
    Statischer Text der zur Beschriftung der Klassenelemente benutzt wird. Dies
    überschreibt die Werte die durch LABELITEM definiert wurden. Der Ausdruck
    kann durch runde Klammern begrenzt werden. Dadurch ist es möglich mehrere 
    Attribute für ein einzelnes Label aneinander zu hängen. 
    Beispiel: ([FIRSTNAME],[LASTNAME]).

Es können auch 2 Symbole "gestapelt" werden. Das zweite Symbol wird genauso wie
das erste definiert, nur das es auf dem ersten Symbol gerendert wird. 
Siehe auch :ref:`sym_construction` für weitere Informationen.

Die folgenden Parameter stehen zur Verfügung und verhalten sich äquivalent 
zu den "nicht-Overlay-Parametern".

- OVERLAYBACKGROUNDCOLOR
- OVERLAYCOLOR
- OVERLAYOUTLINECOLOR
- OVERLAYSIZE
- OVERLAYMINSIZE
- OVERLAYMAXSIZE
- OVERLAYSYMBOL
