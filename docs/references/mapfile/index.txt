.. _mapfile:

*****************************************************************************
 Mapfile Reference
*****************************************************************************

:Release: |release|
:Date: |today|

:Author: Steve Lime
:Contact: steve.lime(at)dnr.state.mn.us
:Author: Jeff McKenna
:Contact: jmckenna(at)gatewaygeomatics.com
:Author: Jean-Fran√ßois Doyon
:Contact: jdoyon(at)ccrs.nrcan.gc.ca



The Mapfile is the heart of MapServer.  It defines the relationships between 
objects, points MapServer to where data are located and defines how things are 
to be drawn.

There are some important concepts that you must understand before you can 
reliably use mapfiles to configure MapServer.  First is the concept of a 
:ref:`LAYER`.  A layer is the combination of data plus styling. Data, in 
the form of attributes plus geometry, are given styling using :ref:`CLASS` 
and :ref:`STYLE` directives.

* :ref:`CLASS` defines thematic classes for a given layer and each layer 
  must have at least one class. In cases with more than one class, membership 
  is determined using attribute values and expressions. 

* :ref:`EXPRESSIONs <expressions>` describe how to classify and segment 
  data in order to alter the rendering without physically changing the data.
  
* :ref:`FEATURE` defines inline features. You can use inline features when 
  it's not possible (or too much trouble) to create a shapefile. Inline 
  features can also be built via urls or forms. 

* :ref:`GRID` defines a map graticule as a :ref:`LAYER`.

* :ref:`INCLUDE` defines a file to be included in mapfile parsing.

* :ref:`JOIN` defines how a specific data join is defined.

* :ref:`LABEL` defines the object used to annotate a feature with a piece 
  of text.  Labels can also be used as symbols through the use of TrueType 
  fonts.

* :ref:`LAYER` is the most commonly used mapfile object.  This describes the 
  combination of data and styling to draw items in a map.  Layers are 
  drawn in their order of appearance in the mapfile.

* :ref:`LEGEND` defines how a legend is to be built. Legend components are 
  built automatically from class objects from individual layers.
  
* :ref:`MAP` defines the master object of the mapfile.  It defines 
  application/map-wide parameters.

* :ref:`OUTPUTFORMAT` defines the format data are to be rendered in.

* :ref:`PROJECTION` defines the coordinate system to display and/or 
  project your data into.

* :ref:`QUERYMAP` defines a mechanism to map the results of a query.

* :ref:`REFERENCE` defines how reference maps are to be created.

* :ref:`SCALEBAR` defines how map scalebars should be built.

* :ref:`STYLE` holds the parametrs for symbolization.

* :ref:`variable_sub` New in MapServer 4.0, variables can be 
  substituted within mapfile parameter values. At this time, 
  cookie and CGI parameter values are supported. This allows 
  MapServer mapfiles to be aware of a user's cookies (Good for implementing 
  security), or non-mapserver request parameters (Good for 
  integrating with other systems)

* :ref:`WEB` defines how a web interface rendered with MapServer will operate.

-----------------------------------------------------------------------------
 Notes
-----------------------------------------------------------------------------
* The Mapfile is NOT case-sensitive.
* Strings containing non-alphanumeric characters or a MapServer keyword MUST 
  be quoted. It is recommended to put ALL strings in double-quotes.
* For MapServer versions < 5, there was a default maximum of 200 layers per
  mapfile (there is no layer limit with MapServer >= 5).  This can be changed by
  editing the map.h file to change the value of MS_MAXLAYERS to the desired
  number and recompiling.  Here are other important default limits when using a
  MapServer version < 5:

  * MAXCLASSES 250 (set in map.h)
  * MAXSTYLES 5 (set in map.h)
  * MAXSYMBOLS 64 (set in mapsymbol.h)

  MapServer versions >= 5 have no limits for classes, styles, symbols, or layers.
* File paths may be given as absolute paths, or as paths relative to the 
  location of the mapfile. In addition, data files may be specified relative 
  to the SHAPEPATH.
* The mapfile has a hierarchical structure, with the Map object being the 
  "root". All other objects fall under this one.
* Comments are designated with a #.
* Attributes are named using the following syntax: [ATTRIBUTENAME] ... Note 
  that the name of the attribute included between the square brackets 
  *IS CASE SENSITIVE*. Generally ESRI generated shapefiles have their 
  attributes (.dbf column names) all in upper-case for instance, and for 
  PostGIS, *ALWAYS* use lower-case.
* MapServer Regular Expressions are used through the operating system's 
  C Library. For information on how to use and write Regular Expressions on 
  your system, you should read the documentation provided with your C Library. 
  On Linux, this is GLibC, and you can read "man 7 regex" ... This man page is 
  also available on most UNIX's. Since these RegEx's are POSIX compliant, they 
  should be the same on Windows as well, so windows users can try searching 
  the web for "man 7 regex" since man pages are available all over the web. 